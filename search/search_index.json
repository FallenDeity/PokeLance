{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting Started","text":"PokeLance <p>  A flexible, statically typed and easy to use pokeapi wrapper for python \ud83d\ude80 </p> <p>Features:</p> <ul> <li>Modern and pythonic API asynchronously built on top of aiohttp</li> <li>Flexible and easy to use</li> <li>Statically typed with mypy</li> <li>Linted with ruff</li> <li>Well documented</li> <li>Optimized for speed and performance</li> <li>Automatically caches data for faster access</li> <li>Caches endpoints for user convenience</li> </ul>"},{"location":"#installation","title":"Installation","text":"Bash<pre><code>$ python -m pip install PokeLance\n</code></pre>"},{"location":"#usage","title":"Usage","text":"Python<pre><code>import asyncio\n\nfrom pokelance import PokeLance\n\nclient = PokeLance()  # Create a client instance\n\n\nasync def main() -&gt; None:\n    print(await client.ping())  # Ping the pokeapi\n    print(await client.berry.fetch_berry(\"cheri\"))  # Fetch a berry from the pokeapi\n    print(await client.berry.fetch_berry_flavor(\"spicy\"))\n    print(await client.berry.fetch_berry_firmness(\"very-soft\"))\n    print(client.berry.get_berry(\"cheri\"))  # Get a cached berry it will return None if it doesn't exist\n    print(client.berry.get_berry_flavor(\"spicy\"))\n    print(client.berry.get_berry_firmness(\"very-soft\"))\n    await client.close()  # Close the client\n    return None\n\n\nasyncio.run(main())\n</code></pre>"},{"location":"#with-async-context-manager","title":"With Async Context Manager","text":"Python<pre><code>import asyncio\n\nimport aiohttp\nfrom pokelance import PokeLance\n\n\nasync def main() -&gt; None:\n    # Use an async context manager to create a client instance\n    async with aiohttp.ClientSession() as session, PokeLance(session=session) as client:\n        print(await client.ping())  # Ping the pokeapi\n        print(await client.berry.fetch_berry(\"cheri\"))  # Fetch a berry from the pokeapi\n        print(await client.berry.fetch_berry_flavor(\"spicy\"))\n        print(await client.berry.fetch_berry_firmness(\"very-soft\"))\n        print(client.berry.get_berry(\"cheri\"))  # Get a cached berry it will return None if it doesn't exist\n        print(client.berry.get_berry_flavor(\"spicy\"))\n        print(client.berry.get_berry_firmness(\"very-soft\"))\n        # The client will be closed automatically when the async context manager exits\n    return None\n\nasyncio.run(main())\n</code></pre>"},{"location":"#examples","title":"Examples","text":"<p>Examples</p> <p>Following examples are available open an issue if you want more examples or more details on certain examples.</p> <ul> <li>Basic Usage</li> <li>Advanced cache usage</li> <li>Discord bot example</li> <li>FastAPI example</li> </ul>"},{"location":"#important-links","title":"Important Links","text":"<ul> <li>PokeAPI</li> <li>PokeAPI Documentation</li> <li>PokeLance Documentation</li> <li>PokeLance ReadTheDocs</li> <li>PokeLance GitHub</li> <li>PokeLance PyPI</li> <li>PokeLance Discord</li> </ul> <p>Note</p> <p>This is a work in progress. If you find any bugs or have any suggestions, please open an issue here.</p>"},{"location":"api_reference/constants/","title":"Constants","text":""},{"location":"api_reference/constants/#pokelance.constants","title":"<code>pokelance.constants</code>","text":""},{"location":"api_reference/constants/#pokelance.constants.BaseEnum","title":"<code>BaseEnum</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Base enum class for all enums in the library.</p>"},{"location":"api_reference/constants/#pokelance.constants.BaseEnum.__get__","title":"<code>__get__(instance, owner)</code>","text":"<p>Get the value of the enum.</p> Source code in <code>pokelance/constants.py</code> Python<pre><code>def __get__(self, instance: t.Any, owner: t.Any) -&gt; t.Any:\n    \"\"\"\n    Get the value of the enum.\n    \"\"\"\n    return self.value\n</code></pre>"},{"location":"api_reference/constants/#pokelance.constants.BerryExtension","title":"<code>BerryExtension</code>","text":"<p>               Bases: <code>Extension</code></p> <p>Represents the berry extension.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The name of the extension.</p> <code>categories</code> <code>List[str]</code> <p>The categories of the extension.</p>"},{"location":"api_reference/constants/#pokelance.constants.ContestExtension","title":"<code>ContestExtension</code>","text":"<p>               Bases: <code>Extension</code></p> <p>Represents the contest extension.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The name of the extension.</p> <code>categories</code> <code>List[str]</code> <p>The categories of the extension.</p>"},{"location":"api_reference/constants/#pokelance.constants.EncounterExtension","title":"<code>EncounterExtension</code>","text":"<p>               Bases: <code>Extension</code></p> <p>Represents the encounter extension.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The name of the extension.</p> <code>categories</code> <code>List[str]</code> <p>The categories of the extension.</p>"},{"location":"api_reference/constants/#pokelance.constants.EvolutionExtension","title":"<code>EvolutionExtension</code>","text":"<p>               Bases: <code>Extension</code></p> <p>Represents the evolution extension.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The name of the extension.</p> <code>categories</code> <code>List[str]</code> <p>The categories of the extension.</p>"},{"location":"api_reference/constants/#pokelance.constants.Extension","title":"<code>Extension</code>","text":"<p>Represents an extension.</p>"},{"location":"api_reference/constants/#pokelance.constants.ExtensionEnum","title":"<code>ExtensionEnum</code>","text":"<p>               Bases: <code>BaseEnum</code></p>"},{"location":"api_reference/constants/#pokelance.constants.ExtensionEnum.__get__","title":"<code>__get__(instance, owner)</code>","text":"<p>Get the value of the enum.</p> Source code in <code>pokelance/constants.py</code> Python<pre><code>def __get__(self, instance: t.Any, owner: t.Any) -&gt; t.Any:\n    \"\"\"\n    Get the value of the enum.\n    \"\"\"\n    return self.value\n</code></pre>"},{"location":"api_reference/constants/#pokelance.constants.ExtensionEnum.validate_url","title":"<code>validate_url(url)</code>  <code>classmethod</code>","text":"<p>Validate the url.</p> Source code in <code>pokelance/constants.py</code> Python<pre><code>@classmethod\ndef validate_url(cls, url: str) -&gt; t.Optional[RequestObject]:\n    \"\"\"\n    Validate the url.\n    \"\"\"\n    if not url.startswith(\"https://pokeapi.co/api/v2/\") or not (groups := re.match(EXTENSION_PATTERN, url)):\n        raise ValueError(f\"Invalid url: {url}\")\n    category, value = groups.groups()\n    for i in cls:\n        if category.lower() in i.value.categories:\n            return RequestObject(extension=i.name, category=category, value=value)\n    raise ValueError(f\"Invalid url: {url}\")\n</code></pre>"},{"location":"api_reference/constants/#pokelance.constants.GameExtension","title":"<code>GameExtension</code>","text":"<p>               Bases: <code>Extension</code></p> <p>Represents the game extension.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The name of the extension.</p> <code>categories</code> <code>List[str]</code> <p>The categories of the extension.</p>"},{"location":"api_reference/constants/#pokelance.constants.ItemExtension","title":"<code>ItemExtension</code>","text":"<p>               Bases: <code>Extension</code></p> <p>Represents the item extension.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The name of the extension.</p> <code>categories</code> <code>List[str]</code> <p>The categories of the extension.</p>"},{"location":"api_reference/constants/#pokelance.constants.LocationExtension","title":"<code>LocationExtension</code>","text":"<p>               Bases: <code>Extension</code></p> <p>Represents the location extension.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The name of the extension.</p> <code>categories</code> <code>List[str]</code> <p>The categories of the extension.</p>"},{"location":"api_reference/constants/#pokelance.constants.MachineExtension","title":"<code>MachineExtension</code>","text":"<p>               Bases: <code>Extension</code></p> <p>Represents the machine extension.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The name of the extension.</p> <code>categories</code> <code>List[str]</code> <p>The categories of the extension.</p>"},{"location":"api_reference/constants/#pokelance.constants.MoveExtension","title":"<code>MoveExtension</code>","text":"<p>               Bases: <code>Extension</code></p> <p>Represents the move extension.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The name of the extension.</p> <code>categories</code> <code>List[str]</code> <p>The categories of the extension.</p>"},{"location":"api_reference/constants/#pokelance.constants.PokemonExtension","title":"<code>PokemonExtension</code>","text":"<p>               Bases: <code>Extension</code></p> <p>Represents the pokemon extension.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The name of the extension.</p> <code>categories</code> <code>List[str]</code> <p>The categories of the extension.</p>"},{"location":"api_reference/constants/#pokelance.constants.ShowdownEnum","title":"<code>ShowdownEnum</code>","text":"<p>               Bases: <code>BaseEnum</code></p> <p>Represents a showdown enum.</p>"},{"location":"api_reference/constants/#pokelance.constants.ShowdownEnum.__get__","title":"<code>__get__(instance, owner)</code>","text":"<p>Get the value of the enum.</p> Source code in <code>pokelance/constants.py</code> Python<pre><code>def __get__(self, instance: t.Any, owner: t.Any) -&gt; t.Any:\n    \"\"\"\n    Get the value of the enum.\n    \"\"\"\n    return self.value\n</code></pre>"},{"location":"api_reference/exceptions/","title":"Exceptions","text":""},{"location":"api_reference/exceptions/#pokelance.exceptions","title":"<code>pokelance.exceptions</code>","text":""},{"location":"api_reference/exceptions/#pokelance.exceptions.AudioNotFound","title":"<code>AudioNotFound(message, route, status)</code>","text":"<p>               Bases: <code>NotFound</code></p> <p>Exception raised when an audio is not found.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>The message to display.</p> required <code>route</code> <code>Route</code> <p>The route that caused the exception.</p> required <code>status</code> <code>int</code> <p>The status code of the exception.</p> required Source code in <code>pokelance/exceptions.py</code> Python<pre><code>def __init__(self, message: str, route: \"Route\", status: int) -&gt; None:\n    super().__init__(message, route, status)\n</code></pre>"},{"location":"api_reference/exceptions/#pokelance.exceptions.AudioNotFound.create","title":"<code>create()</code>","text":"<p>Creates an exception from the status code.</p> Source code in <code>pokelance/exceptions.py</code> Python<pre><code>def create(self) -&gt; \"HTTPException\":\n    \"\"\"Creates an exception from the status code.\"\"\"\n    return get_exception(self.status)(self.message, self.route, self.status)\n</code></pre>"},{"location":"api_reference/exceptions/#pokelance.exceptions.BadRequest","title":"<code>BadRequest(message, route, status)</code>","text":"<p>               Bases: <code>HTTPException</code></p> <p>Exception raised when a bad request is made. [HTTP 400]</p> Source code in <code>pokelance/exceptions.py</code> Python<pre><code>def __init__(self, message: str, route: \"Route\", status: int) -&gt; None:\n    self.status = status\n    super().__init__(message, route)\n</code></pre>"},{"location":"api_reference/exceptions/#pokelance.exceptions.BadRequest.create","title":"<code>create()</code>","text":"<p>Creates an exception from the status code.</p> Source code in <code>pokelance/exceptions.py</code> Python<pre><code>def create(self) -&gt; \"HTTPException\":\n    \"\"\"Creates an exception from the status code.\"\"\"\n    return get_exception(self.status)(self.message, self.route, self.status)\n</code></pre>"},{"location":"api_reference/exceptions/#pokelance.exceptions.Forbidden","title":"<code>Forbidden(message, route, status)</code>","text":"<p>               Bases: <code>HTTPException</code></p> <p>Exception raised when forbidden. [HTTP 403]</p> Source code in <code>pokelance/exceptions.py</code> Python<pre><code>def __init__(self, message: str, route: \"Route\", status: int) -&gt; None:\n    self.status = status\n    super().__init__(message, route)\n</code></pre>"},{"location":"api_reference/exceptions/#pokelance.exceptions.Forbidden.create","title":"<code>create()</code>","text":"<p>Creates an exception from the status code.</p> Source code in <code>pokelance/exceptions.py</code> Python<pre><code>def create(self) -&gt; \"HTTPException\":\n    \"\"\"Creates an exception from the status code.\"\"\"\n    return get_exception(self.status)(self.message, self.route, self.status)\n</code></pre>"},{"location":"api_reference/exceptions/#pokelance.exceptions.HTTPException","title":"<code>HTTPException(message, route, status)</code>","text":"<p>               Bases: <code>PokeLanceException</code></p> <p>Base exception class for HTTP exceptions.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>The message to display.</p> required <code>route</code> <code>Route</code> <p>The route that caused the exception.</p> required <code>status</code> <code>int</code> <p>The status code of the exception.</p> required <p>Attributes:</p> Name Type Description <code>message</code> <code>str</code> <p>The message to display.</p> <code>route</code> <code>Route</code> <p>The route that caused the exception.</p> <code>status</code> <code>int</code> <p>The status code of the exception.</p> Source code in <code>pokelance/exceptions.py</code> Python<pre><code>def __init__(self, message: str, route: \"Route\", status: int) -&gt; None:\n    self.status = status\n    super().__init__(message, route)\n</code></pre>"},{"location":"api_reference/exceptions/#pokelance.exceptions.HTTPException.create","title":"<code>create()</code>","text":"<p>Creates an exception from the status code.</p> Source code in <code>pokelance/exceptions.py</code> Python<pre><code>def create(self) -&gt; \"HTTPException\":\n    \"\"\"Creates an exception from the status code.\"\"\"\n    return get_exception(self.status)(self.message, self.route, self.status)\n</code></pre>"},{"location":"api_reference/exceptions/#pokelance.exceptions.ImageNotFound","title":"<code>ImageNotFound(message, route, status)</code>","text":"<p>               Bases: <code>NotFound</code></p> <p>Exception raised when an image is not found.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>The message to display.</p> required <code>route</code> <code>Route</code> <p>The route that caused the exception.</p> required <code>status</code> <code>int</code> <p>The status code of the exception.</p> required Source code in <code>pokelance/exceptions.py</code> Python<pre><code>def __init__(self, message: str, route: \"Route\", status: int) -&gt; None:\n    super().__init__(message, route, status)\n</code></pre>"},{"location":"api_reference/exceptions/#pokelance.exceptions.ImageNotFound.create","title":"<code>create()</code>","text":"<p>Creates an exception from the status code.</p> Source code in <code>pokelance/exceptions.py</code> Python<pre><code>def create(self) -&gt; \"HTTPException\":\n    \"\"\"Creates an exception from the status code.\"\"\"\n    return get_exception(self.status)(self.message, self.route, self.status)\n</code></pre>"},{"location":"api_reference/exceptions/#pokelance.exceptions.MethodNotAllowed","title":"<code>MethodNotAllowed(message, route, status)</code>","text":"<p>               Bases: <code>HTTPException</code></p> <p>Exception raised when a method is not allowed. [HTTP 405]</p> Source code in <code>pokelance/exceptions.py</code> Python<pre><code>def __init__(self, message: str, route: \"Route\", status: int) -&gt; None:\n    self.status = status\n    super().__init__(message, route)\n</code></pre>"},{"location":"api_reference/exceptions/#pokelance.exceptions.MethodNotAllowed.create","title":"<code>create()</code>","text":"<p>Creates an exception from the status code.</p> Source code in <code>pokelance/exceptions.py</code> Python<pre><code>def create(self) -&gt; \"HTTPException\":\n    \"\"\"Creates an exception from the status code.\"\"\"\n    return get_exception(self.status)(self.message, self.route, self.status)\n</code></pre>"},{"location":"api_reference/exceptions/#pokelance.exceptions.NotFound","title":"<code>NotFound(message, route, status)</code>","text":"<p>               Bases: <code>HTTPException</code></p> <p>Exception raised when a resource is not found. [HTTP 404]</p> Source code in <code>pokelance/exceptions.py</code> Python<pre><code>def __init__(self, message: str, route: \"Route\", status: int) -&gt; None:\n    self.status = status\n    super().__init__(message, route)\n</code></pre>"},{"location":"api_reference/exceptions/#pokelance.exceptions.NotFound.create","title":"<code>create()</code>","text":"<p>Creates an exception from the status code.</p> Source code in <code>pokelance/exceptions.py</code> Python<pre><code>def create(self) -&gt; \"HTTPException\":\n    \"\"\"Creates an exception from the status code.\"\"\"\n    return get_exception(self.status)(self.message, self.route, self.status)\n</code></pre>"},{"location":"api_reference/exceptions/#pokelance.exceptions.PokeLanceException","title":"<code>PokeLanceException(message, route)</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Base exception class for PokeLance.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>The message to display.</p> required <code>route</code> <code>Route</code> <p>The route that caused the exception.</p> required <p>Attributes:</p> Name Type Description <code>message</code> <code>str</code> <p>The message to display.</p> <code>route</code> <code>Route</code> <p>The route that caused the exception.</p> Source code in <code>pokelance/exceptions.py</code> Python<pre><code>def __init__(self, message: str, route: \"Route\") -&gt; None:\n    self.message = message\n    self.route = route\n    super().__init__(message)\n</code></pre>"},{"location":"api_reference/exceptions/#pokelance.exceptions.ResourceNotFound","title":"<code>ResourceNotFound(message, route, status, suggestions=None)</code>","text":"<p>               Bases: <code>NotFound</code></p> <p>Exception raised when a resource is not found.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>The message to display.</p> required <code>route</code> <code>Route</code> <p>The route that caused the exception.</p> required <code>status</code> <code>int</code> <p>The status code of the exception.</p> required <code>suggestions</code> <code>Optional[List[str]]</code> <p>Possible suggestions for the resource.</p> <code>None</code> Source code in <code>pokelance/exceptions.py</code> Python<pre><code>def __init__(self, message: str, route: \"Route\", status: int, suggestions: t.Optional[t.List[str]] = None) -&gt; None:\n    self.suggestions = suggestions\n    super().__init__(message, route, status)\n</code></pre>"},{"location":"api_reference/exceptions/#pokelance.exceptions.ResourceNotFound.create","title":"<code>create()</code>","text":"<p>Creates an exception from the status code.</p> Source code in <code>pokelance/exceptions.py</code> Python<pre><code>def create(self) -&gt; \"HTTPException\":\n    \"\"\"Creates an exception from the status code.\"\"\"\n    return get_exception(self.status)(self.message, self.route, self.status)\n</code></pre>"},{"location":"api_reference/exceptions/#pokelance.exceptions.Unauthorized","title":"<code>Unauthorized(message, route, status)</code>","text":"<p>               Bases: <code>HTTPException</code></p> <p>Exception raised when unauthorized. [HTTP 401]</p> Source code in <code>pokelance/exceptions.py</code> Python<pre><code>def __init__(self, message: str, route: \"Route\", status: int) -&gt; None:\n    self.status = status\n    super().__init__(message, route)\n</code></pre>"},{"location":"api_reference/exceptions/#pokelance.exceptions.Unauthorized.create","title":"<code>create()</code>","text":"<p>Creates an exception from the status code.</p> Source code in <code>pokelance/exceptions.py</code> Python<pre><code>def create(self) -&gt; \"HTTPException\":\n    \"\"\"Creates an exception from the status code.\"\"\"\n    return get_exception(self.status)(self.message, self.route, self.status)\n</code></pre>"},{"location":"api_reference/exceptions/#pokelance.exceptions.UnknownError","title":"<code>UnknownError(message, route, status)</code>","text":"<p>               Bases: <code>HTTPException</code></p> <p>Exception raised when an unknown error occurs.</p> Source code in <code>pokelance/exceptions.py</code> Python<pre><code>def __init__(self, message: str, route: \"Route\", status: int) -&gt; None:\n    self.status = status\n    super().__init__(message, route)\n</code></pre>"},{"location":"api_reference/exceptions/#pokelance.exceptions.UnknownError.create","title":"<code>create()</code>","text":"<p>Creates an exception from the status code.</p> Source code in <code>pokelance/exceptions.py</code> Python<pre><code>def create(self) -&gt; \"HTTPException\":\n    \"\"\"Creates an exception from the status code.\"\"\"\n    return get_exception(self.status)(self.message, self.route, self.status)\n</code></pre>"},{"location":"api_reference/exceptions/#pokelance.exceptions.get_exception","title":"<code>get_exception(status)</code>","text":"<p>Gets an exception from the status code.</p> <p>Parameters:</p> Name Type Description Default <code>status</code> <code>int</code> <p>The status code.</p> required <p>Returns:</p> Type Description <code>HTTPException</code> <p>The exception.</p> Source code in <code>pokelance/exceptions.py</code> Python<pre><code>def get_exception(status: int) -&gt; t.Type[HTTPException]:\n    \"\"\"Gets an exception from the status code.\n\n    Parameters\n    ----------\n    status: int\n        The status code.\n\n    Returns\n    -------\n    pokelance.exceptions.HTTPException\n        The exception.\n    \"\"\"\n    return CODES.get(status, UnknownError)\n</code></pre>"},{"location":"api_reference/languages/","title":"Languages","text":""},{"location":"api_reference/languages/#pokelance.languages","title":"<code>pokelance.languages</code>","text":""},{"location":"api_reference/languages/#pokelance.languages.Languages","title":"<code>Languages</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Languages that are available on Pokeapi.</p> <p>Attributes:</p> Name Type Description <code>JAPANESE</code> <code>Language</code> <p>The Japanese language.</p> <code>ROOMAJI</code> <code>Language</code> <p>The Japanese language written in roomaji.</p> <code>KOREAN</code> <code>Language</code> <p>The Korean language.</p> <code>CHINESE</code> <code>Language</code> <p>The Chinese language.</p> <code>FRENCH</code> <code>Language</code> <p>The French language.</p> <code>GERMAN</code> <code>Language</code> <p>The German language.</p> <code>SPANISH</code> <code>Language</code> <p>The Spanish language.</p> <code>ITALIAN</code> <code>Language</code> <p>The Italian language.</p> <code>CZECH</code> <code>Language</code> <p>The Czech language.</p> <code>ENGLISH</code> <code>Language</code> <p>The English language.</p> <code>JA</code> <code>Language</code> <p>The Japanese language.</p> <code>CHINESE_SIMPLIFIED</code> <code>Language</code> <p>The Chinese language written in simplified Chinese.</p> <code>PORTUGAL_BRAZILIAN</code> <code>Language</code> <p>The Portuguese language written in Brazilian Portuguese.</p>"},{"location":"api_reference/languages/#pokelance.languages.Languages.__int__","title":"<code>__int__()</code>","text":"<p>Returns the id of the language.</p> Source code in <code>pokelance/languages.py</code> Python<pre><code>def __int__(self) -&gt; int:\n    \"\"\"\n    Returns the id of the language.\n    \"\"\"\n    return int(self.value.id)\n</code></pre>"},{"location":"api_reference/languages/#pokelance.languages.Languages.__str__","title":"<code>__str__()</code>","text":"<p>Returns the name of the language.</p> Source code in <code>pokelance/languages.py</code> Python<pre><code>def __str__(self) -&gt; str:\n    \"\"\"\n    Returns the name of the language.\n    \"\"\"\n    return str(self.value.name)\n</code></pre>"},{"location":"api_reference/logger/","title":"Logging","text":""},{"location":"api_reference/logger/#pokelance.logger","title":"<code>pokelance.logger</code>","text":""},{"location":"api_reference/logger/#pokelance.logger.FileHandler","title":"<code>FileHandler(*, ext, folder='logs')</code>","text":"<p>               Bases: <code>FileHandler</code></p> <p>Emit a log record.</p> <p>Parameters:</p> Name Type Description Default <code>ext</code> <code>str</code> <p>The file extension.</p> required <code>folder</code> <code>Path | str</code> <p>The folder to save the logs in. Defaults to \"logs\".</p> <code>'logs'</code> <p>Create a new file handler.</p> Source code in <code>pokelance/logger.py</code> Python<pre><code>def __init__(self, *, ext: str, folder: t.Union[pathlib.Path, str] = \"logs\") -&gt; None:\n    \"\"\"Create a new file handler.\"\"\"\n    self.folder = pathlib.Path(folder)\n    self.ext = ext\n    self.folder.mkdir(exist_ok=True)\n    super().__init__(\n        self.folder / f\"{datetime.datetime.today().strftime('%Y-%m-%d')}-{ext}.log\",\n        encoding=\"utf-8\",\n    )\n    self.setFormatter(Formatter())\n</code></pre>"},{"location":"api_reference/logger/#pokelance.logger.FileHandler.emit","title":"<code>emit(record)</code>","text":"<p>Emit a log record.</p> Source code in <code>pokelance/logger.py</code> Python<pre><code>def emit(self, record: logging.LogRecord) -&gt; None:\n    \"\"\"Emit a log record.\"\"\"\n    if self._last_entry.date() != datetime.datetime.today().date():\n        self._last_entry = datetime.datetime.today()\n        self.close()\n        self.baseFilename = (self.folder / f\"{self._last_entry.strftime('%Y-%m-%d')}-{self.ext}.log\").as_posix()\n        self.stream = self._open()\n    super().emit(record)\n</code></pre>"},{"location":"api_reference/logger/#pokelance.logger.Formatter","title":"<code>Formatter()</code>","text":"<p>               Bases: <code>Formatter</code></p> <p>Format the log record.</p> Source code in <code>pokelance/logger.py</code> Python<pre><code>def __init__(self) -&gt; None:\n    super().__init__(\n        \"[%(asctime)s] | %(pathname)s:%(lineno)d | %(levelname)s | %(message)s\",\n        style=\"%\",\n    )\n</code></pre>"},{"location":"api_reference/logger/#pokelance.logger.Formatter.format","title":"<code>format(record)</code>","text":"<p>Format the log record.</p> Source code in <code>pokelance/logger.py</code> Python<pre><code>def format(self, record: logging.LogRecord) -&gt; str:\n    \"\"\"Format the log record.\"\"\"\n    return f\"{LogLevelColors[record.levelname].value}{super().format(record)}{LogLevelColors.ENDC.value}\"\n</code></pre>"},{"location":"api_reference/logger/#pokelance.logger.LogLevelColors","title":"<code>LogLevelColors</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Colors for the log levels.</p>"},{"location":"api_reference/logger/#pokelance.logger.Logger","title":"<code>Logger(*, name, level=logging.DEBUG, file_logging=False)</code>","text":"<p>               Bases: <code>Logger</code></p> <p>The logger used to log information about the client.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the logger.</p> required <code>level</code> <code>int</code> <p>The level of the logger.</p> <code>DEBUG</code> <code>file_logging</code> <code>bool</code> <p>Whether or not to log to a file.</p> <code>False</code> <p>Attributes:</p> Name Type Description <code>_handler</code> <code>StreamHandler</code> <p>The stream handler used to log to the console.</p> <code>_file_handler</code> <code>Optional[FileHandler]</code> <p>The file handler used to log to a file.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; logs = Logger(name=\"pokelance\")\n&gt;&gt;&gt; logs.info(\"Hello, world!\")\n[2021-08-29 17:05:32,000] | pokelance/logger.py:95 | INFO | Hello, world!\n</code></pre> Source code in <code>pokelance/logger.py</code> Python<pre><code>def __init__(self, *, name: str, level: int = logging.DEBUG, file_logging: bool = False) -&gt; None:\n    super().__init__(name, level)\n    self._handler = logging.StreamHandler()\n    self._handler.addFilter(RelativePathFilter())\n    self._handler.setFormatter(Formatter())\n    self.addHandler(self._handler)\n    if file_logging:\n        self._file_handler = FileHandler(ext=name)\n        self._file_handler.addFilter(RelativePathFilter())\n        self.addHandler(self._file_handler)\n    logging.addLevelName(FLAIR, \"FLAIR\")\n</code></pre>"},{"location":"api_reference/logger/#pokelance.logger.Logger.flair","title":"<code>flair(message, *args, **kwargs)</code>","text":"<p>Record a flair log.</p> Source code in <code>pokelance/logger.py</code> Python<pre><code>def flair(self, message: str, *args: t.Any, **kwargs: t.Any) -&gt; None:\n    \"\"\"Record a flair log.\"\"\"\n    self.log(FLAIR, message, *args, **kwargs)\n</code></pre>"},{"location":"api_reference/logger/#pokelance.logger.Logger.set_formatter","title":"<code>set_formatter(formatter)</code>","text":"<p>Set the formatter.</p> Source code in <code>pokelance/logger.py</code> Python<pre><code>def set_formatter(self, formatter: logging.Formatter) -&gt; None:\n    \"\"\"Set the formatter.\"\"\"\n    self._handler.setFormatter(formatter)\n    if self._file_handler is not None:\n        self._file_handler.setFormatter(formatter)\n</code></pre>"},{"location":"api_reference/logger/#pokelance.logger.RelativePathFilter","title":"<code>RelativePathFilter</code>","text":"<p>               Bases: <code>Filter</code></p>"},{"location":"api_reference/logger/#pokelance.logger.RelativePathFilter.filter","title":"<code>filter(record)</code>","text":"<p>Filter the log record.</p> Source code in <code>pokelance/logger.py</code> Python<pre><code>def filter(self, record: logging.LogRecord) -&gt; bool:\n    \"\"\"Filter the log record.\"\"\"\n    record.pathname = record.pathname.replace(os.getcwd(), \"~\")\n    return True\n</code></pre>"},{"location":"api_reference/pokelance/","title":"PokeLance","text":""},{"location":"api_reference/pokelance/#pokelance.client","title":"<code>pokelance.client</code>","text":""},{"location":"api_reference/pokelance/#pokelance.client.PokeLance","title":"<code>PokeLance(*, audio_cache_size=128, image_cache_size=128, cache_size=100, logger=None, file_logging=False, cache_endpoints=True, session=None)</code>","text":"<p>Main class to interact with the PokeAPI.</p> <p>Attributes:</p> Name Type Description <code>_http</code> <code>HttpClient</code> <p>The HTTP client used to make requests to the PokeAPI.</p> <code>_logger</code> <code>Union[Logger, Logger]</code> <p>The logger used to log information about the client.</p> <code>_ext_tasks</code> <code>List[Tuple[Callable[[], Coroutine[Any, Any, None]], str]]</code> <p>A list of coroutines to load extension data.</p> <code>cache_endpoints</code> <code>bool</code> <p>Whether to cache endpoints. Defaults to True.</p> <code>EXTENSIONS</code> <code>Path</code> <p>The path to the extensions directory.</p> <code>berry</code> <code>Berry</code> <p>The berry extension.</p> <code>contest</code> <code>Contest</code> <p>The contest extension.</p> <code>encounter</code> <code>Encounter</code> <p>The encounter extension.</p> <code>evolution</code> <code>Evolution</code> <p>The evolution extension.</p> <code>game</code> <code>Game</code> <p>The game extension.</p> <code>item</code> <code>Item</code> <p>The item extension.</p> <code>location</code> <code>Location</code> <p>The location extension.</p> <code>machine</code> <code>Machine</code> <p>The machine extension.</p> <code>move</code> <code>Move</code> <p>The move extension.</p> <code>pokemon</code> <code>Pokemon</code> <p>The pokemon extension.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; import pokelance\n&gt;&gt;&gt; import asyncio\n&gt;&gt;&gt; client = pokelance.PokeLance()\n&gt;&gt;&gt; async def main() -&gt; None:\n...     print(await client.ping())\n...     await client.close()\n&gt;&gt;&gt; asyncio.run(main())\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>audio_cache_size</code> <code>int</code> <p>The size of the audio cache. Defaults to 128.</p> <code>128</code> <code>image_cache_size</code> <code>int</code> <p>The size of the image cache. Defaults to 128.</p> <code>128</code> <code>cache_size</code> <code>int</code> <p>The size of the cache to use for the HTTP client.</p> <code>100</code> <code>logger</code> <code>Optional[Logger]</code> <p>The logger to use. If not provided, a new logger will be created.</p> <code>None</code> <code>file_logging</code> <code>bool</code> <p>Whether to log to a file. Defaults to False.</p> <code>False</code> <code>session</code> <code>Optional[ClientSession]</code> <p>The session to use for the HTTP client. It is recommended to use the default.</p> <code>None</code> Source code in <code>pokelance/client.py</code> Python<pre><code>def __init__(\n    self,\n    *,\n    audio_cache_size: int = 128,\n    image_cache_size: int = 128,\n    cache_size: int = 100,\n    logger: t.Optional[\"logging.Logger\"] = None,\n    file_logging: bool = False,\n    cache_endpoints: bool = True,\n    session: t.Optional[\"aiohttp.ClientSession\"] = None,\n) -&gt; None:\n    \"\"\"\n    Parameters\n    ----------\n    audio_cache_size : int\n        The size of the audio cache. Defaults to 128.\n    image_cache_size : int\n        The size of the image cache. Defaults to 128.\n    cache_size : int\n        The size of the cache to use for the HTTP client.\n    logger : typing.Optional[logging.Logger]\n        The logger to use. If not provided, a new logger will be created.\n    file_logging : bool\n        Whether to log to a file. Defaults to False.\n    session : typing.Optional[aiohttp.ClientSession]\n        The session to use for the HTTP client. It is recommended to use the default.\n    \"\"\"\n    self._logger = logger or Logger(name=\"pokelance\", file_logging=file_logging)\n    self._http = HttpClient(client=self, session=session, cache_size=cache_size)\n    self.cache_endpoints = cache_endpoints\n    self._ext_tasks: t.List[t.Tuple[t.Callable[[], t.Coroutine[t.Any, t.Any, None]], str]] = []\n    self._image_cache_size = image_cache_size\n    self._audio_cache_size = audio_cache_size\n    self.get_image_async.set_size(image_cache_size)\n    self.get_audio_async.set_size(audio_cache_size)\n    self.setup_hook()\n</code></pre>"},{"location":"api_reference/pokelance/#pokelance.client.PokeLance.audio_cache_size","title":"<code>audio_cache_size: int</code>  <code>property</code> <code>writable</code>","text":"<p>The size of the audio cache.</p> <p>Returns:</p> Type Description <code>int</code> <p>The size of the audio cache.</p>"},{"location":"api_reference/pokelance/#pokelance.client.PokeLance.ext_tasks","title":"<code>ext_tasks: t.List[t.Tuple[t.Callable[[], t.Coroutine[t.Any, t.Any, None]], str]]</code>  <code>property</code>","text":"<p>A list of coroutines to load extension data.</p> <p>Returns:</p> Type Description <code>List[Tuple[Callable[[], Coroutine[Any, Any, None]], str]]</code> <p>The list of tasks.</p>"},{"location":"api_reference/pokelance/#pokelance.client.PokeLance.http","title":"<code>http: HttpClient</code>  <code>property</code>","text":"<p>The HTTP client used to make requests to the PokeAPI.</p> <p>Returns:</p> Type Description <code>HttpClient</code> <p>The HTTP client.</p>"},{"location":"api_reference/pokelance/#pokelance.client.PokeLance.image_cache_size","title":"<code>image_cache_size: int</code>  <code>property</code> <code>writable</code>","text":"<p>The size of the image cache.</p> <p>Returns:</p> Type Description <code>int</code> <p>The size of the image cache.</p>"},{"location":"api_reference/pokelance/#pokelance.client.PokeLance.logger","title":"<code>logger: t.Union[logging.Logger, Logger]</code>  <code>property</code>","text":"<p>The logger used to log information about the client.</p> <p>Returns:</p> Type Description <code>Logger</code> <p>The logger.</p>"},{"location":"api_reference/pokelance/#pokelance.client.PokeLance.add_extension","title":"<code>add_extension(name, extension)</code>","text":"<p>Adds an extension to the client. This is called automatically when an extension is loaded.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the extension.</p> required <code>extension</code> <code>BaseExtension</code> <p>The extension to add.</p> required Source code in <code>pokelance/client.py</code> Python<pre><code>def add_extension(self, name: str, extension: \"BaseExtension\") -&gt; None:\n    \"\"\"\n    Adds an extension to the client. This is called automatically when an extension is loaded.\n\n    Parameters\n    ----------\n    name : str\n        The name of the extension.\n    extension : BaseExtension\n        The extension to add.\n    \"\"\"\n    self._ext_tasks.append((extension.setup, name))\n    setattr(self, name, extension)\n</code></pre>"},{"location":"api_reference/pokelance/#pokelance.client.PokeLance.close","title":"<code>close()</code>  <code>async</code>","text":"<p>Closes the client session. Recommended to use this when the client is no longer needed. Not needed if the client is used in a context manager.</p> Source code in <code>pokelance/client.py</code> Python<pre><code>async def close(self) -&gt; None:\n    \"\"\"\n    Closes the client session. Recommended to use this when the client is no longer needed.\n    Not needed if the client is used in a context manager.\n    \"\"\"\n    self.logger.warning(\"Closing session!\")\n    await self._http.close()\n</code></pre>"},{"location":"api_reference/pokelance/#pokelance.client.PokeLance.from_url","title":"<code>from_url(url)</code>  <code>async</code>","text":"<p>Constructs a request from urls present in the data.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The URL to construct the request from.</p> required <p>Returns:</p> Type Description <code>BaseType</code> <p>The data from the URL.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the url is invalid.</p> <code>ResourceNotFound</code> <p>If the data is not found.</p> Source code in <code>pokelance/client.py</code> Python<pre><code>async def from_url(self, url: str) -&gt; BaseType:\n    \"\"\"\n    Constructs a request from urls present in the data.\n\n    Parameters\n    ----------\n    url : str\n        The URL to construct the request from.\n\n    Returns\n    -------\n    BaseType\n        The data from the URL.\n\n    Raises\n    ------\n    ValueError\n        If the url is invalid.\n    ResourceNotFound\n        If the data is not found.\n    \"\"\"\n    if params := ExtensionEnum.validate_url(url):\n        return await self.getch_data(params.extension, params.category, params.value)\n    raise ValueError(f\"Invalid URL: {url}\")\n</code></pre>"},{"location":"api_reference/pokelance/#pokelance.client.PokeLance.get_audio_async","title":"<code>get_audio_async(url)</code>  <code>async</code>","text":"<p>Gets an audio from the url asynchronously.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The URL to get the audio from.</p> required <p>Returns:</p> Type Description <code>bytes</code> <p>The audio data.</p> Source code in <code>pokelance/client.py</code> Python<pre><code>@alru_cache(maxsize=128, typed=True)\nasync def get_audio_async(self, url: str) -&gt; bytes:\n    \"\"\"\n    Gets an audio from the url asynchronously.\n\n    Parameters\n    ----------\n    url : str\n        The URL to get the audio from.\n\n    Returns\n    -------\n    bytes\n        The audio data.\n    \"\"\"\n    return await self._http.load_audio(url)\n</code></pre>"},{"location":"api_reference/pokelance/#pokelance.client.PokeLance.get_image_async","title":"<code>get_image_async(url)</code>  <code>async</code>","text":"<p>Gets an image from the url asynchronously.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The URL to get the image from.</p> required <p>Returns:</p> Type Description <code>bytes</code> <p>The image data.</p> Source code in <code>pokelance/client.py</code> Python<pre><code>@alru_cache(maxsize=128, typed=True)\nasync def get_image_async(self, url: str) -&gt; bytes:\n    \"\"\"\n    Gets an image from the url asynchronously.\n\n    Parameters\n    ----------\n    url : str\n        The URL to get the image from.\n\n    Returns\n    -------\n    bytes\n        The image data.\n    \"\"\"\n    return await self._http.load_image(url)\n</code></pre>"},{"location":"api_reference/pokelance/#pokelance.client.PokeLance.getch_data","title":"<code>getch_data(ext, category, id_)</code>  <code>async</code>","text":"<p>A getch method that looks up the cache for the data first then gets it from the API if it is not found.</p> <p>Parameters:</p> Name Type Description Default <code>ext</code> <code>Union[ExtensionEnum, ExtensionsL, str]</code> <p>The extension to get the data from.</p> required <code>category</code> <code>str</code> <p>The category to get the data from.</p> required <code>id_</code> <code>Union[int, str]</code> <p>The ID of the data to get.</p> required <p>Returns:</p> Type Description <code>BaseType</code> <p>The data.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the extension or category is invalid.</p> <code>ResourceNotFound</code> <p>If the data is not found.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; import pokelance\n&gt;&gt;&gt; import asyncio\n&gt;&gt;&gt; from pokelance.constants import ExtensionEnum\n&gt;&gt;&gt; from pokelance.models import Pokemon\n&gt;&gt;&gt; client = pokelance.PokeLance()\n&gt;&gt;&gt; async def main() -&gt; None:\n...     pokemon: Pokemon = await client.getch_data(ExtensionEnum.Pokemon, \"pokemon\", 1)\n...     print(pokemon.name)\n...     await client.close()\n&gt;&gt;&gt; asyncio.run(main())\nbulbasaur\n</code></pre> Source code in <code>pokelance/client.py</code> Python<pre><code>async def getch_data(\n    self, ext: t.Union[ExtensionEnum, ExtensionsL, str], category: str, id_: t.Union[int, str]\n) -&gt; BaseType:\n    \"\"\"\n    A getch method that looks up the cache for the data first then gets it from the API if it is not found.\n\n    Parameters\n    ----------\n    ext : Union[ExtensionEnum, ExtensionsL, str]\n        The extension to get the data from.\n    category : str\n        The category to get the data from.\n    id_ : Union[int, str]\n        The ID of the data to get.\n\n    Returns\n    -------\n    BaseType\n        The data.\n\n    Raises\n    ------\n    ValueError\n        If the extension or category is invalid.\n    ResourceNotFound\n        If the data is not found.\n\n    Examples\n    --------\n    &gt;&gt;&gt; import pokelance\n    &gt;&gt;&gt; import asyncio\n    &gt;&gt;&gt; from pokelance.constants import ExtensionEnum\n    &gt;&gt;&gt; from pokelance.models import Pokemon\n    &gt;&gt;&gt; client = pokelance.PokeLance()\n    &gt;&gt;&gt; async def main() -&gt; None:\n    ...     pokemon: Pokemon = await client.getch_data(ExtensionEnum.Pokemon, \"pokemon\", 1)\n    ...     print(pokemon.name)\n    ...     await client.close()\n    &gt;&gt;&gt; asyncio.run(main())\n    bulbasaur\n    \"\"\"\n    if isinstance(ext, str) and (ext := str(ext).title()) not in ExtensionEnum.__members__:\n        raise ValueError(f\"Invalid extension: {ext}\")\n    categories = ExtensionEnum.get_categories(ext) if isinstance(ext, str) else ext.categories  # type: ignore\n    if (category := category.lower().replace(\"_\", \"-\")) not in categories:\n        raise ValueError(f\"Invalid category: {category}, valid categories: {categories}\")\n    category = category.replace(\"-\", \"_\")\n    ext_ = getattr(self, ext.lower()) if isinstance(ext, str) else getattr(self, ext.name.lower())\n    get_, fetch_ = getattr(ext_, f\"get_{category}\"), getattr(ext_, f\"fetch_{category}\")\n    return t.cast(BaseType, get_(id_) or await fetch_(id_))\n</code></pre>"},{"location":"api_reference/pokelance/#pokelance.client.PokeLance.ping","title":"<code>ping()</code>  <code>async</code>","text":"<p>Pings the PokeAPI and returns the latency.</p> <p>Returns:</p> Type Description <code>float</code> <p>The latency of the PokeAPI.</p> Source code in <code>pokelance/client.py</code> Python<pre><code>async def ping(self) -&gt; float:\n    \"\"\"\n    Pings the PokeAPI and returns the latency.\n\n    Returns\n    -------\n    float\n        The latency of the PokeAPI.\n    \"\"\"\n    return await self._http.ping()\n</code></pre>"},{"location":"api_reference/pokelance/#pokelance.client.PokeLance.setup_hook","title":"<code>setup_hook()</code>","text":"<p>The setup hook to be called after the client is created. This is called automatically when the client is created. It is not recommended to call this manually.</p> Source code in <code>pokelance/client.py</code> Python<pre><code>def setup_hook(self) -&gt; None:\n    \"\"\"\n    The setup hook to be called after the client is created.\n    This is called automatically when the client is created.\n    It is not recommended to call this manually.\n    \"\"\"\n    self._logger.info(f\"Using cache size: {self._http.cache.max_size}\")\n    for extension in self.EXTENSIONS.iterdir():\n        if extension.is_file() and extension.suffix == \".py\":\n            if \"_\" not in extension.stem:\n                module = __import__(f\"pokelance.ext.{extension.stem}\", fromlist=[\"setup\"])\n                module.setup(self)\n    self._logger.info(\"Setup complete\")\n</code></pre>"},{"location":"api_reference/pokelance/#pokelance.client.PokeLance.wait_until_ready","title":"<code>wait_until_ready()</code>  <code>async</code>","text":"<p>Waits until the http client caches all the endpoints.</p> Source code in <code>pokelance/client.py</code> Python<pre><code>async def wait_until_ready(self) -&gt; None:\n    \"\"\"\n    Waits until the http client caches all the endpoints.\n    \"\"\"\n    await self._http.connect()\n    self.logger.info(\"Waiting until ready...\")\n    while self._http._tasks_queue and self.cache_endpoints:\n        await asyncio.sleep(0.5)\n    self.logger.info(\"Ready!\")\n</code></pre>"},{"location":"api_reference/cache/cache/","title":"Cache","text":""},{"location":"api_reference/cache/cache/#pokelance.cache.cache","title":"<code>pokelance.cache.cache</code>","text":""},{"location":"api_reference/cache/cache/#pokelance.cache.cache.AbilityCache","title":"<code>AbilityCache(max_size=100)</code>","text":"<p>               Bases: <code>BaseCache['Route', 'models.Ability']</code></p> <p>A cache for abilities.</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def __init__(self, max_size: int = 100) -&gt; None:\n    self._max_size = max_size\n    self._cache: t.Dict[_KT, _VT] = {}\n    self._endpoints: t.Dict[str, Endpoint] = {}\n    self._endpoints_cached: bool = False\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.AbilityCache.cache","title":"<code>cache: t.Dict[_KT, _VT]</code>  <code>property</code>","text":"<p>The cache itself.</p> <p>Returns:</p> Type Description <code>Dict[_KT, _VT]</code> <p>The cache itself.</p>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.AbilityCache.endpoints","title":"<code>endpoints: t.Dict[str, Endpoint]</code>  <code>property</code>","text":"<p>The endpoints that are cached.</p> <p>Returns:</p> Type Description <code>Dict[str, Endpoint]</code> <p>The endpoints that are cached.</p>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.AbilityCache.load","title":"<code>load(path='.')</code>  <code>async</code>","text":"<p>Load the cache from a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to load the cache from.</p> <code>'.'</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load(self, path: str = \".\") -&gt; None:\n    \"\"\"Load the cache from a file.\n\n    Parameters\n    ----------\n    path: str\n        The path to load the cache from.\n    \"\"\"\n    async with aiofiles.open(pathlib.Path(f\"{path}/{self.__class__.__name__}.json\"), \"r\") as f:\n        data = json.loads(await f.read())\n    self._max_size = len(data)\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: t.Type[\"_VT\"] = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    for endpoint, info in data.items():\n        route = route_model(endpoint=endpoint)\n        self.setdefault(route, model.from_payload(info))\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.AbilityCache.load_all","title":"<code>load_all()</code>  <code>async</code>","text":"<p>Load all documents/data from api into the cache. (Endpoints must be cached first)</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load_all(self) -&gt; None:\n    \"\"\"\n    Load all documents/data from api into the cache. (Endpoints must be cached first)\n    \"\"\"\n    if not self._endpoints_cached:\n        raise RuntimeError(\"The endpoints have not been cached yet.\")\n    self._client.logger.info(f\"Loading {self.__class__.__name__}...\")\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: \"models.BaseModel\" = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    self._max_size = len(self._endpoints)\n    for endpoint in self._endpoints.values():\n        route = route_model(endpoint=f\"/{endpoint.url.strip('/').split('/')[-2]}/{str(endpoint)}\")\n        data = self.get(route, None)\n        self.setdefault(route, data if data else model.from_payload(await self._client.http.request(route)))\n    self._client.logger.info(f\"Loaded {self.__class__.__name__}.\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.AbilityCache.load_all_batch","title":"<code>load_all_batch(batch_size=20)</code>  <code>async</code>","text":"<p>Load all documents/data from api into the cache in parallel. (Endpoints must be cached first)</p> <p>Parameters:</p> Name Type Description Default <code>batch_size</code> <code>int</code> <p>The number of documents to load at once. Default is 20 to avoid overwhelming the API.</p> <code>20</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load_all_batch(self, batch_size: int = 20) -&gt; None:\n    \"\"\"\n    Load all documents/data from api into the cache in parallel. (Endpoints must be cached first)\n\n    Parameters\n    ----------\n    batch_size: int\n        The number of documents to load at once. Default is 20 to avoid overwhelming the API.\n    \"\"\"\n    if not self._endpoints_cached:\n        raise RuntimeError(\"The endpoints have not been cached yet.\")\n    self._client.logger.info(f\"Loading {self.__class__.__name__}...\")\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: t.Type[\"_VT\"] = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    self._max_size = len(self._endpoints)\n    endpoints = list(self._endpoints.values())\n    total_endpoints = len(endpoints)\n    for i in range(0, total_endpoints, batch_size):\n        batch = endpoints[i : i + batch_size]\n        tasks = []\n        for endpoint in batch:\n            route = route_model(endpoint=f\"/{endpoint.url.strip('/').split('/')[-2]}/{str(endpoint)}\")\n            data = self.get(route, None)\n            if data:\n                self.setdefault(route, data)\n                self._client.logger.info(f\"Cached {route} - existing data used.\")\n            else:\n                tasks.append(self._fetch_and_cache(route, model))\n        if tasks:\n            await asyncio.gather(*tasks)\n        self._client.logger.debug(\n            f\"Loaded batch {i//batch_size + 1}/{(total_endpoints + batch_size - 1)//batch_size} for {self.__class__.__name__}\"\n        )\n    self._client.logger.info(f\"Loaded {self.__class__.__name__} - {len(self._cache)}/{total_endpoints} items.\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.AbilityCache.load_documents","title":"<code>load_documents(data)</code>","text":"<p>Load documents into the cache.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>List[Dict[str, str]]</code> <p>The data to load.</p> required Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def load_documents(self, data: t.List[t.Dict[str, str]]) -&gt; None:\n    \"\"\"Load documents into the cache.\n\n    Parameters\n    ----------\n    data: typing.List[typing.Dict[str, str]]\n        The data to load.\n    \"\"\"\n    for document in data:\n        self._endpoints[document[\"name\"]] = Endpoint(url=document[\"url\"], id=int(document[\"url\"].split(\"/\")[-2]))\n    self._endpoints_cached = True\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.AbilityCache.save","title":"<code>save(path='.')</code>  <code>async</code>","text":"<p>Save the cache to a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to save the cache to.</p> <code>'.'</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def save(self, path: str = \".\") -&gt; None:\n    \"\"\"Save the cache to a file.\n\n    Parameters\n    ----------\n    path: str\n        The path to save the cache to.\n    \"\"\"\n    pathlib.Path(path).mkdir(parents=True, exist_ok=True)\n    dummy: t.Dict[str, t.Dict[str, t.Any]] = {k.endpoint: v.raw for k, v in self.items()}\n    async with aiofiles.open(pathlib.Path(f\"{path}/{self.__class__.__name__}.json\"), \"w\") as f:\n        await f.write(\"{\\n\")\n        for n, (k, v) in enumerate(dummy.items()):\n            await f.write(\"\\n\".join([4 * \" \" + i for i in f'\"{k}\": {json.dumps(v, indent=4)}'.split(\"\\n\")]))\n            if n != len(dummy) - 1:\n                await f.write(\",\\n\")\n        await f.write(\"\\n}\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.AbilityCache.set_size","title":"<code>set_size(size)</code>","text":"<p>Set the size of the cache.</p> <p>Parameters:</p> Name Type Description Default <code>size</code> <code>int</code> <p>The size of the cache.</p> required Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def set_size(self, size: int) -&gt; None:\n    \"\"\"Set the size of the cache.\n\n    Parameters\n    ----------\n    size: int\n        The size of the cache.\n    \"\"\"\n    self._max_size = size\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.AbilityCache.wait_until_ready","title":"<code>wait_until_ready()</code>  <code>async</code>","text":"<p>Wait until the all the endpoints are cached.</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def wait_until_ready(self) -&gt; None:\n    \"\"\"Wait until the all the endpoints are cached.\"\"\"\n    await self._client.http.connect()\n    while not self._endpoints_cached and self._client.cache_endpoints:\n        await asyncio.sleep(0.5)\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.BaseCache","title":"<code>BaseCache(max_size=100)</code>","text":"<p>               Bases: <code>MutableMapping[_KT, _VT]</code></p> <p>Base class for all caches.</p> <p>Parameters:</p> Name Type Description Default <code>max_size</code> <code>int</code> <p>The maximum size of the cache.</p> <code>100</code> <p>Attributes:</p> Name Type Description <code>_max_size</code> <code>int</code> <p>The maximum size of the cache.</p> <code>_cache</code> <code>Dict[_KT, _VT]</code> <p>The cache itself.</p> <code>_endpoints</code> <code>Dict[str, int]</code> <p>The endpoints that are cached.</p> <code>_endpoints_cached</code> <code>bool</code> <p>Whether or not the endpoints are cached.</p> <code>_client</code> <code>PokeLance</code> <p>The client that this cache is for.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; import asyncio\n&gt;&gt;&gt; from pokelance import PokeLance\n&gt;&gt;&gt;\n&gt;&gt;&gt; async def main():\n...     client = PokeLance()\n...     print(await client.ping())\n...     await asyncio.sleep(5)  # Wait for all the endpoints to load automatically. If not just load them manually.\n...     # from pokelance.http import Endpoint\n...     # data = await client.http.request(Endpoint.get_berry_endpoints())\n...     # client.berry._cache.load_documents(str(client.berry.__class__.__name__).lower(), \"berry\", data)\n...     # print(client.berry.cache.berry.endpoints)\n...     # await client.berry.cache.berry.load_all(client.http)\n...     print(client.berry.cache.berry)\n...     await client.berry.cache.berry.save('temp')  # Save the cache to a file.\n...     await client.berry.cache.berry.load('temp')  # Load the cache from a file.\n...     print(client.berry.cache.berry)\n...     await client.close()\n&gt;&gt;&gt;\n&gt;&gt;&gt; asyncio.run(main())\n</code></pre> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def __init__(self, max_size: int = 100) -&gt; None:\n    self._max_size = max_size\n    self._cache: t.Dict[_KT, _VT] = {}\n    self._endpoints: t.Dict[str, Endpoint] = {}\n    self._endpoints_cached: bool = False\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.BaseCache.cache","title":"<code>cache: t.Dict[_KT, _VT]</code>  <code>property</code>","text":"<p>The cache itself.</p> <p>Returns:</p> Type Description <code>Dict[_KT, _VT]</code> <p>The cache itself.</p>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.BaseCache.endpoints","title":"<code>endpoints: t.Dict[str, Endpoint]</code>  <code>property</code>","text":"<p>The endpoints that are cached.</p> <p>Returns:</p> Type Description <code>Dict[str, Endpoint]</code> <p>The endpoints that are cached.</p>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.BaseCache.load","title":"<code>load(path='.')</code>  <code>async</code>","text":"<p>Load the cache from a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to load the cache from.</p> <code>'.'</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load(self, path: str = \".\") -&gt; None:\n    \"\"\"Load the cache from a file.\n\n    Parameters\n    ----------\n    path: str\n        The path to load the cache from.\n    \"\"\"\n    async with aiofiles.open(pathlib.Path(f\"{path}/{self.__class__.__name__}.json\"), \"r\") as f:\n        data = json.loads(await f.read())\n    self._max_size = len(data)\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: t.Type[\"_VT\"] = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    for endpoint, info in data.items():\n        route = route_model(endpoint=endpoint)\n        self.setdefault(route, model.from_payload(info))\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.BaseCache.load_all","title":"<code>load_all()</code>  <code>async</code>","text":"<p>Load all documents/data from api into the cache. (Endpoints must be cached first)</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load_all(self) -&gt; None:\n    \"\"\"\n    Load all documents/data from api into the cache. (Endpoints must be cached first)\n    \"\"\"\n    if not self._endpoints_cached:\n        raise RuntimeError(\"The endpoints have not been cached yet.\")\n    self._client.logger.info(f\"Loading {self.__class__.__name__}...\")\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: \"models.BaseModel\" = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    self._max_size = len(self._endpoints)\n    for endpoint in self._endpoints.values():\n        route = route_model(endpoint=f\"/{endpoint.url.strip('/').split('/')[-2]}/{str(endpoint)}\")\n        data = self.get(route, None)\n        self.setdefault(route, data if data else model.from_payload(await self._client.http.request(route)))\n    self._client.logger.info(f\"Loaded {self.__class__.__name__}.\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.BaseCache.load_all_batch","title":"<code>load_all_batch(batch_size=20)</code>  <code>async</code>","text":"<p>Load all documents/data from api into the cache in parallel. (Endpoints must be cached first)</p> <p>Parameters:</p> Name Type Description Default <code>batch_size</code> <code>int</code> <p>The number of documents to load at once. Default is 20 to avoid overwhelming the API.</p> <code>20</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load_all_batch(self, batch_size: int = 20) -&gt; None:\n    \"\"\"\n    Load all documents/data from api into the cache in parallel. (Endpoints must be cached first)\n\n    Parameters\n    ----------\n    batch_size: int\n        The number of documents to load at once. Default is 20 to avoid overwhelming the API.\n    \"\"\"\n    if not self._endpoints_cached:\n        raise RuntimeError(\"The endpoints have not been cached yet.\")\n    self._client.logger.info(f\"Loading {self.__class__.__name__}...\")\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: t.Type[\"_VT\"] = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    self._max_size = len(self._endpoints)\n    endpoints = list(self._endpoints.values())\n    total_endpoints = len(endpoints)\n    for i in range(0, total_endpoints, batch_size):\n        batch = endpoints[i : i + batch_size]\n        tasks = []\n        for endpoint in batch:\n            route = route_model(endpoint=f\"/{endpoint.url.strip('/').split('/')[-2]}/{str(endpoint)}\")\n            data = self.get(route, None)\n            if data:\n                self.setdefault(route, data)\n                self._client.logger.info(f\"Cached {route} - existing data used.\")\n            else:\n                tasks.append(self._fetch_and_cache(route, model))\n        if tasks:\n            await asyncio.gather(*tasks)\n        self._client.logger.debug(\n            f\"Loaded batch {i//batch_size + 1}/{(total_endpoints + batch_size - 1)//batch_size} for {self.__class__.__name__}\"\n        )\n    self._client.logger.info(f\"Loaded {self.__class__.__name__} - {len(self._cache)}/{total_endpoints} items.\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.BaseCache.load_documents","title":"<code>load_documents(data)</code>","text":"<p>Load documents into the cache.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>List[Dict[str, str]]</code> <p>The data to load.</p> required Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def load_documents(self, data: t.List[t.Dict[str, str]]) -&gt; None:\n    \"\"\"Load documents into the cache.\n\n    Parameters\n    ----------\n    data: typing.List[typing.Dict[str, str]]\n        The data to load.\n    \"\"\"\n    for document in data:\n        self._endpoints[document[\"name\"]] = Endpoint(url=document[\"url\"], id=int(document[\"url\"].split(\"/\")[-2]))\n    self._endpoints_cached = True\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.BaseCache.save","title":"<code>save(path='.')</code>  <code>async</code>","text":"<p>Save the cache to a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to save the cache to.</p> <code>'.'</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def save(self, path: str = \".\") -&gt; None:\n    \"\"\"Save the cache to a file.\n\n    Parameters\n    ----------\n    path: str\n        The path to save the cache to.\n    \"\"\"\n    pathlib.Path(path).mkdir(parents=True, exist_ok=True)\n    dummy: t.Dict[str, t.Dict[str, t.Any]] = {k.endpoint: v.raw for k, v in self.items()}\n    async with aiofiles.open(pathlib.Path(f\"{path}/{self.__class__.__name__}.json\"), \"w\") as f:\n        await f.write(\"{\\n\")\n        for n, (k, v) in enumerate(dummy.items()):\n            await f.write(\"\\n\".join([4 * \" \" + i for i in f'\"{k}\": {json.dumps(v, indent=4)}'.split(\"\\n\")]))\n            if n != len(dummy) - 1:\n                await f.write(\",\\n\")\n        await f.write(\"\\n}\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.BaseCache.set_size","title":"<code>set_size(size)</code>","text":"<p>Set the size of the cache.</p> <p>Parameters:</p> Name Type Description Default <code>size</code> <code>int</code> <p>The size of the cache.</p> required Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def set_size(self, size: int) -&gt; None:\n    \"\"\"Set the size of the cache.\n\n    Parameters\n    ----------\n    size: int\n        The size of the cache.\n    \"\"\"\n    self._max_size = size\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.BaseCache.wait_until_ready","title":"<code>wait_until_ready()</code>  <code>async</code>","text":"<p>Wait until the all the endpoints are cached.</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def wait_until_ready(self) -&gt; None:\n    \"\"\"Wait until the all the endpoints are cached.\"\"\"\n    await self._client.http.connect()\n    while not self._endpoints_cached and self._client.cache_endpoints:\n        await asyncio.sleep(0.5)\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.BerryCache","title":"<code>BerryCache(max_size=100)</code>","text":"<p>               Bases: <code>BaseCache['Route', 'models.Berry']</code></p> <p>A cache for berries.</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def __init__(self, max_size: int = 100) -&gt; None:\n    self._max_size = max_size\n    self._cache: t.Dict[_KT, _VT] = {}\n    self._endpoints: t.Dict[str, Endpoint] = {}\n    self._endpoints_cached: bool = False\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.BerryCache.cache","title":"<code>cache: t.Dict[_KT, _VT]</code>  <code>property</code>","text":"<p>The cache itself.</p> <p>Returns:</p> Type Description <code>Dict[_KT, _VT]</code> <p>The cache itself.</p>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.BerryCache.endpoints","title":"<code>endpoints: t.Dict[str, Endpoint]</code>  <code>property</code>","text":"<p>The endpoints that are cached.</p> <p>Returns:</p> Type Description <code>Dict[str, Endpoint]</code> <p>The endpoints that are cached.</p>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.BerryCache.load","title":"<code>load(path='.')</code>  <code>async</code>","text":"<p>Load the cache from a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to load the cache from.</p> <code>'.'</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load(self, path: str = \".\") -&gt; None:\n    \"\"\"Load the cache from a file.\n\n    Parameters\n    ----------\n    path: str\n        The path to load the cache from.\n    \"\"\"\n    async with aiofiles.open(pathlib.Path(f\"{path}/{self.__class__.__name__}.json\"), \"r\") as f:\n        data = json.loads(await f.read())\n    self._max_size = len(data)\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: t.Type[\"_VT\"] = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    for endpoint, info in data.items():\n        route = route_model(endpoint=endpoint)\n        self.setdefault(route, model.from_payload(info))\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.BerryCache.load_all","title":"<code>load_all()</code>  <code>async</code>","text":"<p>Load all documents/data from api into the cache. (Endpoints must be cached first)</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load_all(self) -&gt; None:\n    \"\"\"\n    Load all documents/data from api into the cache. (Endpoints must be cached first)\n    \"\"\"\n    if not self._endpoints_cached:\n        raise RuntimeError(\"The endpoints have not been cached yet.\")\n    self._client.logger.info(f\"Loading {self.__class__.__name__}...\")\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: \"models.BaseModel\" = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    self._max_size = len(self._endpoints)\n    for endpoint in self._endpoints.values():\n        route = route_model(endpoint=f\"/{endpoint.url.strip('/').split('/')[-2]}/{str(endpoint)}\")\n        data = self.get(route, None)\n        self.setdefault(route, data if data else model.from_payload(await self._client.http.request(route)))\n    self._client.logger.info(f\"Loaded {self.__class__.__name__}.\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.BerryCache.load_all_batch","title":"<code>load_all_batch(batch_size=20)</code>  <code>async</code>","text":"<p>Load all documents/data from api into the cache in parallel. (Endpoints must be cached first)</p> <p>Parameters:</p> Name Type Description Default <code>batch_size</code> <code>int</code> <p>The number of documents to load at once. Default is 20 to avoid overwhelming the API.</p> <code>20</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load_all_batch(self, batch_size: int = 20) -&gt; None:\n    \"\"\"\n    Load all documents/data from api into the cache in parallel. (Endpoints must be cached first)\n\n    Parameters\n    ----------\n    batch_size: int\n        The number of documents to load at once. Default is 20 to avoid overwhelming the API.\n    \"\"\"\n    if not self._endpoints_cached:\n        raise RuntimeError(\"The endpoints have not been cached yet.\")\n    self._client.logger.info(f\"Loading {self.__class__.__name__}...\")\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: t.Type[\"_VT\"] = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    self._max_size = len(self._endpoints)\n    endpoints = list(self._endpoints.values())\n    total_endpoints = len(endpoints)\n    for i in range(0, total_endpoints, batch_size):\n        batch = endpoints[i : i + batch_size]\n        tasks = []\n        for endpoint in batch:\n            route = route_model(endpoint=f\"/{endpoint.url.strip('/').split('/')[-2]}/{str(endpoint)}\")\n            data = self.get(route, None)\n            if data:\n                self.setdefault(route, data)\n                self._client.logger.info(f\"Cached {route} - existing data used.\")\n            else:\n                tasks.append(self._fetch_and_cache(route, model))\n        if tasks:\n            await asyncio.gather(*tasks)\n        self._client.logger.debug(\n            f\"Loaded batch {i//batch_size + 1}/{(total_endpoints + batch_size - 1)//batch_size} for {self.__class__.__name__}\"\n        )\n    self._client.logger.info(f\"Loaded {self.__class__.__name__} - {len(self._cache)}/{total_endpoints} items.\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.BerryCache.load_documents","title":"<code>load_documents(data)</code>","text":"<p>Load documents into the cache.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>List[Dict[str, str]]</code> <p>The data to load.</p> required Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def load_documents(self, data: t.List[t.Dict[str, str]]) -&gt; None:\n    \"\"\"Load documents into the cache.\n\n    Parameters\n    ----------\n    data: typing.List[typing.Dict[str, str]]\n        The data to load.\n    \"\"\"\n    for document in data:\n        self._endpoints[document[\"name\"]] = Endpoint(url=document[\"url\"], id=int(document[\"url\"].split(\"/\")[-2]))\n    self._endpoints_cached = True\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.BerryCache.save","title":"<code>save(path='.')</code>  <code>async</code>","text":"<p>Save the cache to a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to save the cache to.</p> <code>'.'</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def save(self, path: str = \".\") -&gt; None:\n    \"\"\"Save the cache to a file.\n\n    Parameters\n    ----------\n    path: str\n        The path to save the cache to.\n    \"\"\"\n    pathlib.Path(path).mkdir(parents=True, exist_ok=True)\n    dummy: t.Dict[str, t.Dict[str, t.Any]] = {k.endpoint: v.raw for k, v in self.items()}\n    async with aiofiles.open(pathlib.Path(f\"{path}/{self.__class__.__name__}.json\"), \"w\") as f:\n        await f.write(\"{\\n\")\n        for n, (k, v) in enumerate(dummy.items()):\n            await f.write(\"\\n\".join([4 * \" \" + i for i in f'\"{k}\": {json.dumps(v, indent=4)}'.split(\"\\n\")]))\n            if n != len(dummy) - 1:\n                await f.write(\",\\n\")\n        await f.write(\"\\n}\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.BerryCache.set_size","title":"<code>set_size(size)</code>","text":"<p>Set the size of the cache.</p> <p>Parameters:</p> Name Type Description Default <code>size</code> <code>int</code> <p>The size of the cache.</p> required Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def set_size(self, size: int) -&gt; None:\n    \"\"\"Set the size of the cache.\n\n    Parameters\n    ----------\n    size: int\n        The size of the cache.\n    \"\"\"\n    self._max_size = size\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.BerryCache.wait_until_ready","title":"<code>wait_until_ready()</code>  <code>async</code>","text":"<p>Wait until the all the endpoints are cached.</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def wait_until_ready(self) -&gt; None:\n    \"\"\"Wait until the all the endpoints are cached.\"\"\"\n    await self._client.http.connect()\n    while not self._endpoints_cached and self._client.cache_endpoints:\n        await asyncio.sleep(0.5)\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.BerryFirmnessCache","title":"<code>BerryFirmnessCache(max_size=100)</code>","text":"<p>               Bases: <code>BaseCache['Route', 'models.BerryFirmness']</code></p> <p>A cache for berry firmnesses.</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def __init__(self, max_size: int = 100) -&gt; None:\n    self._max_size = max_size\n    self._cache: t.Dict[_KT, _VT] = {}\n    self._endpoints: t.Dict[str, Endpoint] = {}\n    self._endpoints_cached: bool = False\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.BerryFirmnessCache.cache","title":"<code>cache: t.Dict[_KT, _VT]</code>  <code>property</code>","text":"<p>The cache itself.</p> <p>Returns:</p> Type Description <code>Dict[_KT, _VT]</code> <p>The cache itself.</p>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.BerryFirmnessCache.endpoints","title":"<code>endpoints: t.Dict[str, Endpoint]</code>  <code>property</code>","text":"<p>The endpoints that are cached.</p> <p>Returns:</p> Type Description <code>Dict[str, Endpoint]</code> <p>The endpoints that are cached.</p>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.BerryFirmnessCache.load","title":"<code>load(path='.')</code>  <code>async</code>","text":"<p>Load the cache from a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to load the cache from.</p> <code>'.'</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load(self, path: str = \".\") -&gt; None:\n    \"\"\"Load the cache from a file.\n\n    Parameters\n    ----------\n    path: str\n        The path to load the cache from.\n    \"\"\"\n    async with aiofiles.open(pathlib.Path(f\"{path}/{self.__class__.__name__}.json\"), \"r\") as f:\n        data = json.loads(await f.read())\n    self._max_size = len(data)\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: t.Type[\"_VT\"] = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    for endpoint, info in data.items():\n        route = route_model(endpoint=endpoint)\n        self.setdefault(route, model.from_payload(info))\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.BerryFirmnessCache.load_all","title":"<code>load_all()</code>  <code>async</code>","text":"<p>Load all documents/data from api into the cache. (Endpoints must be cached first)</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load_all(self) -&gt; None:\n    \"\"\"\n    Load all documents/data from api into the cache. (Endpoints must be cached first)\n    \"\"\"\n    if not self._endpoints_cached:\n        raise RuntimeError(\"The endpoints have not been cached yet.\")\n    self._client.logger.info(f\"Loading {self.__class__.__name__}...\")\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: \"models.BaseModel\" = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    self._max_size = len(self._endpoints)\n    for endpoint in self._endpoints.values():\n        route = route_model(endpoint=f\"/{endpoint.url.strip('/').split('/')[-2]}/{str(endpoint)}\")\n        data = self.get(route, None)\n        self.setdefault(route, data if data else model.from_payload(await self._client.http.request(route)))\n    self._client.logger.info(f\"Loaded {self.__class__.__name__}.\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.BerryFirmnessCache.load_all_batch","title":"<code>load_all_batch(batch_size=20)</code>  <code>async</code>","text":"<p>Load all documents/data from api into the cache in parallel. (Endpoints must be cached first)</p> <p>Parameters:</p> Name Type Description Default <code>batch_size</code> <code>int</code> <p>The number of documents to load at once. Default is 20 to avoid overwhelming the API.</p> <code>20</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load_all_batch(self, batch_size: int = 20) -&gt; None:\n    \"\"\"\n    Load all documents/data from api into the cache in parallel. (Endpoints must be cached first)\n\n    Parameters\n    ----------\n    batch_size: int\n        The number of documents to load at once. Default is 20 to avoid overwhelming the API.\n    \"\"\"\n    if not self._endpoints_cached:\n        raise RuntimeError(\"The endpoints have not been cached yet.\")\n    self._client.logger.info(f\"Loading {self.__class__.__name__}...\")\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: t.Type[\"_VT\"] = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    self._max_size = len(self._endpoints)\n    endpoints = list(self._endpoints.values())\n    total_endpoints = len(endpoints)\n    for i in range(0, total_endpoints, batch_size):\n        batch = endpoints[i : i + batch_size]\n        tasks = []\n        for endpoint in batch:\n            route = route_model(endpoint=f\"/{endpoint.url.strip('/').split('/')[-2]}/{str(endpoint)}\")\n            data = self.get(route, None)\n            if data:\n                self.setdefault(route, data)\n                self._client.logger.info(f\"Cached {route} - existing data used.\")\n            else:\n                tasks.append(self._fetch_and_cache(route, model))\n        if tasks:\n            await asyncio.gather(*tasks)\n        self._client.logger.debug(\n            f\"Loaded batch {i//batch_size + 1}/{(total_endpoints + batch_size - 1)//batch_size} for {self.__class__.__name__}\"\n        )\n    self._client.logger.info(f\"Loaded {self.__class__.__name__} - {len(self._cache)}/{total_endpoints} items.\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.BerryFirmnessCache.load_documents","title":"<code>load_documents(data)</code>","text":"<p>Load documents into the cache.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>List[Dict[str, str]]</code> <p>The data to load.</p> required Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def load_documents(self, data: t.List[t.Dict[str, str]]) -&gt; None:\n    \"\"\"Load documents into the cache.\n\n    Parameters\n    ----------\n    data: typing.List[typing.Dict[str, str]]\n        The data to load.\n    \"\"\"\n    for document in data:\n        self._endpoints[document[\"name\"]] = Endpoint(url=document[\"url\"], id=int(document[\"url\"].split(\"/\")[-2]))\n    self._endpoints_cached = True\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.BerryFirmnessCache.save","title":"<code>save(path='.')</code>  <code>async</code>","text":"<p>Save the cache to a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to save the cache to.</p> <code>'.'</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def save(self, path: str = \".\") -&gt; None:\n    \"\"\"Save the cache to a file.\n\n    Parameters\n    ----------\n    path: str\n        The path to save the cache to.\n    \"\"\"\n    pathlib.Path(path).mkdir(parents=True, exist_ok=True)\n    dummy: t.Dict[str, t.Dict[str, t.Any]] = {k.endpoint: v.raw for k, v in self.items()}\n    async with aiofiles.open(pathlib.Path(f\"{path}/{self.__class__.__name__}.json\"), \"w\") as f:\n        await f.write(\"{\\n\")\n        for n, (k, v) in enumerate(dummy.items()):\n            await f.write(\"\\n\".join([4 * \" \" + i for i in f'\"{k}\": {json.dumps(v, indent=4)}'.split(\"\\n\")]))\n            if n != len(dummy) - 1:\n                await f.write(\",\\n\")\n        await f.write(\"\\n}\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.BerryFirmnessCache.set_size","title":"<code>set_size(size)</code>","text":"<p>Set the size of the cache.</p> <p>Parameters:</p> Name Type Description Default <code>size</code> <code>int</code> <p>The size of the cache.</p> required Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def set_size(self, size: int) -&gt; None:\n    \"\"\"Set the size of the cache.\n\n    Parameters\n    ----------\n    size: int\n        The size of the cache.\n    \"\"\"\n    self._max_size = size\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.BerryFirmnessCache.wait_until_ready","title":"<code>wait_until_ready()</code>  <code>async</code>","text":"<p>Wait until the all the endpoints are cached.</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def wait_until_ready(self) -&gt; None:\n    \"\"\"Wait until the all the endpoints are cached.\"\"\"\n    await self._client.http.connect()\n    while not self._endpoints_cached and self._client.cache_endpoints:\n        await asyncio.sleep(0.5)\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.BerryFlavorCache","title":"<code>BerryFlavorCache(max_size=100)</code>","text":"<p>               Bases: <code>BaseCache['Route', 'models.BerryFlavor']</code></p> <p>A cache for berry flavors.</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def __init__(self, max_size: int = 100) -&gt; None:\n    self._max_size = max_size\n    self._cache: t.Dict[_KT, _VT] = {}\n    self._endpoints: t.Dict[str, Endpoint] = {}\n    self._endpoints_cached: bool = False\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.BerryFlavorCache.cache","title":"<code>cache: t.Dict[_KT, _VT]</code>  <code>property</code>","text":"<p>The cache itself.</p> <p>Returns:</p> Type Description <code>Dict[_KT, _VT]</code> <p>The cache itself.</p>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.BerryFlavorCache.endpoints","title":"<code>endpoints: t.Dict[str, Endpoint]</code>  <code>property</code>","text":"<p>The endpoints that are cached.</p> <p>Returns:</p> Type Description <code>Dict[str, Endpoint]</code> <p>The endpoints that are cached.</p>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.BerryFlavorCache.load","title":"<code>load(path='.')</code>  <code>async</code>","text":"<p>Load the cache from a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to load the cache from.</p> <code>'.'</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load(self, path: str = \".\") -&gt; None:\n    \"\"\"Load the cache from a file.\n\n    Parameters\n    ----------\n    path: str\n        The path to load the cache from.\n    \"\"\"\n    async with aiofiles.open(pathlib.Path(f\"{path}/{self.__class__.__name__}.json\"), \"r\") as f:\n        data = json.loads(await f.read())\n    self._max_size = len(data)\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: t.Type[\"_VT\"] = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    for endpoint, info in data.items():\n        route = route_model(endpoint=endpoint)\n        self.setdefault(route, model.from_payload(info))\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.BerryFlavorCache.load_all","title":"<code>load_all()</code>  <code>async</code>","text":"<p>Load all documents/data from api into the cache. (Endpoints must be cached first)</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load_all(self) -&gt; None:\n    \"\"\"\n    Load all documents/data from api into the cache. (Endpoints must be cached first)\n    \"\"\"\n    if not self._endpoints_cached:\n        raise RuntimeError(\"The endpoints have not been cached yet.\")\n    self._client.logger.info(f\"Loading {self.__class__.__name__}...\")\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: \"models.BaseModel\" = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    self._max_size = len(self._endpoints)\n    for endpoint in self._endpoints.values():\n        route = route_model(endpoint=f\"/{endpoint.url.strip('/').split('/')[-2]}/{str(endpoint)}\")\n        data = self.get(route, None)\n        self.setdefault(route, data if data else model.from_payload(await self._client.http.request(route)))\n    self._client.logger.info(f\"Loaded {self.__class__.__name__}.\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.BerryFlavorCache.load_all_batch","title":"<code>load_all_batch(batch_size=20)</code>  <code>async</code>","text":"<p>Load all documents/data from api into the cache in parallel. (Endpoints must be cached first)</p> <p>Parameters:</p> Name Type Description Default <code>batch_size</code> <code>int</code> <p>The number of documents to load at once. Default is 20 to avoid overwhelming the API.</p> <code>20</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load_all_batch(self, batch_size: int = 20) -&gt; None:\n    \"\"\"\n    Load all documents/data from api into the cache in parallel. (Endpoints must be cached first)\n\n    Parameters\n    ----------\n    batch_size: int\n        The number of documents to load at once. Default is 20 to avoid overwhelming the API.\n    \"\"\"\n    if not self._endpoints_cached:\n        raise RuntimeError(\"The endpoints have not been cached yet.\")\n    self._client.logger.info(f\"Loading {self.__class__.__name__}...\")\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: t.Type[\"_VT\"] = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    self._max_size = len(self._endpoints)\n    endpoints = list(self._endpoints.values())\n    total_endpoints = len(endpoints)\n    for i in range(0, total_endpoints, batch_size):\n        batch = endpoints[i : i + batch_size]\n        tasks = []\n        for endpoint in batch:\n            route = route_model(endpoint=f\"/{endpoint.url.strip('/').split('/')[-2]}/{str(endpoint)}\")\n            data = self.get(route, None)\n            if data:\n                self.setdefault(route, data)\n                self._client.logger.info(f\"Cached {route} - existing data used.\")\n            else:\n                tasks.append(self._fetch_and_cache(route, model))\n        if tasks:\n            await asyncio.gather(*tasks)\n        self._client.logger.debug(\n            f\"Loaded batch {i//batch_size + 1}/{(total_endpoints + batch_size - 1)//batch_size} for {self.__class__.__name__}\"\n        )\n    self._client.logger.info(f\"Loaded {self.__class__.__name__} - {len(self._cache)}/{total_endpoints} items.\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.BerryFlavorCache.load_documents","title":"<code>load_documents(data)</code>","text":"<p>Load documents into the cache.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>List[Dict[str, str]]</code> <p>The data to load.</p> required Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def load_documents(self, data: t.List[t.Dict[str, str]]) -&gt; None:\n    \"\"\"Load documents into the cache.\n\n    Parameters\n    ----------\n    data: typing.List[typing.Dict[str, str]]\n        The data to load.\n    \"\"\"\n    for document in data:\n        self._endpoints[document[\"name\"]] = Endpoint(url=document[\"url\"], id=int(document[\"url\"].split(\"/\")[-2]))\n    self._endpoints_cached = True\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.BerryFlavorCache.save","title":"<code>save(path='.')</code>  <code>async</code>","text":"<p>Save the cache to a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to save the cache to.</p> <code>'.'</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def save(self, path: str = \".\") -&gt; None:\n    \"\"\"Save the cache to a file.\n\n    Parameters\n    ----------\n    path: str\n        The path to save the cache to.\n    \"\"\"\n    pathlib.Path(path).mkdir(parents=True, exist_ok=True)\n    dummy: t.Dict[str, t.Dict[str, t.Any]] = {k.endpoint: v.raw for k, v in self.items()}\n    async with aiofiles.open(pathlib.Path(f\"{path}/{self.__class__.__name__}.json\"), \"w\") as f:\n        await f.write(\"{\\n\")\n        for n, (k, v) in enumerate(dummy.items()):\n            await f.write(\"\\n\".join([4 * \" \" + i for i in f'\"{k}\": {json.dumps(v, indent=4)}'.split(\"\\n\")]))\n            if n != len(dummy) - 1:\n                await f.write(\",\\n\")\n        await f.write(\"\\n}\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.BerryFlavorCache.set_size","title":"<code>set_size(size)</code>","text":"<p>Set the size of the cache.</p> <p>Parameters:</p> Name Type Description Default <code>size</code> <code>int</code> <p>The size of the cache.</p> required Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def set_size(self, size: int) -&gt; None:\n    \"\"\"Set the size of the cache.\n\n    Parameters\n    ----------\n    size: int\n        The size of the cache.\n    \"\"\"\n    self._max_size = size\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.BerryFlavorCache.wait_until_ready","title":"<code>wait_until_ready()</code>  <code>async</code>","text":"<p>Wait until the all the endpoints are cached.</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def wait_until_ready(self) -&gt; None:\n    \"\"\"Wait until the all the endpoints are cached.\"\"\"\n    await self._client.http.connect()\n    while not self._endpoints_cached and self._client.cache_endpoints:\n        await asyncio.sleep(0.5)\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.CharacteristicCache","title":"<code>CharacteristicCache(max_size=100)</code>","text":"<p>               Bases: <code>SecondaryTypeCache['Route', 'models.Characteristic']</code></p> <p>A cache for characteristics.</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def __init__(self, max_size: int = 100) -&gt; None:\n    self._max_size = max_size\n    self._cache: t.Dict[_KT, _VT] = {}\n    self._endpoints: t.Dict[str, Endpoint] = {}\n    self._endpoints_cached: bool = False\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.CharacteristicCache.cache","title":"<code>cache: t.Dict[_KT, _VT]</code>  <code>property</code>","text":"<p>The cache itself.</p> <p>Returns:</p> Type Description <code>Dict[_KT, _VT]</code> <p>The cache itself.</p>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.CharacteristicCache.endpoints","title":"<code>endpoints: t.Dict[str, Endpoint]</code>  <code>property</code>","text":"<p>The endpoints that are cached.</p> <p>Returns:</p> Type Description <code>Dict[str, Endpoint]</code> <p>The endpoints that are cached.</p>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.CharacteristicCache.load","title":"<code>load(path='.')</code>  <code>async</code>","text":"<p>Load the cache from a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to load the cache from.</p> <code>'.'</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load(self, path: str = \".\") -&gt; None:\n    \"\"\"Load the cache from a file.\n\n    Parameters\n    ----------\n    path: str\n        The path to load the cache from.\n    \"\"\"\n    async with aiofiles.open(pathlib.Path(f\"{path}/{self.__class__.__name__}.json\"), \"r\") as f:\n        data = json.loads(await f.read())\n    self._max_size = len(data)\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: t.Type[\"_VT\"] = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    for endpoint, info in data.items():\n        route = route_model(endpoint=endpoint)\n        self.setdefault(route, model.from_payload(info))\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.CharacteristicCache.load_all","title":"<code>load_all()</code>  <code>async</code>","text":"<p>Load all documents/data from api into the cache. (Endpoints must be cached first)</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load_all(self) -&gt; None:\n    \"\"\"\n    Load all documents/data from api into the cache. (Endpoints must be cached first)\n    \"\"\"\n    if not self._endpoints_cached:\n        raise RuntimeError(\"The endpoints have not been cached yet.\")\n    self._client.logger.info(f\"Loading {self.__class__.__name__}...\")\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: \"models.BaseModel\" = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    self._max_size = len(self._endpoints)\n    for endpoint in self._endpoints.values():\n        route = route_model(endpoint=f\"/{endpoint.url.strip('/').split('/')[-2]}/{str(endpoint)}\")\n        data = self.get(route, None)\n        self.setdefault(route, data if data else model.from_payload(await self._client.http.request(route)))\n    self._client.logger.info(f\"Loaded {self.__class__.__name__}.\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.CharacteristicCache.load_all_batch","title":"<code>load_all_batch(batch_size=20)</code>  <code>async</code>","text":"<p>Load all documents/data from api into the cache in parallel. (Endpoints must be cached first)</p> <p>Parameters:</p> Name Type Description Default <code>batch_size</code> <code>int</code> <p>The number of documents to load at once. Default is 20 to avoid overwhelming the API.</p> <code>20</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load_all_batch(self, batch_size: int = 20) -&gt; None:\n    \"\"\"\n    Load all documents/data from api into the cache in parallel. (Endpoints must be cached first)\n\n    Parameters\n    ----------\n    batch_size: int\n        The number of documents to load at once. Default is 20 to avoid overwhelming the API.\n    \"\"\"\n    if not self._endpoints_cached:\n        raise RuntimeError(\"The endpoints have not been cached yet.\")\n    self._client.logger.info(f\"Loading {self.__class__.__name__}...\")\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: t.Type[\"_VT\"] = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    self._max_size = len(self._endpoints)\n    endpoints = list(self._endpoints.values())\n    total_endpoints = len(endpoints)\n    for i in range(0, total_endpoints, batch_size):\n        batch = endpoints[i : i + batch_size]\n        tasks = []\n        for endpoint in batch:\n            route = route_model(endpoint=f\"/{endpoint.url.strip('/').split('/')[-2]}/{str(endpoint)}\")\n            data = self.get(route, None)\n            if data:\n                self.setdefault(route, data)\n                self._client.logger.info(f\"Cached {route} - existing data used.\")\n            else:\n                tasks.append(self._fetch_and_cache(route, model))\n        if tasks:\n            await asyncio.gather(*tasks)\n        self._client.logger.debug(\n            f\"Loaded batch {i//batch_size + 1}/{(total_endpoints + batch_size - 1)//batch_size} for {self.__class__.__name__}\"\n        )\n    self._client.logger.info(f\"Loaded {self.__class__.__name__} - {len(self._cache)}/{total_endpoints} items.\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.CharacteristicCache.load_documents","title":"<code>load_documents(data)</code>","text":"<p>Load documents into the cache. Endpoints are different for secondary types.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>List[Dict[str, str]]</code> <p>The data to load.</p> required Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def load_documents(self, data: t.List[t.Dict[str, str]]) -&gt; None:\n    \"\"\"Load documents into the cache. Endpoints are different for secondary types.\n\n    Parameters\n    ----------\n    data: typing.List[typing.Dict[str, str]]\n        The data to load.\n    \"\"\"\n    for document in data:\n        self._endpoints[document[\"url\"].split(\"/\")[-2]] = Endpoint(\n            url=document[\"url\"], id=int(document[\"url\"].split(\"/\")[-2])\n        )\n    self._endpoints_cached = True\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.CharacteristicCache.save","title":"<code>save(path='.')</code>  <code>async</code>","text":"<p>Save the cache to a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to save the cache to.</p> <code>'.'</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def save(self, path: str = \".\") -&gt; None:\n    \"\"\"Save the cache to a file.\n\n    Parameters\n    ----------\n    path: str\n        The path to save the cache to.\n    \"\"\"\n    pathlib.Path(path).mkdir(parents=True, exist_ok=True)\n    dummy: t.Dict[str, t.Dict[str, t.Any]] = {k.endpoint: v.raw for k, v in self.items()}\n    async with aiofiles.open(pathlib.Path(f\"{path}/{self.__class__.__name__}.json\"), \"w\") as f:\n        await f.write(\"{\\n\")\n        for n, (k, v) in enumerate(dummy.items()):\n            await f.write(\"\\n\".join([4 * \" \" + i for i in f'\"{k}\": {json.dumps(v, indent=4)}'.split(\"\\n\")]))\n            if n != len(dummy) - 1:\n                await f.write(\",\\n\")\n        await f.write(\"\\n}\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.CharacteristicCache.set_size","title":"<code>set_size(size)</code>","text":"<p>Set the size of the cache.</p> <p>Parameters:</p> Name Type Description Default <code>size</code> <code>int</code> <p>The size of the cache.</p> required Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def set_size(self, size: int) -&gt; None:\n    \"\"\"Set the size of the cache.\n\n    Parameters\n    ----------\n    size: int\n        The size of the cache.\n    \"\"\"\n    self._max_size = size\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.CharacteristicCache.wait_until_ready","title":"<code>wait_until_ready()</code>  <code>async</code>","text":"<p>Wait until the all the endpoints are cached.</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def wait_until_ready(self) -&gt; None:\n    \"\"\"Wait until the all the endpoints are cached.\"\"\"\n    await self._client.http.connect()\n    while not self._endpoints_cached and self._client.cache_endpoints:\n        await asyncio.sleep(0.5)\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.ContestEffectCache","title":"<code>ContestEffectCache(max_size=100)</code>","text":"<p>               Bases: <code>SecondaryTypeCache['Route', 'models.ContestEffect']</code></p> <p>A cache for contest effects.</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def __init__(self, max_size: int = 100) -&gt; None:\n    self._max_size = max_size\n    self._cache: t.Dict[_KT, _VT] = {}\n    self._endpoints: t.Dict[str, Endpoint] = {}\n    self._endpoints_cached: bool = False\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.ContestEffectCache.cache","title":"<code>cache: t.Dict[_KT, _VT]</code>  <code>property</code>","text":"<p>The cache itself.</p> <p>Returns:</p> Type Description <code>Dict[_KT, _VT]</code> <p>The cache itself.</p>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.ContestEffectCache.endpoints","title":"<code>endpoints: t.Dict[str, Endpoint]</code>  <code>property</code>","text":"<p>The endpoints that are cached.</p> <p>Returns:</p> Type Description <code>Dict[str, Endpoint]</code> <p>The endpoints that are cached.</p>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.ContestEffectCache.load","title":"<code>load(path='.')</code>  <code>async</code>","text":"<p>Load the cache from a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to load the cache from.</p> <code>'.'</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load(self, path: str = \".\") -&gt; None:\n    \"\"\"Load the cache from a file.\n\n    Parameters\n    ----------\n    path: str\n        The path to load the cache from.\n    \"\"\"\n    async with aiofiles.open(pathlib.Path(f\"{path}/{self.__class__.__name__}.json\"), \"r\") as f:\n        data = json.loads(await f.read())\n    self._max_size = len(data)\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: t.Type[\"_VT\"] = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    for endpoint, info in data.items():\n        route = route_model(endpoint=endpoint)\n        self.setdefault(route, model.from_payload(info))\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.ContestEffectCache.load_all","title":"<code>load_all()</code>  <code>async</code>","text":"<p>Load all documents/data from api into the cache. (Endpoints must be cached first)</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load_all(self) -&gt; None:\n    \"\"\"\n    Load all documents/data from api into the cache. (Endpoints must be cached first)\n    \"\"\"\n    if not self._endpoints_cached:\n        raise RuntimeError(\"The endpoints have not been cached yet.\")\n    self._client.logger.info(f\"Loading {self.__class__.__name__}...\")\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: \"models.BaseModel\" = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    self._max_size = len(self._endpoints)\n    for endpoint in self._endpoints.values():\n        route = route_model(endpoint=f\"/{endpoint.url.strip('/').split('/')[-2]}/{str(endpoint)}\")\n        data = self.get(route, None)\n        self.setdefault(route, data if data else model.from_payload(await self._client.http.request(route)))\n    self._client.logger.info(f\"Loaded {self.__class__.__name__}.\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.ContestEffectCache.load_all_batch","title":"<code>load_all_batch(batch_size=20)</code>  <code>async</code>","text":"<p>Load all documents/data from api into the cache in parallel. (Endpoints must be cached first)</p> <p>Parameters:</p> Name Type Description Default <code>batch_size</code> <code>int</code> <p>The number of documents to load at once. Default is 20 to avoid overwhelming the API.</p> <code>20</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load_all_batch(self, batch_size: int = 20) -&gt; None:\n    \"\"\"\n    Load all documents/data from api into the cache in parallel. (Endpoints must be cached first)\n\n    Parameters\n    ----------\n    batch_size: int\n        The number of documents to load at once. Default is 20 to avoid overwhelming the API.\n    \"\"\"\n    if not self._endpoints_cached:\n        raise RuntimeError(\"The endpoints have not been cached yet.\")\n    self._client.logger.info(f\"Loading {self.__class__.__name__}...\")\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: t.Type[\"_VT\"] = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    self._max_size = len(self._endpoints)\n    endpoints = list(self._endpoints.values())\n    total_endpoints = len(endpoints)\n    for i in range(0, total_endpoints, batch_size):\n        batch = endpoints[i : i + batch_size]\n        tasks = []\n        for endpoint in batch:\n            route = route_model(endpoint=f\"/{endpoint.url.strip('/').split('/')[-2]}/{str(endpoint)}\")\n            data = self.get(route, None)\n            if data:\n                self.setdefault(route, data)\n                self._client.logger.info(f\"Cached {route} - existing data used.\")\n            else:\n                tasks.append(self._fetch_and_cache(route, model))\n        if tasks:\n            await asyncio.gather(*tasks)\n        self._client.logger.debug(\n            f\"Loaded batch {i//batch_size + 1}/{(total_endpoints + batch_size - 1)//batch_size} for {self.__class__.__name__}\"\n        )\n    self._client.logger.info(f\"Loaded {self.__class__.__name__} - {len(self._cache)}/{total_endpoints} items.\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.ContestEffectCache.load_documents","title":"<code>load_documents(data)</code>","text":"<p>Load documents into the cache. Endpoints are different for secondary types.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>List[Dict[str, str]]</code> <p>The data to load.</p> required Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def load_documents(self, data: t.List[t.Dict[str, str]]) -&gt; None:\n    \"\"\"Load documents into the cache. Endpoints are different for secondary types.\n\n    Parameters\n    ----------\n    data: typing.List[typing.Dict[str, str]]\n        The data to load.\n    \"\"\"\n    for document in data:\n        self._endpoints[document[\"url\"].split(\"/\")[-2]] = Endpoint(\n            url=document[\"url\"], id=int(document[\"url\"].split(\"/\")[-2])\n        )\n    self._endpoints_cached = True\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.ContestEffectCache.save","title":"<code>save(path='.')</code>  <code>async</code>","text":"<p>Save the cache to a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to save the cache to.</p> <code>'.'</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def save(self, path: str = \".\") -&gt; None:\n    \"\"\"Save the cache to a file.\n\n    Parameters\n    ----------\n    path: str\n        The path to save the cache to.\n    \"\"\"\n    pathlib.Path(path).mkdir(parents=True, exist_ok=True)\n    dummy: t.Dict[str, t.Dict[str, t.Any]] = {k.endpoint: v.raw for k, v in self.items()}\n    async with aiofiles.open(pathlib.Path(f\"{path}/{self.__class__.__name__}.json\"), \"w\") as f:\n        await f.write(\"{\\n\")\n        for n, (k, v) in enumerate(dummy.items()):\n            await f.write(\"\\n\".join([4 * \" \" + i for i in f'\"{k}\": {json.dumps(v, indent=4)}'.split(\"\\n\")]))\n            if n != len(dummy) - 1:\n                await f.write(\",\\n\")\n        await f.write(\"\\n}\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.ContestEffectCache.set_size","title":"<code>set_size(size)</code>","text":"<p>Set the size of the cache.</p> <p>Parameters:</p> Name Type Description Default <code>size</code> <code>int</code> <p>The size of the cache.</p> required Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def set_size(self, size: int) -&gt; None:\n    \"\"\"Set the size of the cache.\n\n    Parameters\n    ----------\n    size: int\n        The size of the cache.\n    \"\"\"\n    self._max_size = size\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.ContestEffectCache.wait_until_ready","title":"<code>wait_until_ready()</code>  <code>async</code>","text":"<p>Wait until the all the endpoints are cached.</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def wait_until_ready(self) -&gt; None:\n    \"\"\"Wait until the all the endpoints are cached.\"\"\"\n    await self._client.http.connect()\n    while not self._endpoints_cached and self._client.cache_endpoints:\n        await asyncio.sleep(0.5)\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.ContestTypeCache","title":"<code>ContestTypeCache(max_size=100)</code>","text":"<p>               Bases: <code>BaseCache['Route', 'models.ContestType']</code></p> <p>A cache for contest types.</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def __init__(self, max_size: int = 100) -&gt; None:\n    self._max_size = max_size\n    self._cache: t.Dict[_KT, _VT] = {}\n    self._endpoints: t.Dict[str, Endpoint] = {}\n    self._endpoints_cached: bool = False\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.ContestTypeCache.cache","title":"<code>cache: t.Dict[_KT, _VT]</code>  <code>property</code>","text":"<p>The cache itself.</p> <p>Returns:</p> Type Description <code>Dict[_KT, _VT]</code> <p>The cache itself.</p>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.ContestTypeCache.endpoints","title":"<code>endpoints: t.Dict[str, Endpoint]</code>  <code>property</code>","text":"<p>The endpoints that are cached.</p> <p>Returns:</p> Type Description <code>Dict[str, Endpoint]</code> <p>The endpoints that are cached.</p>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.ContestTypeCache.load","title":"<code>load(path='.')</code>  <code>async</code>","text":"<p>Load the cache from a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to load the cache from.</p> <code>'.'</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load(self, path: str = \".\") -&gt; None:\n    \"\"\"Load the cache from a file.\n\n    Parameters\n    ----------\n    path: str\n        The path to load the cache from.\n    \"\"\"\n    async with aiofiles.open(pathlib.Path(f\"{path}/{self.__class__.__name__}.json\"), \"r\") as f:\n        data = json.loads(await f.read())\n    self._max_size = len(data)\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: t.Type[\"_VT\"] = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    for endpoint, info in data.items():\n        route = route_model(endpoint=endpoint)\n        self.setdefault(route, model.from_payload(info))\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.ContestTypeCache.load_all","title":"<code>load_all()</code>  <code>async</code>","text":"<p>Load all documents/data from api into the cache. (Endpoints must be cached first)</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load_all(self) -&gt; None:\n    \"\"\"\n    Load all documents/data from api into the cache. (Endpoints must be cached first)\n    \"\"\"\n    if not self._endpoints_cached:\n        raise RuntimeError(\"The endpoints have not been cached yet.\")\n    self._client.logger.info(f\"Loading {self.__class__.__name__}...\")\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: \"models.BaseModel\" = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    self._max_size = len(self._endpoints)\n    for endpoint in self._endpoints.values():\n        route = route_model(endpoint=f\"/{endpoint.url.strip('/').split('/')[-2]}/{str(endpoint)}\")\n        data = self.get(route, None)\n        self.setdefault(route, data if data else model.from_payload(await self._client.http.request(route)))\n    self._client.logger.info(f\"Loaded {self.__class__.__name__}.\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.ContestTypeCache.load_all_batch","title":"<code>load_all_batch(batch_size=20)</code>  <code>async</code>","text":"<p>Load all documents/data from api into the cache in parallel. (Endpoints must be cached first)</p> <p>Parameters:</p> Name Type Description Default <code>batch_size</code> <code>int</code> <p>The number of documents to load at once. Default is 20 to avoid overwhelming the API.</p> <code>20</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load_all_batch(self, batch_size: int = 20) -&gt; None:\n    \"\"\"\n    Load all documents/data from api into the cache in parallel. (Endpoints must be cached first)\n\n    Parameters\n    ----------\n    batch_size: int\n        The number of documents to load at once. Default is 20 to avoid overwhelming the API.\n    \"\"\"\n    if not self._endpoints_cached:\n        raise RuntimeError(\"The endpoints have not been cached yet.\")\n    self._client.logger.info(f\"Loading {self.__class__.__name__}...\")\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: t.Type[\"_VT\"] = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    self._max_size = len(self._endpoints)\n    endpoints = list(self._endpoints.values())\n    total_endpoints = len(endpoints)\n    for i in range(0, total_endpoints, batch_size):\n        batch = endpoints[i : i + batch_size]\n        tasks = []\n        for endpoint in batch:\n            route = route_model(endpoint=f\"/{endpoint.url.strip('/').split('/')[-2]}/{str(endpoint)}\")\n            data = self.get(route, None)\n            if data:\n                self.setdefault(route, data)\n                self._client.logger.info(f\"Cached {route} - existing data used.\")\n            else:\n                tasks.append(self._fetch_and_cache(route, model))\n        if tasks:\n            await asyncio.gather(*tasks)\n        self._client.logger.debug(\n            f\"Loaded batch {i//batch_size + 1}/{(total_endpoints + batch_size - 1)//batch_size} for {self.__class__.__name__}\"\n        )\n    self._client.logger.info(f\"Loaded {self.__class__.__name__} - {len(self._cache)}/{total_endpoints} items.\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.ContestTypeCache.load_documents","title":"<code>load_documents(data)</code>","text":"<p>Load documents into the cache.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>List[Dict[str, str]]</code> <p>The data to load.</p> required Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def load_documents(self, data: t.List[t.Dict[str, str]]) -&gt; None:\n    \"\"\"Load documents into the cache.\n\n    Parameters\n    ----------\n    data: typing.List[typing.Dict[str, str]]\n        The data to load.\n    \"\"\"\n    for document in data:\n        self._endpoints[document[\"name\"]] = Endpoint(url=document[\"url\"], id=int(document[\"url\"].split(\"/\")[-2]))\n    self._endpoints_cached = True\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.ContestTypeCache.save","title":"<code>save(path='.')</code>  <code>async</code>","text":"<p>Save the cache to a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to save the cache to.</p> <code>'.'</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def save(self, path: str = \".\") -&gt; None:\n    \"\"\"Save the cache to a file.\n\n    Parameters\n    ----------\n    path: str\n        The path to save the cache to.\n    \"\"\"\n    pathlib.Path(path).mkdir(parents=True, exist_ok=True)\n    dummy: t.Dict[str, t.Dict[str, t.Any]] = {k.endpoint: v.raw for k, v in self.items()}\n    async with aiofiles.open(pathlib.Path(f\"{path}/{self.__class__.__name__}.json\"), \"w\") as f:\n        await f.write(\"{\\n\")\n        for n, (k, v) in enumerate(dummy.items()):\n            await f.write(\"\\n\".join([4 * \" \" + i for i in f'\"{k}\": {json.dumps(v, indent=4)}'.split(\"\\n\")]))\n            if n != len(dummy) - 1:\n                await f.write(\",\\n\")\n        await f.write(\"\\n}\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.ContestTypeCache.set_size","title":"<code>set_size(size)</code>","text":"<p>Set the size of the cache.</p> <p>Parameters:</p> Name Type Description Default <code>size</code> <code>int</code> <p>The size of the cache.</p> required Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def set_size(self, size: int) -&gt; None:\n    \"\"\"Set the size of the cache.\n\n    Parameters\n    ----------\n    size: int\n        The size of the cache.\n    \"\"\"\n    self._max_size = size\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.ContestTypeCache.wait_until_ready","title":"<code>wait_until_ready()</code>  <code>async</code>","text":"<p>Wait until the all the endpoints are cached.</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def wait_until_ready(self) -&gt; None:\n    \"\"\"Wait until the all the endpoints are cached.\"\"\"\n    await self._client.http.connect()\n    while not self._endpoints_cached and self._client.cache_endpoints:\n        await asyncio.sleep(0.5)\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.EggGroupCache","title":"<code>EggGroupCache(max_size=100)</code>","text":"<p>               Bases: <code>BaseCache['Route', 'models.EggGroup']</code></p> <p>A cache for egg groups.</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def __init__(self, max_size: int = 100) -&gt; None:\n    self._max_size = max_size\n    self._cache: t.Dict[_KT, _VT] = {}\n    self._endpoints: t.Dict[str, Endpoint] = {}\n    self._endpoints_cached: bool = False\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.EggGroupCache.cache","title":"<code>cache: t.Dict[_KT, _VT]</code>  <code>property</code>","text":"<p>The cache itself.</p> <p>Returns:</p> Type Description <code>Dict[_KT, _VT]</code> <p>The cache itself.</p>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.EggGroupCache.endpoints","title":"<code>endpoints: t.Dict[str, Endpoint]</code>  <code>property</code>","text":"<p>The endpoints that are cached.</p> <p>Returns:</p> Type Description <code>Dict[str, Endpoint]</code> <p>The endpoints that are cached.</p>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.EggGroupCache.load","title":"<code>load(path='.')</code>  <code>async</code>","text":"<p>Load the cache from a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to load the cache from.</p> <code>'.'</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load(self, path: str = \".\") -&gt; None:\n    \"\"\"Load the cache from a file.\n\n    Parameters\n    ----------\n    path: str\n        The path to load the cache from.\n    \"\"\"\n    async with aiofiles.open(pathlib.Path(f\"{path}/{self.__class__.__name__}.json\"), \"r\") as f:\n        data = json.loads(await f.read())\n    self._max_size = len(data)\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: t.Type[\"_VT\"] = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    for endpoint, info in data.items():\n        route = route_model(endpoint=endpoint)\n        self.setdefault(route, model.from_payload(info))\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.EggGroupCache.load_all","title":"<code>load_all()</code>  <code>async</code>","text":"<p>Load all documents/data from api into the cache. (Endpoints must be cached first)</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load_all(self) -&gt; None:\n    \"\"\"\n    Load all documents/data from api into the cache. (Endpoints must be cached first)\n    \"\"\"\n    if not self._endpoints_cached:\n        raise RuntimeError(\"The endpoints have not been cached yet.\")\n    self._client.logger.info(f\"Loading {self.__class__.__name__}...\")\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: \"models.BaseModel\" = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    self._max_size = len(self._endpoints)\n    for endpoint in self._endpoints.values():\n        route = route_model(endpoint=f\"/{endpoint.url.strip('/').split('/')[-2]}/{str(endpoint)}\")\n        data = self.get(route, None)\n        self.setdefault(route, data if data else model.from_payload(await self._client.http.request(route)))\n    self._client.logger.info(f\"Loaded {self.__class__.__name__}.\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.EggGroupCache.load_all_batch","title":"<code>load_all_batch(batch_size=20)</code>  <code>async</code>","text":"<p>Load all documents/data from api into the cache in parallel. (Endpoints must be cached first)</p> <p>Parameters:</p> Name Type Description Default <code>batch_size</code> <code>int</code> <p>The number of documents to load at once. Default is 20 to avoid overwhelming the API.</p> <code>20</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load_all_batch(self, batch_size: int = 20) -&gt; None:\n    \"\"\"\n    Load all documents/data from api into the cache in parallel. (Endpoints must be cached first)\n\n    Parameters\n    ----------\n    batch_size: int\n        The number of documents to load at once. Default is 20 to avoid overwhelming the API.\n    \"\"\"\n    if not self._endpoints_cached:\n        raise RuntimeError(\"The endpoints have not been cached yet.\")\n    self._client.logger.info(f\"Loading {self.__class__.__name__}...\")\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: t.Type[\"_VT\"] = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    self._max_size = len(self._endpoints)\n    endpoints = list(self._endpoints.values())\n    total_endpoints = len(endpoints)\n    for i in range(0, total_endpoints, batch_size):\n        batch = endpoints[i : i + batch_size]\n        tasks = []\n        for endpoint in batch:\n            route = route_model(endpoint=f\"/{endpoint.url.strip('/').split('/')[-2]}/{str(endpoint)}\")\n            data = self.get(route, None)\n            if data:\n                self.setdefault(route, data)\n                self._client.logger.info(f\"Cached {route} - existing data used.\")\n            else:\n                tasks.append(self._fetch_and_cache(route, model))\n        if tasks:\n            await asyncio.gather(*tasks)\n        self._client.logger.debug(\n            f\"Loaded batch {i//batch_size + 1}/{(total_endpoints + batch_size - 1)//batch_size} for {self.__class__.__name__}\"\n        )\n    self._client.logger.info(f\"Loaded {self.__class__.__name__} - {len(self._cache)}/{total_endpoints} items.\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.EggGroupCache.load_documents","title":"<code>load_documents(data)</code>","text":"<p>Load documents into the cache.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>List[Dict[str, str]]</code> <p>The data to load.</p> required Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def load_documents(self, data: t.List[t.Dict[str, str]]) -&gt; None:\n    \"\"\"Load documents into the cache.\n\n    Parameters\n    ----------\n    data: typing.List[typing.Dict[str, str]]\n        The data to load.\n    \"\"\"\n    for document in data:\n        self._endpoints[document[\"name\"]] = Endpoint(url=document[\"url\"], id=int(document[\"url\"].split(\"/\")[-2]))\n    self._endpoints_cached = True\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.EggGroupCache.save","title":"<code>save(path='.')</code>  <code>async</code>","text":"<p>Save the cache to a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to save the cache to.</p> <code>'.'</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def save(self, path: str = \".\") -&gt; None:\n    \"\"\"Save the cache to a file.\n\n    Parameters\n    ----------\n    path: str\n        The path to save the cache to.\n    \"\"\"\n    pathlib.Path(path).mkdir(parents=True, exist_ok=True)\n    dummy: t.Dict[str, t.Dict[str, t.Any]] = {k.endpoint: v.raw for k, v in self.items()}\n    async with aiofiles.open(pathlib.Path(f\"{path}/{self.__class__.__name__}.json\"), \"w\") as f:\n        await f.write(\"{\\n\")\n        for n, (k, v) in enumerate(dummy.items()):\n            await f.write(\"\\n\".join([4 * \" \" + i for i in f'\"{k}\": {json.dumps(v, indent=4)}'.split(\"\\n\")]))\n            if n != len(dummy) - 1:\n                await f.write(\",\\n\")\n        await f.write(\"\\n}\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.EggGroupCache.set_size","title":"<code>set_size(size)</code>","text":"<p>Set the size of the cache.</p> <p>Parameters:</p> Name Type Description Default <code>size</code> <code>int</code> <p>The size of the cache.</p> required Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def set_size(self, size: int) -&gt; None:\n    \"\"\"Set the size of the cache.\n\n    Parameters\n    ----------\n    size: int\n        The size of the cache.\n    \"\"\"\n    self._max_size = size\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.EggGroupCache.wait_until_ready","title":"<code>wait_until_ready()</code>  <code>async</code>","text":"<p>Wait until the all the endpoints are cached.</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def wait_until_ready(self) -&gt; None:\n    \"\"\"Wait until the all the endpoints are cached.\"\"\"\n    await self._client.http.connect()\n    while not self._endpoints_cached and self._client.cache_endpoints:\n        await asyncio.sleep(0.5)\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.EncounterConditionCache","title":"<code>EncounterConditionCache(max_size=100)</code>","text":"<p>               Bases: <code>BaseCache['Route', 'models.EncounterCondition']</code></p> <p>A cache for encounter conditions.</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def __init__(self, max_size: int = 100) -&gt; None:\n    self._max_size = max_size\n    self._cache: t.Dict[_KT, _VT] = {}\n    self._endpoints: t.Dict[str, Endpoint] = {}\n    self._endpoints_cached: bool = False\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.EncounterConditionCache.cache","title":"<code>cache: t.Dict[_KT, _VT]</code>  <code>property</code>","text":"<p>The cache itself.</p> <p>Returns:</p> Type Description <code>Dict[_KT, _VT]</code> <p>The cache itself.</p>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.EncounterConditionCache.endpoints","title":"<code>endpoints: t.Dict[str, Endpoint]</code>  <code>property</code>","text":"<p>The endpoints that are cached.</p> <p>Returns:</p> Type Description <code>Dict[str, Endpoint]</code> <p>The endpoints that are cached.</p>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.EncounterConditionCache.load","title":"<code>load(path='.')</code>  <code>async</code>","text":"<p>Load the cache from a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to load the cache from.</p> <code>'.'</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load(self, path: str = \".\") -&gt; None:\n    \"\"\"Load the cache from a file.\n\n    Parameters\n    ----------\n    path: str\n        The path to load the cache from.\n    \"\"\"\n    async with aiofiles.open(pathlib.Path(f\"{path}/{self.__class__.__name__}.json\"), \"r\") as f:\n        data = json.loads(await f.read())\n    self._max_size = len(data)\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: t.Type[\"_VT\"] = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    for endpoint, info in data.items():\n        route = route_model(endpoint=endpoint)\n        self.setdefault(route, model.from_payload(info))\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.EncounterConditionCache.load_all","title":"<code>load_all()</code>  <code>async</code>","text":"<p>Load all documents/data from api into the cache. (Endpoints must be cached first)</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load_all(self) -&gt; None:\n    \"\"\"\n    Load all documents/data from api into the cache. (Endpoints must be cached first)\n    \"\"\"\n    if not self._endpoints_cached:\n        raise RuntimeError(\"The endpoints have not been cached yet.\")\n    self._client.logger.info(f\"Loading {self.__class__.__name__}...\")\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: \"models.BaseModel\" = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    self._max_size = len(self._endpoints)\n    for endpoint in self._endpoints.values():\n        route = route_model(endpoint=f\"/{endpoint.url.strip('/').split('/')[-2]}/{str(endpoint)}\")\n        data = self.get(route, None)\n        self.setdefault(route, data if data else model.from_payload(await self._client.http.request(route)))\n    self._client.logger.info(f\"Loaded {self.__class__.__name__}.\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.EncounterConditionCache.load_all_batch","title":"<code>load_all_batch(batch_size=20)</code>  <code>async</code>","text":"<p>Load all documents/data from api into the cache in parallel. (Endpoints must be cached first)</p> <p>Parameters:</p> Name Type Description Default <code>batch_size</code> <code>int</code> <p>The number of documents to load at once. Default is 20 to avoid overwhelming the API.</p> <code>20</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load_all_batch(self, batch_size: int = 20) -&gt; None:\n    \"\"\"\n    Load all documents/data from api into the cache in parallel. (Endpoints must be cached first)\n\n    Parameters\n    ----------\n    batch_size: int\n        The number of documents to load at once. Default is 20 to avoid overwhelming the API.\n    \"\"\"\n    if not self._endpoints_cached:\n        raise RuntimeError(\"The endpoints have not been cached yet.\")\n    self._client.logger.info(f\"Loading {self.__class__.__name__}...\")\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: t.Type[\"_VT\"] = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    self._max_size = len(self._endpoints)\n    endpoints = list(self._endpoints.values())\n    total_endpoints = len(endpoints)\n    for i in range(0, total_endpoints, batch_size):\n        batch = endpoints[i : i + batch_size]\n        tasks = []\n        for endpoint in batch:\n            route = route_model(endpoint=f\"/{endpoint.url.strip('/').split('/')[-2]}/{str(endpoint)}\")\n            data = self.get(route, None)\n            if data:\n                self.setdefault(route, data)\n                self._client.logger.info(f\"Cached {route} - existing data used.\")\n            else:\n                tasks.append(self._fetch_and_cache(route, model))\n        if tasks:\n            await asyncio.gather(*tasks)\n        self._client.logger.debug(\n            f\"Loaded batch {i//batch_size + 1}/{(total_endpoints + batch_size - 1)//batch_size} for {self.__class__.__name__}\"\n        )\n    self._client.logger.info(f\"Loaded {self.__class__.__name__} - {len(self._cache)}/{total_endpoints} items.\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.EncounterConditionCache.load_documents","title":"<code>load_documents(data)</code>","text":"<p>Load documents into the cache.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>List[Dict[str, str]]</code> <p>The data to load.</p> required Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def load_documents(self, data: t.List[t.Dict[str, str]]) -&gt; None:\n    \"\"\"Load documents into the cache.\n\n    Parameters\n    ----------\n    data: typing.List[typing.Dict[str, str]]\n        The data to load.\n    \"\"\"\n    for document in data:\n        self._endpoints[document[\"name\"]] = Endpoint(url=document[\"url\"], id=int(document[\"url\"].split(\"/\")[-2]))\n    self._endpoints_cached = True\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.EncounterConditionCache.save","title":"<code>save(path='.')</code>  <code>async</code>","text":"<p>Save the cache to a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to save the cache to.</p> <code>'.'</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def save(self, path: str = \".\") -&gt; None:\n    \"\"\"Save the cache to a file.\n\n    Parameters\n    ----------\n    path: str\n        The path to save the cache to.\n    \"\"\"\n    pathlib.Path(path).mkdir(parents=True, exist_ok=True)\n    dummy: t.Dict[str, t.Dict[str, t.Any]] = {k.endpoint: v.raw for k, v in self.items()}\n    async with aiofiles.open(pathlib.Path(f\"{path}/{self.__class__.__name__}.json\"), \"w\") as f:\n        await f.write(\"{\\n\")\n        for n, (k, v) in enumerate(dummy.items()):\n            await f.write(\"\\n\".join([4 * \" \" + i for i in f'\"{k}\": {json.dumps(v, indent=4)}'.split(\"\\n\")]))\n            if n != len(dummy) - 1:\n                await f.write(\",\\n\")\n        await f.write(\"\\n}\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.EncounterConditionCache.set_size","title":"<code>set_size(size)</code>","text":"<p>Set the size of the cache.</p> <p>Parameters:</p> Name Type Description Default <code>size</code> <code>int</code> <p>The size of the cache.</p> required Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def set_size(self, size: int) -&gt; None:\n    \"\"\"Set the size of the cache.\n\n    Parameters\n    ----------\n    size: int\n        The size of the cache.\n    \"\"\"\n    self._max_size = size\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.EncounterConditionCache.wait_until_ready","title":"<code>wait_until_ready()</code>  <code>async</code>","text":"<p>Wait until the all the endpoints are cached.</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def wait_until_ready(self) -&gt; None:\n    \"\"\"Wait until the all the endpoints are cached.\"\"\"\n    await self._client.http.connect()\n    while not self._endpoints_cached and self._client.cache_endpoints:\n        await asyncio.sleep(0.5)\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.EncounterConditionValueCache","title":"<code>EncounterConditionValueCache(max_size=100)</code>","text":"<p>               Bases: <code>BaseCache['Route', 'models.EncounterConditionValue']</code></p> <p>A cache for encounter condition values.</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def __init__(self, max_size: int = 100) -&gt; None:\n    self._max_size = max_size\n    self._cache: t.Dict[_KT, _VT] = {}\n    self._endpoints: t.Dict[str, Endpoint] = {}\n    self._endpoints_cached: bool = False\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.EncounterConditionValueCache.cache","title":"<code>cache: t.Dict[_KT, _VT]</code>  <code>property</code>","text":"<p>The cache itself.</p> <p>Returns:</p> Type Description <code>Dict[_KT, _VT]</code> <p>The cache itself.</p>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.EncounterConditionValueCache.endpoints","title":"<code>endpoints: t.Dict[str, Endpoint]</code>  <code>property</code>","text":"<p>The endpoints that are cached.</p> <p>Returns:</p> Type Description <code>Dict[str, Endpoint]</code> <p>The endpoints that are cached.</p>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.EncounterConditionValueCache.load","title":"<code>load(path='.')</code>  <code>async</code>","text":"<p>Load the cache from a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to load the cache from.</p> <code>'.'</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load(self, path: str = \".\") -&gt; None:\n    \"\"\"Load the cache from a file.\n\n    Parameters\n    ----------\n    path: str\n        The path to load the cache from.\n    \"\"\"\n    async with aiofiles.open(pathlib.Path(f\"{path}/{self.__class__.__name__}.json\"), \"r\") as f:\n        data = json.loads(await f.read())\n    self._max_size = len(data)\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: t.Type[\"_VT\"] = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    for endpoint, info in data.items():\n        route = route_model(endpoint=endpoint)\n        self.setdefault(route, model.from_payload(info))\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.EncounterConditionValueCache.load_all","title":"<code>load_all()</code>  <code>async</code>","text":"<p>Load all documents/data from api into the cache. (Endpoints must be cached first)</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load_all(self) -&gt; None:\n    \"\"\"\n    Load all documents/data from api into the cache. (Endpoints must be cached first)\n    \"\"\"\n    if not self._endpoints_cached:\n        raise RuntimeError(\"The endpoints have not been cached yet.\")\n    self._client.logger.info(f\"Loading {self.__class__.__name__}...\")\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: \"models.BaseModel\" = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    self._max_size = len(self._endpoints)\n    for endpoint in self._endpoints.values():\n        route = route_model(endpoint=f\"/{endpoint.url.strip('/').split('/')[-2]}/{str(endpoint)}\")\n        data = self.get(route, None)\n        self.setdefault(route, data if data else model.from_payload(await self._client.http.request(route)))\n    self._client.logger.info(f\"Loaded {self.__class__.__name__}.\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.EncounterConditionValueCache.load_all_batch","title":"<code>load_all_batch(batch_size=20)</code>  <code>async</code>","text":"<p>Load all documents/data from api into the cache in parallel. (Endpoints must be cached first)</p> <p>Parameters:</p> Name Type Description Default <code>batch_size</code> <code>int</code> <p>The number of documents to load at once. Default is 20 to avoid overwhelming the API.</p> <code>20</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load_all_batch(self, batch_size: int = 20) -&gt; None:\n    \"\"\"\n    Load all documents/data from api into the cache in parallel. (Endpoints must be cached first)\n\n    Parameters\n    ----------\n    batch_size: int\n        The number of documents to load at once. Default is 20 to avoid overwhelming the API.\n    \"\"\"\n    if not self._endpoints_cached:\n        raise RuntimeError(\"The endpoints have not been cached yet.\")\n    self._client.logger.info(f\"Loading {self.__class__.__name__}...\")\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: t.Type[\"_VT\"] = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    self._max_size = len(self._endpoints)\n    endpoints = list(self._endpoints.values())\n    total_endpoints = len(endpoints)\n    for i in range(0, total_endpoints, batch_size):\n        batch = endpoints[i : i + batch_size]\n        tasks = []\n        for endpoint in batch:\n            route = route_model(endpoint=f\"/{endpoint.url.strip('/').split('/')[-2]}/{str(endpoint)}\")\n            data = self.get(route, None)\n            if data:\n                self.setdefault(route, data)\n                self._client.logger.info(f\"Cached {route} - existing data used.\")\n            else:\n                tasks.append(self._fetch_and_cache(route, model))\n        if tasks:\n            await asyncio.gather(*tasks)\n        self._client.logger.debug(\n            f\"Loaded batch {i//batch_size + 1}/{(total_endpoints + batch_size - 1)//batch_size} for {self.__class__.__name__}\"\n        )\n    self._client.logger.info(f\"Loaded {self.__class__.__name__} - {len(self._cache)}/{total_endpoints} items.\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.EncounterConditionValueCache.load_documents","title":"<code>load_documents(data)</code>","text":"<p>Load documents into the cache.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>List[Dict[str, str]]</code> <p>The data to load.</p> required Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def load_documents(self, data: t.List[t.Dict[str, str]]) -&gt; None:\n    \"\"\"Load documents into the cache.\n\n    Parameters\n    ----------\n    data: typing.List[typing.Dict[str, str]]\n        The data to load.\n    \"\"\"\n    for document in data:\n        self._endpoints[document[\"name\"]] = Endpoint(url=document[\"url\"], id=int(document[\"url\"].split(\"/\")[-2]))\n    self._endpoints_cached = True\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.EncounterConditionValueCache.save","title":"<code>save(path='.')</code>  <code>async</code>","text":"<p>Save the cache to a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to save the cache to.</p> <code>'.'</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def save(self, path: str = \".\") -&gt; None:\n    \"\"\"Save the cache to a file.\n\n    Parameters\n    ----------\n    path: str\n        The path to save the cache to.\n    \"\"\"\n    pathlib.Path(path).mkdir(parents=True, exist_ok=True)\n    dummy: t.Dict[str, t.Dict[str, t.Any]] = {k.endpoint: v.raw for k, v in self.items()}\n    async with aiofiles.open(pathlib.Path(f\"{path}/{self.__class__.__name__}.json\"), \"w\") as f:\n        await f.write(\"{\\n\")\n        for n, (k, v) in enumerate(dummy.items()):\n            await f.write(\"\\n\".join([4 * \" \" + i for i in f'\"{k}\": {json.dumps(v, indent=4)}'.split(\"\\n\")]))\n            if n != len(dummy) - 1:\n                await f.write(\",\\n\")\n        await f.write(\"\\n}\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.EncounterConditionValueCache.set_size","title":"<code>set_size(size)</code>","text":"<p>Set the size of the cache.</p> <p>Parameters:</p> Name Type Description Default <code>size</code> <code>int</code> <p>The size of the cache.</p> required Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def set_size(self, size: int) -&gt; None:\n    \"\"\"Set the size of the cache.\n\n    Parameters\n    ----------\n    size: int\n        The size of the cache.\n    \"\"\"\n    self._max_size = size\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.EncounterConditionValueCache.wait_until_ready","title":"<code>wait_until_ready()</code>  <code>async</code>","text":"<p>Wait until the all the endpoints are cached.</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def wait_until_ready(self) -&gt; None:\n    \"\"\"Wait until the all the endpoints are cached.\"\"\"\n    await self._client.http.connect()\n    while not self._endpoints_cached and self._client.cache_endpoints:\n        await asyncio.sleep(0.5)\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.EncounterMethodCache","title":"<code>EncounterMethodCache(max_size=100)</code>","text":"<p>               Bases: <code>BaseCache['Route', 'models.EncounterMethod']</code></p> <p>A cache for encounter methods.</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def __init__(self, max_size: int = 100) -&gt; None:\n    self._max_size = max_size\n    self._cache: t.Dict[_KT, _VT] = {}\n    self._endpoints: t.Dict[str, Endpoint] = {}\n    self._endpoints_cached: bool = False\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.EncounterMethodCache.cache","title":"<code>cache: t.Dict[_KT, _VT]</code>  <code>property</code>","text":"<p>The cache itself.</p> <p>Returns:</p> Type Description <code>Dict[_KT, _VT]</code> <p>The cache itself.</p>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.EncounterMethodCache.endpoints","title":"<code>endpoints: t.Dict[str, Endpoint]</code>  <code>property</code>","text":"<p>The endpoints that are cached.</p> <p>Returns:</p> Type Description <code>Dict[str, Endpoint]</code> <p>The endpoints that are cached.</p>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.EncounterMethodCache.load","title":"<code>load(path='.')</code>  <code>async</code>","text":"<p>Load the cache from a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to load the cache from.</p> <code>'.'</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load(self, path: str = \".\") -&gt; None:\n    \"\"\"Load the cache from a file.\n\n    Parameters\n    ----------\n    path: str\n        The path to load the cache from.\n    \"\"\"\n    async with aiofiles.open(pathlib.Path(f\"{path}/{self.__class__.__name__}.json\"), \"r\") as f:\n        data = json.loads(await f.read())\n    self._max_size = len(data)\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: t.Type[\"_VT\"] = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    for endpoint, info in data.items():\n        route = route_model(endpoint=endpoint)\n        self.setdefault(route, model.from_payload(info))\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.EncounterMethodCache.load_all","title":"<code>load_all()</code>  <code>async</code>","text":"<p>Load all documents/data from api into the cache. (Endpoints must be cached first)</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load_all(self) -&gt; None:\n    \"\"\"\n    Load all documents/data from api into the cache. (Endpoints must be cached first)\n    \"\"\"\n    if not self._endpoints_cached:\n        raise RuntimeError(\"The endpoints have not been cached yet.\")\n    self._client.logger.info(f\"Loading {self.__class__.__name__}...\")\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: \"models.BaseModel\" = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    self._max_size = len(self._endpoints)\n    for endpoint in self._endpoints.values():\n        route = route_model(endpoint=f\"/{endpoint.url.strip('/').split('/')[-2]}/{str(endpoint)}\")\n        data = self.get(route, None)\n        self.setdefault(route, data if data else model.from_payload(await self._client.http.request(route)))\n    self._client.logger.info(f\"Loaded {self.__class__.__name__}.\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.EncounterMethodCache.load_all_batch","title":"<code>load_all_batch(batch_size=20)</code>  <code>async</code>","text":"<p>Load all documents/data from api into the cache in parallel. (Endpoints must be cached first)</p> <p>Parameters:</p> Name Type Description Default <code>batch_size</code> <code>int</code> <p>The number of documents to load at once. Default is 20 to avoid overwhelming the API.</p> <code>20</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load_all_batch(self, batch_size: int = 20) -&gt; None:\n    \"\"\"\n    Load all documents/data from api into the cache in parallel. (Endpoints must be cached first)\n\n    Parameters\n    ----------\n    batch_size: int\n        The number of documents to load at once. Default is 20 to avoid overwhelming the API.\n    \"\"\"\n    if not self._endpoints_cached:\n        raise RuntimeError(\"The endpoints have not been cached yet.\")\n    self._client.logger.info(f\"Loading {self.__class__.__name__}...\")\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: t.Type[\"_VT\"] = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    self._max_size = len(self._endpoints)\n    endpoints = list(self._endpoints.values())\n    total_endpoints = len(endpoints)\n    for i in range(0, total_endpoints, batch_size):\n        batch = endpoints[i : i + batch_size]\n        tasks = []\n        for endpoint in batch:\n            route = route_model(endpoint=f\"/{endpoint.url.strip('/').split('/')[-2]}/{str(endpoint)}\")\n            data = self.get(route, None)\n            if data:\n                self.setdefault(route, data)\n                self._client.logger.info(f\"Cached {route} - existing data used.\")\n            else:\n                tasks.append(self._fetch_and_cache(route, model))\n        if tasks:\n            await asyncio.gather(*tasks)\n        self._client.logger.debug(\n            f\"Loaded batch {i//batch_size + 1}/{(total_endpoints + batch_size - 1)//batch_size} for {self.__class__.__name__}\"\n        )\n    self._client.logger.info(f\"Loaded {self.__class__.__name__} - {len(self._cache)}/{total_endpoints} items.\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.EncounterMethodCache.load_documents","title":"<code>load_documents(data)</code>","text":"<p>Load documents into the cache.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>List[Dict[str, str]]</code> <p>The data to load.</p> required Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def load_documents(self, data: t.List[t.Dict[str, str]]) -&gt; None:\n    \"\"\"Load documents into the cache.\n\n    Parameters\n    ----------\n    data: typing.List[typing.Dict[str, str]]\n        The data to load.\n    \"\"\"\n    for document in data:\n        self._endpoints[document[\"name\"]] = Endpoint(url=document[\"url\"], id=int(document[\"url\"].split(\"/\")[-2]))\n    self._endpoints_cached = True\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.EncounterMethodCache.save","title":"<code>save(path='.')</code>  <code>async</code>","text":"<p>Save the cache to a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to save the cache to.</p> <code>'.'</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def save(self, path: str = \".\") -&gt; None:\n    \"\"\"Save the cache to a file.\n\n    Parameters\n    ----------\n    path: str\n        The path to save the cache to.\n    \"\"\"\n    pathlib.Path(path).mkdir(parents=True, exist_ok=True)\n    dummy: t.Dict[str, t.Dict[str, t.Any]] = {k.endpoint: v.raw for k, v in self.items()}\n    async with aiofiles.open(pathlib.Path(f\"{path}/{self.__class__.__name__}.json\"), \"w\") as f:\n        await f.write(\"{\\n\")\n        for n, (k, v) in enumerate(dummy.items()):\n            await f.write(\"\\n\".join([4 * \" \" + i for i in f'\"{k}\": {json.dumps(v, indent=4)}'.split(\"\\n\")]))\n            if n != len(dummy) - 1:\n                await f.write(\",\\n\")\n        await f.write(\"\\n}\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.EncounterMethodCache.set_size","title":"<code>set_size(size)</code>","text":"<p>Set the size of the cache.</p> <p>Parameters:</p> Name Type Description Default <code>size</code> <code>int</code> <p>The size of the cache.</p> required Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def set_size(self, size: int) -&gt; None:\n    \"\"\"Set the size of the cache.\n\n    Parameters\n    ----------\n    size: int\n        The size of the cache.\n    \"\"\"\n    self._max_size = size\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.EncounterMethodCache.wait_until_ready","title":"<code>wait_until_ready()</code>  <code>async</code>","text":"<p>Wait until the all the endpoints are cached.</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def wait_until_ready(self) -&gt; None:\n    \"\"\"Wait until the all the endpoints are cached.\"\"\"\n    await self._client.http.connect()\n    while not self._endpoints_cached and self._client.cache_endpoints:\n        await asyncio.sleep(0.5)\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.EvolutionChainCache","title":"<code>EvolutionChainCache(max_size=100)</code>","text":"<p>               Bases: <code>SecondaryTypeCache['Route', 'models.EvolutionChain']</code></p> <p>A cache for evolution chains.</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def __init__(self, max_size: int = 100) -&gt; None:\n    self._max_size = max_size\n    self._cache: t.Dict[_KT, _VT] = {}\n    self._endpoints: t.Dict[str, Endpoint] = {}\n    self._endpoints_cached: bool = False\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.EvolutionChainCache.cache","title":"<code>cache: t.Dict[_KT, _VT]</code>  <code>property</code>","text":"<p>The cache itself.</p> <p>Returns:</p> Type Description <code>Dict[_KT, _VT]</code> <p>The cache itself.</p>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.EvolutionChainCache.endpoints","title":"<code>endpoints: t.Dict[str, Endpoint]</code>  <code>property</code>","text":"<p>The endpoints that are cached.</p> <p>Returns:</p> Type Description <code>Dict[str, Endpoint]</code> <p>The endpoints that are cached.</p>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.EvolutionChainCache.load","title":"<code>load(path='.')</code>  <code>async</code>","text":"<p>Load the cache from a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to load the cache from.</p> <code>'.'</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load(self, path: str = \".\") -&gt; None:\n    \"\"\"Load the cache from a file.\n\n    Parameters\n    ----------\n    path: str\n        The path to load the cache from.\n    \"\"\"\n    async with aiofiles.open(pathlib.Path(f\"{path}/{self.__class__.__name__}.json\"), \"r\") as f:\n        data = json.loads(await f.read())\n    self._max_size = len(data)\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: t.Type[\"_VT\"] = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    for endpoint, info in data.items():\n        route = route_model(endpoint=endpoint)\n        self.setdefault(route, model.from_payload(info))\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.EvolutionChainCache.load_all","title":"<code>load_all()</code>  <code>async</code>","text":"<p>Load all documents/data from api into the cache. (Endpoints must be cached first)</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load_all(self) -&gt; None:\n    \"\"\"\n    Load all documents/data from api into the cache. (Endpoints must be cached first)\n    \"\"\"\n    if not self._endpoints_cached:\n        raise RuntimeError(\"The endpoints have not been cached yet.\")\n    self._client.logger.info(f\"Loading {self.__class__.__name__}...\")\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: \"models.BaseModel\" = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    self._max_size = len(self._endpoints)\n    for endpoint in self._endpoints.values():\n        route = route_model(endpoint=f\"/{endpoint.url.strip('/').split('/')[-2]}/{str(endpoint)}\")\n        data = self.get(route, None)\n        self.setdefault(route, data if data else model.from_payload(await self._client.http.request(route)))\n    self._client.logger.info(f\"Loaded {self.__class__.__name__}.\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.EvolutionChainCache.load_all_batch","title":"<code>load_all_batch(batch_size=20)</code>  <code>async</code>","text":"<p>Load all documents/data from api into the cache in parallel. (Endpoints must be cached first)</p> <p>Parameters:</p> Name Type Description Default <code>batch_size</code> <code>int</code> <p>The number of documents to load at once. Default is 20 to avoid overwhelming the API.</p> <code>20</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load_all_batch(self, batch_size: int = 20) -&gt; None:\n    \"\"\"\n    Load all documents/data from api into the cache in parallel. (Endpoints must be cached first)\n\n    Parameters\n    ----------\n    batch_size: int\n        The number of documents to load at once. Default is 20 to avoid overwhelming the API.\n    \"\"\"\n    if not self._endpoints_cached:\n        raise RuntimeError(\"The endpoints have not been cached yet.\")\n    self._client.logger.info(f\"Loading {self.__class__.__name__}...\")\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: t.Type[\"_VT\"] = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    self._max_size = len(self._endpoints)\n    endpoints = list(self._endpoints.values())\n    total_endpoints = len(endpoints)\n    for i in range(0, total_endpoints, batch_size):\n        batch = endpoints[i : i + batch_size]\n        tasks = []\n        for endpoint in batch:\n            route = route_model(endpoint=f\"/{endpoint.url.strip('/').split('/')[-2]}/{str(endpoint)}\")\n            data = self.get(route, None)\n            if data:\n                self.setdefault(route, data)\n                self._client.logger.info(f\"Cached {route} - existing data used.\")\n            else:\n                tasks.append(self._fetch_and_cache(route, model))\n        if tasks:\n            await asyncio.gather(*tasks)\n        self._client.logger.debug(\n            f\"Loaded batch {i//batch_size + 1}/{(total_endpoints + batch_size - 1)//batch_size} for {self.__class__.__name__}\"\n        )\n    self._client.logger.info(f\"Loaded {self.__class__.__name__} - {len(self._cache)}/{total_endpoints} items.\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.EvolutionChainCache.load_documents","title":"<code>load_documents(data)</code>","text":"<p>Load documents into the cache. Endpoints are different for secondary types.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>List[Dict[str, str]]</code> <p>The data to load.</p> required Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def load_documents(self, data: t.List[t.Dict[str, str]]) -&gt; None:\n    \"\"\"Load documents into the cache. Endpoints are different for secondary types.\n\n    Parameters\n    ----------\n    data: typing.List[typing.Dict[str, str]]\n        The data to load.\n    \"\"\"\n    for document in data:\n        self._endpoints[document[\"url\"].split(\"/\")[-2]] = Endpoint(\n            url=document[\"url\"], id=int(document[\"url\"].split(\"/\")[-2])\n        )\n    self._endpoints_cached = True\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.EvolutionChainCache.save","title":"<code>save(path='.')</code>  <code>async</code>","text":"<p>Save the cache to a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to save the cache to.</p> <code>'.'</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def save(self, path: str = \".\") -&gt; None:\n    \"\"\"Save the cache to a file.\n\n    Parameters\n    ----------\n    path: str\n        The path to save the cache to.\n    \"\"\"\n    pathlib.Path(path).mkdir(parents=True, exist_ok=True)\n    dummy: t.Dict[str, t.Dict[str, t.Any]] = {k.endpoint: v.raw for k, v in self.items()}\n    async with aiofiles.open(pathlib.Path(f\"{path}/{self.__class__.__name__}.json\"), \"w\") as f:\n        await f.write(\"{\\n\")\n        for n, (k, v) in enumerate(dummy.items()):\n            await f.write(\"\\n\".join([4 * \" \" + i for i in f'\"{k}\": {json.dumps(v, indent=4)}'.split(\"\\n\")]))\n            if n != len(dummy) - 1:\n                await f.write(\",\\n\")\n        await f.write(\"\\n}\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.EvolutionChainCache.set_size","title":"<code>set_size(size)</code>","text":"<p>Set the size of the cache.</p> <p>Parameters:</p> Name Type Description Default <code>size</code> <code>int</code> <p>The size of the cache.</p> required Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def set_size(self, size: int) -&gt; None:\n    \"\"\"Set the size of the cache.\n\n    Parameters\n    ----------\n    size: int\n        The size of the cache.\n    \"\"\"\n    self._max_size = size\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.EvolutionChainCache.wait_until_ready","title":"<code>wait_until_ready()</code>  <code>async</code>","text":"<p>Wait until the all the endpoints are cached.</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def wait_until_ready(self) -&gt; None:\n    \"\"\"Wait until the all the endpoints are cached.\"\"\"\n    await self._client.http.connect()\n    while not self._endpoints_cached and self._client.cache_endpoints:\n        await asyncio.sleep(0.5)\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.EvolutionTriggerCache","title":"<code>EvolutionTriggerCache(max_size=100)</code>","text":"<p>               Bases: <code>BaseCache['Route', 'models.EvolutionTrigger']</code></p> <p>A cache for evolution triggers.</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def __init__(self, max_size: int = 100) -&gt; None:\n    self._max_size = max_size\n    self._cache: t.Dict[_KT, _VT] = {}\n    self._endpoints: t.Dict[str, Endpoint] = {}\n    self._endpoints_cached: bool = False\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.EvolutionTriggerCache.cache","title":"<code>cache: t.Dict[_KT, _VT]</code>  <code>property</code>","text":"<p>The cache itself.</p> <p>Returns:</p> Type Description <code>Dict[_KT, _VT]</code> <p>The cache itself.</p>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.EvolutionTriggerCache.endpoints","title":"<code>endpoints: t.Dict[str, Endpoint]</code>  <code>property</code>","text":"<p>The endpoints that are cached.</p> <p>Returns:</p> Type Description <code>Dict[str, Endpoint]</code> <p>The endpoints that are cached.</p>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.EvolutionTriggerCache.load","title":"<code>load(path='.')</code>  <code>async</code>","text":"<p>Load the cache from a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to load the cache from.</p> <code>'.'</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load(self, path: str = \".\") -&gt; None:\n    \"\"\"Load the cache from a file.\n\n    Parameters\n    ----------\n    path: str\n        The path to load the cache from.\n    \"\"\"\n    async with aiofiles.open(pathlib.Path(f\"{path}/{self.__class__.__name__}.json\"), \"r\") as f:\n        data = json.loads(await f.read())\n    self._max_size = len(data)\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: t.Type[\"_VT\"] = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    for endpoint, info in data.items():\n        route = route_model(endpoint=endpoint)\n        self.setdefault(route, model.from_payload(info))\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.EvolutionTriggerCache.load_all","title":"<code>load_all()</code>  <code>async</code>","text":"<p>Load all documents/data from api into the cache. (Endpoints must be cached first)</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load_all(self) -&gt; None:\n    \"\"\"\n    Load all documents/data from api into the cache. (Endpoints must be cached first)\n    \"\"\"\n    if not self._endpoints_cached:\n        raise RuntimeError(\"The endpoints have not been cached yet.\")\n    self._client.logger.info(f\"Loading {self.__class__.__name__}...\")\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: \"models.BaseModel\" = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    self._max_size = len(self._endpoints)\n    for endpoint in self._endpoints.values():\n        route = route_model(endpoint=f\"/{endpoint.url.strip('/').split('/')[-2]}/{str(endpoint)}\")\n        data = self.get(route, None)\n        self.setdefault(route, data if data else model.from_payload(await self._client.http.request(route)))\n    self._client.logger.info(f\"Loaded {self.__class__.__name__}.\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.EvolutionTriggerCache.load_all_batch","title":"<code>load_all_batch(batch_size=20)</code>  <code>async</code>","text":"<p>Load all documents/data from api into the cache in parallel. (Endpoints must be cached first)</p> <p>Parameters:</p> Name Type Description Default <code>batch_size</code> <code>int</code> <p>The number of documents to load at once. Default is 20 to avoid overwhelming the API.</p> <code>20</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load_all_batch(self, batch_size: int = 20) -&gt; None:\n    \"\"\"\n    Load all documents/data from api into the cache in parallel. (Endpoints must be cached first)\n\n    Parameters\n    ----------\n    batch_size: int\n        The number of documents to load at once. Default is 20 to avoid overwhelming the API.\n    \"\"\"\n    if not self._endpoints_cached:\n        raise RuntimeError(\"The endpoints have not been cached yet.\")\n    self._client.logger.info(f\"Loading {self.__class__.__name__}...\")\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: t.Type[\"_VT\"] = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    self._max_size = len(self._endpoints)\n    endpoints = list(self._endpoints.values())\n    total_endpoints = len(endpoints)\n    for i in range(0, total_endpoints, batch_size):\n        batch = endpoints[i : i + batch_size]\n        tasks = []\n        for endpoint in batch:\n            route = route_model(endpoint=f\"/{endpoint.url.strip('/').split('/')[-2]}/{str(endpoint)}\")\n            data = self.get(route, None)\n            if data:\n                self.setdefault(route, data)\n                self._client.logger.info(f\"Cached {route} - existing data used.\")\n            else:\n                tasks.append(self._fetch_and_cache(route, model))\n        if tasks:\n            await asyncio.gather(*tasks)\n        self._client.logger.debug(\n            f\"Loaded batch {i//batch_size + 1}/{(total_endpoints + batch_size - 1)//batch_size} for {self.__class__.__name__}\"\n        )\n    self._client.logger.info(f\"Loaded {self.__class__.__name__} - {len(self._cache)}/{total_endpoints} items.\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.EvolutionTriggerCache.load_documents","title":"<code>load_documents(data)</code>","text":"<p>Load documents into the cache.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>List[Dict[str, str]]</code> <p>The data to load.</p> required Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def load_documents(self, data: t.List[t.Dict[str, str]]) -&gt; None:\n    \"\"\"Load documents into the cache.\n\n    Parameters\n    ----------\n    data: typing.List[typing.Dict[str, str]]\n        The data to load.\n    \"\"\"\n    for document in data:\n        self._endpoints[document[\"name\"]] = Endpoint(url=document[\"url\"], id=int(document[\"url\"].split(\"/\")[-2]))\n    self._endpoints_cached = True\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.EvolutionTriggerCache.save","title":"<code>save(path='.')</code>  <code>async</code>","text":"<p>Save the cache to a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to save the cache to.</p> <code>'.'</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def save(self, path: str = \".\") -&gt; None:\n    \"\"\"Save the cache to a file.\n\n    Parameters\n    ----------\n    path: str\n        The path to save the cache to.\n    \"\"\"\n    pathlib.Path(path).mkdir(parents=True, exist_ok=True)\n    dummy: t.Dict[str, t.Dict[str, t.Any]] = {k.endpoint: v.raw for k, v in self.items()}\n    async with aiofiles.open(pathlib.Path(f\"{path}/{self.__class__.__name__}.json\"), \"w\") as f:\n        await f.write(\"{\\n\")\n        for n, (k, v) in enumerate(dummy.items()):\n            await f.write(\"\\n\".join([4 * \" \" + i for i in f'\"{k}\": {json.dumps(v, indent=4)}'.split(\"\\n\")]))\n            if n != len(dummy) - 1:\n                await f.write(\",\\n\")\n        await f.write(\"\\n}\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.EvolutionTriggerCache.set_size","title":"<code>set_size(size)</code>","text":"<p>Set the size of the cache.</p> <p>Parameters:</p> Name Type Description Default <code>size</code> <code>int</code> <p>The size of the cache.</p> required Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def set_size(self, size: int) -&gt; None:\n    \"\"\"Set the size of the cache.\n\n    Parameters\n    ----------\n    size: int\n        The size of the cache.\n    \"\"\"\n    self._max_size = size\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.EvolutionTriggerCache.wait_until_ready","title":"<code>wait_until_ready()</code>  <code>async</code>","text":"<p>Wait until the all the endpoints are cached.</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def wait_until_ready(self) -&gt; None:\n    \"\"\"Wait until the all the endpoints are cached.\"\"\"\n    await self._client.http.connect()\n    while not self._endpoints_cached and self._client.cache_endpoints:\n        await asyncio.sleep(0.5)\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.GamesGenerationCache","title":"<code>GamesGenerationCache(max_size=100)</code>","text":"<p>               Bases: <code>BaseCache['Route', 'models.Generation']</code></p> <p>A cache for games generations.</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def __init__(self, max_size: int = 100) -&gt; None:\n    self._max_size = max_size\n    self._cache: t.Dict[_KT, _VT] = {}\n    self._endpoints: t.Dict[str, Endpoint] = {}\n    self._endpoints_cached: bool = False\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.GamesGenerationCache.cache","title":"<code>cache: t.Dict[_KT, _VT]</code>  <code>property</code>","text":"<p>The cache itself.</p> <p>Returns:</p> Type Description <code>Dict[_KT, _VT]</code> <p>The cache itself.</p>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.GamesGenerationCache.endpoints","title":"<code>endpoints: t.Dict[str, Endpoint]</code>  <code>property</code>","text":"<p>The endpoints that are cached.</p> <p>Returns:</p> Type Description <code>Dict[str, Endpoint]</code> <p>The endpoints that are cached.</p>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.GamesGenerationCache.load","title":"<code>load(path='.')</code>  <code>async</code>","text":"<p>Load the cache from a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to load the cache from.</p> <code>'.'</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load(self, path: str = \".\") -&gt; None:\n    \"\"\"Load the cache from a file.\n\n    Parameters\n    ----------\n    path: str\n        The path to load the cache from.\n    \"\"\"\n    async with aiofiles.open(pathlib.Path(f\"{path}/{self.__class__.__name__}.json\"), \"r\") as f:\n        data = json.loads(await f.read())\n    self._max_size = len(data)\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: t.Type[\"_VT\"] = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    for endpoint, info in data.items():\n        route = route_model(endpoint=endpoint)\n        self.setdefault(route, model.from_payload(info))\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.GamesGenerationCache.load_all","title":"<code>load_all()</code>  <code>async</code>","text":"<p>Load all documents/data from api into the cache. (Endpoints must be cached first)</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load_all(self) -&gt; None:\n    \"\"\"\n    Load all documents/data from api into the cache. (Endpoints must be cached first)\n    \"\"\"\n    if not self._endpoints_cached:\n        raise RuntimeError(\"The endpoints have not been cached yet.\")\n    self._client.logger.info(f\"Loading {self.__class__.__name__}...\")\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: \"models.BaseModel\" = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    self._max_size = len(self._endpoints)\n    for endpoint in self._endpoints.values():\n        route = route_model(endpoint=f\"/{endpoint.url.strip('/').split('/')[-2]}/{str(endpoint)}\")\n        data = self.get(route, None)\n        self.setdefault(route, data if data else model.from_payload(await self._client.http.request(route)))\n    self._client.logger.info(f\"Loaded {self.__class__.__name__}.\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.GamesGenerationCache.load_all_batch","title":"<code>load_all_batch(batch_size=20)</code>  <code>async</code>","text":"<p>Load all documents/data from api into the cache in parallel. (Endpoints must be cached first)</p> <p>Parameters:</p> Name Type Description Default <code>batch_size</code> <code>int</code> <p>The number of documents to load at once. Default is 20 to avoid overwhelming the API.</p> <code>20</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load_all_batch(self, batch_size: int = 20) -&gt; None:\n    \"\"\"\n    Load all documents/data from api into the cache in parallel. (Endpoints must be cached first)\n\n    Parameters\n    ----------\n    batch_size: int\n        The number of documents to load at once. Default is 20 to avoid overwhelming the API.\n    \"\"\"\n    if not self._endpoints_cached:\n        raise RuntimeError(\"The endpoints have not been cached yet.\")\n    self._client.logger.info(f\"Loading {self.__class__.__name__}...\")\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: t.Type[\"_VT\"] = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    self._max_size = len(self._endpoints)\n    endpoints = list(self._endpoints.values())\n    total_endpoints = len(endpoints)\n    for i in range(0, total_endpoints, batch_size):\n        batch = endpoints[i : i + batch_size]\n        tasks = []\n        for endpoint in batch:\n            route = route_model(endpoint=f\"/{endpoint.url.strip('/').split('/')[-2]}/{str(endpoint)}\")\n            data = self.get(route, None)\n            if data:\n                self.setdefault(route, data)\n                self._client.logger.info(f\"Cached {route} - existing data used.\")\n            else:\n                tasks.append(self._fetch_and_cache(route, model))\n        if tasks:\n            await asyncio.gather(*tasks)\n        self._client.logger.debug(\n            f\"Loaded batch {i//batch_size + 1}/{(total_endpoints + batch_size - 1)//batch_size} for {self.__class__.__name__}\"\n        )\n    self._client.logger.info(f\"Loaded {self.__class__.__name__} - {len(self._cache)}/{total_endpoints} items.\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.GamesGenerationCache.load_documents","title":"<code>load_documents(data)</code>","text":"<p>Load documents into the cache.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>List[Dict[str, str]]</code> <p>The data to load.</p> required Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def load_documents(self, data: t.List[t.Dict[str, str]]) -&gt; None:\n    \"\"\"Load documents into the cache.\n\n    Parameters\n    ----------\n    data: typing.List[typing.Dict[str, str]]\n        The data to load.\n    \"\"\"\n    for document in data:\n        self._endpoints[document[\"name\"]] = Endpoint(url=document[\"url\"], id=int(document[\"url\"].split(\"/\")[-2]))\n    self._endpoints_cached = True\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.GamesGenerationCache.save","title":"<code>save(path='.')</code>  <code>async</code>","text":"<p>Save the cache to a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to save the cache to.</p> <code>'.'</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def save(self, path: str = \".\") -&gt; None:\n    \"\"\"Save the cache to a file.\n\n    Parameters\n    ----------\n    path: str\n        The path to save the cache to.\n    \"\"\"\n    pathlib.Path(path).mkdir(parents=True, exist_ok=True)\n    dummy: t.Dict[str, t.Dict[str, t.Any]] = {k.endpoint: v.raw for k, v in self.items()}\n    async with aiofiles.open(pathlib.Path(f\"{path}/{self.__class__.__name__}.json\"), \"w\") as f:\n        await f.write(\"{\\n\")\n        for n, (k, v) in enumerate(dummy.items()):\n            await f.write(\"\\n\".join([4 * \" \" + i for i in f'\"{k}\": {json.dumps(v, indent=4)}'.split(\"\\n\")]))\n            if n != len(dummy) - 1:\n                await f.write(\",\\n\")\n        await f.write(\"\\n}\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.GamesGenerationCache.set_size","title":"<code>set_size(size)</code>","text":"<p>Set the size of the cache.</p> <p>Parameters:</p> Name Type Description Default <code>size</code> <code>int</code> <p>The size of the cache.</p> required Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def set_size(self, size: int) -&gt; None:\n    \"\"\"Set the size of the cache.\n\n    Parameters\n    ----------\n    size: int\n        The size of the cache.\n    \"\"\"\n    self._max_size = size\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.GamesGenerationCache.wait_until_ready","title":"<code>wait_until_ready()</code>  <code>async</code>","text":"<p>Wait until the all the endpoints are cached.</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def wait_until_ready(self) -&gt; None:\n    \"\"\"Wait until the all the endpoints are cached.\"\"\"\n    await self._client.http.connect()\n    while not self._endpoints_cached and self._client.cache_endpoints:\n        await asyncio.sleep(0.5)\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.GamesPokedexCache","title":"<code>GamesPokedexCache(max_size=100)</code>","text":"<p>               Bases: <code>BaseCache['Route', 'models.Pokedex']</code></p> <p>A cache for games pokedexes.</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def __init__(self, max_size: int = 100) -&gt; None:\n    self._max_size = max_size\n    self._cache: t.Dict[_KT, _VT] = {}\n    self._endpoints: t.Dict[str, Endpoint] = {}\n    self._endpoints_cached: bool = False\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.GamesPokedexCache.cache","title":"<code>cache: t.Dict[_KT, _VT]</code>  <code>property</code>","text":"<p>The cache itself.</p> <p>Returns:</p> Type Description <code>Dict[_KT, _VT]</code> <p>The cache itself.</p>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.GamesPokedexCache.endpoints","title":"<code>endpoints: t.Dict[str, Endpoint]</code>  <code>property</code>","text":"<p>The endpoints that are cached.</p> <p>Returns:</p> Type Description <code>Dict[str, Endpoint]</code> <p>The endpoints that are cached.</p>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.GamesPokedexCache.load","title":"<code>load(path='.')</code>  <code>async</code>","text":"<p>Load the cache from a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to load the cache from.</p> <code>'.'</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load(self, path: str = \".\") -&gt; None:\n    \"\"\"Load the cache from a file.\n\n    Parameters\n    ----------\n    path: str\n        The path to load the cache from.\n    \"\"\"\n    async with aiofiles.open(pathlib.Path(f\"{path}/{self.__class__.__name__}.json\"), \"r\") as f:\n        data = json.loads(await f.read())\n    self._max_size = len(data)\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: t.Type[\"_VT\"] = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    for endpoint, info in data.items():\n        route = route_model(endpoint=endpoint)\n        self.setdefault(route, model.from_payload(info))\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.GamesPokedexCache.load_all","title":"<code>load_all()</code>  <code>async</code>","text":"<p>Load all documents/data from api into the cache. (Endpoints must be cached first)</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load_all(self) -&gt; None:\n    \"\"\"\n    Load all documents/data from api into the cache. (Endpoints must be cached first)\n    \"\"\"\n    if not self._endpoints_cached:\n        raise RuntimeError(\"The endpoints have not been cached yet.\")\n    self._client.logger.info(f\"Loading {self.__class__.__name__}...\")\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: \"models.BaseModel\" = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    self._max_size = len(self._endpoints)\n    for endpoint in self._endpoints.values():\n        route = route_model(endpoint=f\"/{endpoint.url.strip('/').split('/')[-2]}/{str(endpoint)}\")\n        data = self.get(route, None)\n        self.setdefault(route, data if data else model.from_payload(await self._client.http.request(route)))\n    self._client.logger.info(f\"Loaded {self.__class__.__name__}.\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.GamesPokedexCache.load_all_batch","title":"<code>load_all_batch(batch_size=20)</code>  <code>async</code>","text":"<p>Load all documents/data from api into the cache in parallel. (Endpoints must be cached first)</p> <p>Parameters:</p> Name Type Description Default <code>batch_size</code> <code>int</code> <p>The number of documents to load at once. Default is 20 to avoid overwhelming the API.</p> <code>20</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load_all_batch(self, batch_size: int = 20) -&gt; None:\n    \"\"\"\n    Load all documents/data from api into the cache in parallel. (Endpoints must be cached first)\n\n    Parameters\n    ----------\n    batch_size: int\n        The number of documents to load at once. Default is 20 to avoid overwhelming the API.\n    \"\"\"\n    if not self._endpoints_cached:\n        raise RuntimeError(\"The endpoints have not been cached yet.\")\n    self._client.logger.info(f\"Loading {self.__class__.__name__}...\")\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: t.Type[\"_VT\"] = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    self._max_size = len(self._endpoints)\n    endpoints = list(self._endpoints.values())\n    total_endpoints = len(endpoints)\n    for i in range(0, total_endpoints, batch_size):\n        batch = endpoints[i : i + batch_size]\n        tasks = []\n        for endpoint in batch:\n            route = route_model(endpoint=f\"/{endpoint.url.strip('/').split('/')[-2]}/{str(endpoint)}\")\n            data = self.get(route, None)\n            if data:\n                self.setdefault(route, data)\n                self._client.logger.info(f\"Cached {route} - existing data used.\")\n            else:\n                tasks.append(self._fetch_and_cache(route, model))\n        if tasks:\n            await asyncio.gather(*tasks)\n        self._client.logger.debug(\n            f\"Loaded batch {i//batch_size + 1}/{(total_endpoints + batch_size - 1)//batch_size} for {self.__class__.__name__}\"\n        )\n    self._client.logger.info(f\"Loaded {self.__class__.__name__} - {len(self._cache)}/{total_endpoints} items.\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.GamesPokedexCache.load_documents","title":"<code>load_documents(data)</code>","text":"<p>Load documents into the cache.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>List[Dict[str, str]]</code> <p>The data to load.</p> required Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def load_documents(self, data: t.List[t.Dict[str, str]]) -&gt; None:\n    \"\"\"Load documents into the cache.\n\n    Parameters\n    ----------\n    data: typing.List[typing.Dict[str, str]]\n        The data to load.\n    \"\"\"\n    for document in data:\n        self._endpoints[document[\"name\"]] = Endpoint(url=document[\"url\"], id=int(document[\"url\"].split(\"/\")[-2]))\n    self._endpoints_cached = True\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.GamesPokedexCache.save","title":"<code>save(path='.')</code>  <code>async</code>","text":"<p>Save the cache to a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to save the cache to.</p> <code>'.'</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def save(self, path: str = \".\") -&gt; None:\n    \"\"\"Save the cache to a file.\n\n    Parameters\n    ----------\n    path: str\n        The path to save the cache to.\n    \"\"\"\n    pathlib.Path(path).mkdir(parents=True, exist_ok=True)\n    dummy: t.Dict[str, t.Dict[str, t.Any]] = {k.endpoint: v.raw for k, v in self.items()}\n    async with aiofiles.open(pathlib.Path(f\"{path}/{self.__class__.__name__}.json\"), \"w\") as f:\n        await f.write(\"{\\n\")\n        for n, (k, v) in enumerate(dummy.items()):\n            await f.write(\"\\n\".join([4 * \" \" + i for i in f'\"{k}\": {json.dumps(v, indent=4)}'.split(\"\\n\")]))\n            if n != len(dummy) - 1:\n                await f.write(\",\\n\")\n        await f.write(\"\\n}\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.GamesPokedexCache.set_size","title":"<code>set_size(size)</code>","text":"<p>Set the size of the cache.</p> <p>Parameters:</p> Name Type Description Default <code>size</code> <code>int</code> <p>The size of the cache.</p> required Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def set_size(self, size: int) -&gt; None:\n    \"\"\"Set the size of the cache.\n\n    Parameters\n    ----------\n    size: int\n        The size of the cache.\n    \"\"\"\n    self._max_size = size\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.GamesPokedexCache.wait_until_ready","title":"<code>wait_until_ready()</code>  <code>async</code>","text":"<p>Wait until the all the endpoints are cached.</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def wait_until_ready(self) -&gt; None:\n    \"\"\"Wait until the all the endpoints are cached.\"\"\"\n    await self._client.http.connect()\n    while not self._endpoints_cached and self._client.cache_endpoints:\n        await asyncio.sleep(0.5)\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.GamesVersionCache","title":"<code>GamesVersionCache(max_size=100)</code>","text":"<p>               Bases: <code>BaseCache['Route', 'models.Version']</code></p> <p>A cache for games versions.</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def __init__(self, max_size: int = 100) -&gt; None:\n    self._max_size = max_size\n    self._cache: t.Dict[_KT, _VT] = {}\n    self._endpoints: t.Dict[str, Endpoint] = {}\n    self._endpoints_cached: bool = False\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.GamesVersionCache.cache","title":"<code>cache: t.Dict[_KT, _VT]</code>  <code>property</code>","text":"<p>The cache itself.</p> <p>Returns:</p> Type Description <code>Dict[_KT, _VT]</code> <p>The cache itself.</p>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.GamesVersionCache.endpoints","title":"<code>endpoints: t.Dict[str, Endpoint]</code>  <code>property</code>","text":"<p>The endpoints that are cached.</p> <p>Returns:</p> Type Description <code>Dict[str, Endpoint]</code> <p>The endpoints that are cached.</p>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.GamesVersionCache.load","title":"<code>load(path='.')</code>  <code>async</code>","text":"<p>Load the cache from a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to load the cache from.</p> <code>'.'</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load(self, path: str = \".\") -&gt; None:\n    \"\"\"Load the cache from a file.\n\n    Parameters\n    ----------\n    path: str\n        The path to load the cache from.\n    \"\"\"\n    async with aiofiles.open(pathlib.Path(f\"{path}/{self.__class__.__name__}.json\"), \"r\") as f:\n        data = json.loads(await f.read())\n    self._max_size = len(data)\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: t.Type[\"_VT\"] = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    for endpoint, info in data.items():\n        route = route_model(endpoint=endpoint)\n        self.setdefault(route, model.from_payload(info))\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.GamesVersionCache.load_all","title":"<code>load_all()</code>  <code>async</code>","text":"<p>Load all documents/data from api into the cache. (Endpoints must be cached first)</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load_all(self) -&gt; None:\n    \"\"\"\n    Load all documents/data from api into the cache. (Endpoints must be cached first)\n    \"\"\"\n    if not self._endpoints_cached:\n        raise RuntimeError(\"The endpoints have not been cached yet.\")\n    self._client.logger.info(f\"Loading {self.__class__.__name__}...\")\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: \"models.BaseModel\" = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    self._max_size = len(self._endpoints)\n    for endpoint in self._endpoints.values():\n        route = route_model(endpoint=f\"/{endpoint.url.strip('/').split('/')[-2]}/{str(endpoint)}\")\n        data = self.get(route, None)\n        self.setdefault(route, data if data else model.from_payload(await self._client.http.request(route)))\n    self._client.logger.info(f\"Loaded {self.__class__.__name__}.\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.GamesVersionCache.load_all_batch","title":"<code>load_all_batch(batch_size=20)</code>  <code>async</code>","text":"<p>Load all documents/data from api into the cache in parallel. (Endpoints must be cached first)</p> <p>Parameters:</p> Name Type Description Default <code>batch_size</code> <code>int</code> <p>The number of documents to load at once. Default is 20 to avoid overwhelming the API.</p> <code>20</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load_all_batch(self, batch_size: int = 20) -&gt; None:\n    \"\"\"\n    Load all documents/data from api into the cache in parallel. (Endpoints must be cached first)\n\n    Parameters\n    ----------\n    batch_size: int\n        The number of documents to load at once. Default is 20 to avoid overwhelming the API.\n    \"\"\"\n    if not self._endpoints_cached:\n        raise RuntimeError(\"The endpoints have not been cached yet.\")\n    self._client.logger.info(f\"Loading {self.__class__.__name__}...\")\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: t.Type[\"_VT\"] = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    self._max_size = len(self._endpoints)\n    endpoints = list(self._endpoints.values())\n    total_endpoints = len(endpoints)\n    for i in range(0, total_endpoints, batch_size):\n        batch = endpoints[i : i + batch_size]\n        tasks = []\n        for endpoint in batch:\n            route = route_model(endpoint=f\"/{endpoint.url.strip('/').split('/')[-2]}/{str(endpoint)}\")\n            data = self.get(route, None)\n            if data:\n                self.setdefault(route, data)\n                self._client.logger.info(f\"Cached {route} - existing data used.\")\n            else:\n                tasks.append(self._fetch_and_cache(route, model))\n        if tasks:\n            await asyncio.gather(*tasks)\n        self._client.logger.debug(\n            f\"Loaded batch {i//batch_size + 1}/{(total_endpoints + batch_size - 1)//batch_size} for {self.__class__.__name__}\"\n        )\n    self._client.logger.info(f\"Loaded {self.__class__.__name__} - {len(self._cache)}/{total_endpoints} items.\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.GamesVersionCache.load_documents","title":"<code>load_documents(data)</code>","text":"<p>Load documents into the cache.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>List[Dict[str, str]]</code> <p>The data to load.</p> required Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def load_documents(self, data: t.List[t.Dict[str, str]]) -&gt; None:\n    \"\"\"Load documents into the cache.\n\n    Parameters\n    ----------\n    data: typing.List[typing.Dict[str, str]]\n        The data to load.\n    \"\"\"\n    for document in data:\n        self._endpoints[document[\"name\"]] = Endpoint(url=document[\"url\"], id=int(document[\"url\"].split(\"/\")[-2]))\n    self._endpoints_cached = True\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.GamesVersionCache.save","title":"<code>save(path='.')</code>  <code>async</code>","text":"<p>Save the cache to a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to save the cache to.</p> <code>'.'</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def save(self, path: str = \".\") -&gt; None:\n    \"\"\"Save the cache to a file.\n\n    Parameters\n    ----------\n    path: str\n        The path to save the cache to.\n    \"\"\"\n    pathlib.Path(path).mkdir(parents=True, exist_ok=True)\n    dummy: t.Dict[str, t.Dict[str, t.Any]] = {k.endpoint: v.raw for k, v in self.items()}\n    async with aiofiles.open(pathlib.Path(f\"{path}/{self.__class__.__name__}.json\"), \"w\") as f:\n        await f.write(\"{\\n\")\n        for n, (k, v) in enumerate(dummy.items()):\n            await f.write(\"\\n\".join([4 * \" \" + i for i in f'\"{k}\": {json.dumps(v, indent=4)}'.split(\"\\n\")]))\n            if n != len(dummy) - 1:\n                await f.write(\",\\n\")\n        await f.write(\"\\n}\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.GamesVersionCache.set_size","title":"<code>set_size(size)</code>","text":"<p>Set the size of the cache.</p> <p>Parameters:</p> Name Type Description Default <code>size</code> <code>int</code> <p>The size of the cache.</p> required Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def set_size(self, size: int) -&gt; None:\n    \"\"\"Set the size of the cache.\n\n    Parameters\n    ----------\n    size: int\n        The size of the cache.\n    \"\"\"\n    self._max_size = size\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.GamesVersionCache.wait_until_ready","title":"<code>wait_until_ready()</code>  <code>async</code>","text":"<p>Wait until the all the endpoints are cached.</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def wait_until_ready(self) -&gt; None:\n    \"\"\"Wait until the all the endpoints are cached.\"\"\"\n    await self._client.http.connect()\n    while not self._endpoints_cached and self._client.cache_endpoints:\n        await asyncio.sleep(0.5)\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.GamesVersionGroupCache","title":"<code>GamesVersionGroupCache(max_size=100)</code>","text":"<p>               Bases: <code>BaseCache['Route', 'models.VersionGroup']</code></p> <p>A cache for games version groups.</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def __init__(self, max_size: int = 100) -&gt; None:\n    self._max_size = max_size\n    self._cache: t.Dict[_KT, _VT] = {}\n    self._endpoints: t.Dict[str, Endpoint] = {}\n    self._endpoints_cached: bool = False\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.GamesVersionGroupCache.cache","title":"<code>cache: t.Dict[_KT, _VT]</code>  <code>property</code>","text":"<p>The cache itself.</p> <p>Returns:</p> Type Description <code>Dict[_KT, _VT]</code> <p>The cache itself.</p>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.GamesVersionGroupCache.endpoints","title":"<code>endpoints: t.Dict[str, Endpoint]</code>  <code>property</code>","text":"<p>The endpoints that are cached.</p> <p>Returns:</p> Type Description <code>Dict[str, Endpoint]</code> <p>The endpoints that are cached.</p>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.GamesVersionGroupCache.load","title":"<code>load(path='.')</code>  <code>async</code>","text":"<p>Load the cache from a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to load the cache from.</p> <code>'.'</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load(self, path: str = \".\") -&gt; None:\n    \"\"\"Load the cache from a file.\n\n    Parameters\n    ----------\n    path: str\n        The path to load the cache from.\n    \"\"\"\n    async with aiofiles.open(pathlib.Path(f\"{path}/{self.__class__.__name__}.json\"), \"r\") as f:\n        data = json.loads(await f.read())\n    self._max_size = len(data)\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: t.Type[\"_VT\"] = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    for endpoint, info in data.items():\n        route = route_model(endpoint=endpoint)\n        self.setdefault(route, model.from_payload(info))\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.GamesVersionGroupCache.load_all","title":"<code>load_all()</code>  <code>async</code>","text":"<p>Load all documents/data from api into the cache. (Endpoints must be cached first)</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load_all(self) -&gt; None:\n    \"\"\"\n    Load all documents/data from api into the cache. (Endpoints must be cached first)\n    \"\"\"\n    if not self._endpoints_cached:\n        raise RuntimeError(\"The endpoints have not been cached yet.\")\n    self._client.logger.info(f\"Loading {self.__class__.__name__}...\")\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: \"models.BaseModel\" = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    self._max_size = len(self._endpoints)\n    for endpoint in self._endpoints.values():\n        route = route_model(endpoint=f\"/{endpoint.url.strip('/').split('/')[-2]}/{str(endpoint)}\")\n        data = self.get(route, None)\n        self.setdefault(route, data if data else model.from_payload(await self._client.http.request(route)))\n    self._client.logger.info(f\"Loaded {self.__class__.__name__}.\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.GamesVersionGroupCache.load_all_batch","title":"<code>load_all_batch(batch_size=20)</code>  <code>async</code>","text":"<p>Load all documents/data from api into the cache in parallel. (Endpoints must be cached first)</p> <p>Parameters:</p> Name Type Description Default <code>batch_size</code> <code>int</code> <p>The number of documents to load at once. Default is 20 to avoid overwhelming the API.</p> <code>20</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load_all_batch(self, batch_size: int = 20) -&gt; None:\n    \"\"\"\n    Load all documents/data from api into the cache in parallel. (Endpoints must be cached first)\n\n    Parameters\n    ----------\n    batch_size: int\n        The number of documents to load at once. Default is 20 to avoid overwhelming the API.\n    \"\"\"\n    if not self._endpoints_cached:\n        raise RuntimeError(\"The endpoints have not been cached yet.\")\n    self._client.logger.info(f\"Loading {self.__class__.__name__}...\")\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: t.Type[\"_VT\"] = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    self._max_size = len(self._endpoints)\n    endpoints = list(self._endpoints.values())\n    total_endpoints = len(endpoints)\n    for i in range(0, total_endpoints, batch_size):\n        batch = endpoints[i : i + batch_size]\n        tasks = []\n        for endpoint in batch:\n            route = route_model(endpoint=f\"/{endpoint.url.strip('/').split('/')[-2]}/{str(endpoint)}\")\n            data = self.get(route, None)\n            if data:\n                self.setdefault(route, data)\n                self._client.logger.info(f\"Cached {route} - existing data used.\")\n            else:\n                tasks.append(self._fetch_and_cache(route, model))\n        if tasks:\n            await asyncio.gather(*tasks)\n        self._client.logger.debug(\n            f\"Loaded batch {i//batch_size + 1}/{(total_endpoints + batch_size - 1)//batch_size} for {self.__class__.__name__}\"\n        )\n    self._client.logger.info(f\"Loaded {self.__class__.__name__} - {len(self._cache)}/{total_endpoints} items.\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.GamesVersionGroupCache.load_documents","title":"<code>load_documents(data)</code>","text":"<p>Load documents into the cache.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>List[Dict[str, str]]</code> <p>The data to load.</p> required Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def load_documents(self, data: t.List[t.Dict[str, str]]) -&gt; None:\n    \"\"\"Load documents into the cache.\n\n    Parameters\n    ----------\n    data: typing.List[typing.Dict[str, str]]\n        The data to load.\n    \"\"\"\n    for document in data:\n        self._endpoints[document[\"name\"]] = Endpoint(url=document[\"url\"], id=int(document[\"url\"].split(\"/\")[-2]))\n    self._endpoints_cached = True\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.GamesVersionGroupCache.save","title":"<code>save(path='.')</code>  <code>async</code>","text":"<p>Save the cache to a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to save the cache to.</p> <code>'.'</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def save(self, path: str = \".\") -&gt; None:\n    \"\"\"Save the cache to a file.\n\n    Parameters\n    ----------\n    path: str\n        The path to save the cache to.\n    \"\"\"\n    pathlib.Path(path).mkdir(parents=True, exist_ok=True)\n    dummy: t.Dict[str, t.Dict[str, t.Any]] = {k.endpoint: v.raw for k, v in self.items()}\n    async with aiofiles.open(pathlib.Path(f\"{path}/{self.__class__.__name__}.json\"), \"w\") as f:\n        await f.write(\"{\\n\")\n        for n, (k, v) in enumerate(dummy.items()):\n            await f.write(\"\\n\".join([4 * \" \" + i for i in f'\"{k}\": {json.dumps(v, indent=4)}'.split(\"\\n\")]))\n            if n != len(dummy) - 1:\n                await f.write(\",\\n\")\n        await f.write(\"\\n}\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.GamesVersionGroupCache.set_size","title":"<code>set_size(size)</code>","text":"<p>Set the size of the cache.</p> <p>Parameters:</p> Name Type Description Default <code>size</code> <code>int</code> <p>The size of the cache.</p> required Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def set_size(self, size: int) -&gt; None:\n    \"\"\"Set the size of the cache.\n\n    Parameters\n    ----------\n    size: int\n        The size of the cache.\n    \"\"\"\n    self._max_size = size\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.GamesVersionGroupCache.wait_until_ready","title":"<code>wait_until_ready()</code>  <code>async</code>","text":"<p>Wait until the all the endpoints are cached.</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def wait_until_ready(self) -&gt; None:\n    \"\"\"Wait until the all the endpoints are cached.\"\"\"\n    await self._client.http.connect()\n    while not self._endpoints_cached and self._client.cache_endpoints:\n        await asyncio.sleep(0.5)\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.GenderCache","title":"<code>GenderCache(max_size=100)</code>","text":"<p>               Bases: <code>BaseCache['Route', 'models.Gender']</code></p> <p>A cache for genders.</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def __init__(self, max_size: int = 100) -&gt; None:\n    self._max_size = max_size\n    self._cache: t.Dict[_KT, _VT] = {}\n    self._endpoints: t.Dict[str, Endpoint] = {}\n    self._endpoints_cached: bool = False\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.GenderCache.cache","title":"<code>cache: t.Dict[_KT, _VT]</code>  <code>property</code>","text":"<p>The cache itself.</p> <p>Returns:</p> Type Description <code>Dict[_KT, _VT]</code> <p>The cache itself.</p>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.GenderCache.endpoints","title":"<code>endpoints: t.Dict[str, Endpoint]</code>  <code>property</code>","text":"<p>The endpoints that are cached.</p> <p>Returns:</p> Type Description <code>Dict[str, Endpoint]</code> <p>The endpoints that are cached.</p>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.GenderCache.load","title":"<code>load(path='.')</code>  <code>async</code>","text":"<p>Load the cache from a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to load the cache from.</p> <code>'.'</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load(self, path: str = \".\") -&gt; None:\n    \"\"\"Load the cache from a file.\n\n    Parameters\n    ----------\n    path: str\n        The path to load the cache from.\n    \"\"\"\n    async with aiofiles.open(pathlib.Path(f\"{path}/{self.__class__.__name__}.json\"), \"r\") as f:\n        data = json.loads(await f.read())\n    self._max_size = len(data)\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: t.Type[\"_VT\"] = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    for endpoint, info in data.items():\n        route = route_model(endpoint=endpoint)\n        self.setdefault(route, model.from_payload(info))\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.GenderCache.load_all","title":"<code>load_all()</code>  <code>async</code>","text":"<p>Load all documents/data from api into the cache. (Endpoints must be cached first)</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load_all(self) -&gt; None:\n    \"\"\"\n    Load all documents/data from api into the cache. (Endpoints must be cached first)\n    \"\"\"\n    if not self._endpoints_cached:\n        raise RuntimeError(\"The endpoints have not been cached yet.\")\n    self._client.logger.info(f\"Loading {self.__class__.__name__}...\")\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: \"models.BaseModel\" = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    self._max_size = len(self._endpoints)\n    for endpoint in self._endpoints.values():\n        route = route_model(endpoint=f\"/{endpoint.url.strip('/').split('/')[-2]}/{str(endpoint)}\")\n        data = self.get(route, None)\n        self.setdefault(route, data if data else model.from_payload(await self._client.http.request(route)))\n    self._client.logger.info(f\"Loaded {self.__class__.__name__}.\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.GenderCache.load_all_batch","title":"<code>load_all_batch(batch_size=20)</code>  <code>async</code>","text":"<p>Load all documents/data from api into the cache in parallel. (Endpoints must be cached first)</p> <p>Parameters:</p> Name Type Description Default <code>batch_size</code> <code>int</code> <p>The number of documents to load at once. Default is 20 to avoid overwhelming the API.</p> <code>20</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load_all_batch(self, batch_size: int = 20) -&gt; None:\n    \"\"\"\n    Load all documents/data from api into the cache in parallel. (Endpoints must be cached first)\n\n    Parameters\n    ----------\n    batch_size: int\n        The number of documents to load at once. Default is 20 to avoid overwhelming the API.\n    \"\"\"\n    if not self._endpoints_cached:\n        raise RuntimeError(\"The endpoints have not been cached yet.\")\n    self._client.logger.info(f\"Loading {self.__class__.__name__}...\")\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: t.Type[\"_VT\"] = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    self._max_size = len(self._endpoints)\n    endpoints = list(self._endpoints.values())\n    total_endpoints = len(endpoints)\n    for i in range(0, total_endpoints, batch_size):\n        batch = endpoints[i : i + batch_size]\n        tasks = []\n        for endpoint in batch:\n            route = route_model(endpoint=f\"/{endpoint.url.strip('/').split('/')[-2]}/{str(endpoint)}\")\n            data = self.get(route, None)\n            if data:\n                self.setdefault(route, data)\n                self._client.logger.info(f\"Cached {route} - existing data used.\")\n            else:\n                tasks.append(self._fetch_and_cache(route, model))\n        if tasks:\n            await asyncio.gather(*tasks)\n        self._client.logger.debug(\n            f\"Loaded batch {i//batch_size + 1}/{(total_endpoints + batch_size - 1)//batch_size} for {self.__class__.__name__}\"\n        )\n    self._client.logger.info(f\"Loaded {self.__class__.__name__} - {len(self._cache)}/{total_endpoints} items.\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.GenderCache.load_documents","title":"<code>load_documents(data)</code>","text":"<p>Load documents into the cache.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>List[Dict[str, str]]</code> <p>The data to load.</p> required Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def load_documents(self, data: t.List[t.Dict[str, str]]) -&gt; None:\n    \"\"\"Load documents into the cache.\n\n    Parameters\n    ----------\n    data: typing.List[typing.Dict[str, str]]\n        The data to load.\n    \"\"\"\n    for document in data:\n        self._endpoints[document[\"name\"]] = Endpoint(url=document[\"url\"], id=int(document[\"url\"].split(\"/\")[-2]))\n    self._endpoints_cached = True\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.GenderCache.save","title":"<code>save(path='.')</code>  <code>async</code>","text":"<p>Save the cache to a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to save the cache to.</p> <code>'.'</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def save(self, path: str = \".\") -&gt; None:\n    \"\"\"Save the cache to a file.\n\n    Parameters\n    ----------\n    path: str\n        The path to save the cache to.\n    \"\"\"\n    pathlib.Path(path).mkdir(parents=True, exist_ok=True)\n    dummy: t.Dict[str, t.Dict[str, t.Any]] = {k.endpoint: v.raw for k, v in self.items()}\n    async with aiofiles.open(pathlib.Path(f\"{path}/{self.__class__.__name__}.json\"), \"w\") as f:\n        await f.write(\"{\\n\")\n        for n, (k, v) in enumerate(dummy.items()):\n            await f.write(\"\\n\".join([4 * \" \" + i for i in f'\"{k}\": {json.dumps(v, indent=4)}'.split(\"\\n\")]))\n            if n != len(dummy) - 1:\n                await f.write(\",\\n\")\n        await f.write(\"\\n}\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.GenderCache.set_size","title":"<code>set_size(size)</code>","text":"<p>Set the size of the cache.</p> <p>Parameters:</p> Name Type Description Default <code>size</code> <code>int</code> <p>The size of the cache.</p> required Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def set_size(self, size: int) -&gt; None:\n    \"\"\"Set the size of the cache.\n\n    Parameters\n    ----------\n    size: int\n        The size of the cache.\n    \"\"\"\n    self._max_size = size\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.GenderCache.wait_until_ready","title":"<code>wait_until_ready()</code>  <code>async</code>","text":"<p>Wait until the all the endpoints are cached.</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def wait_until_ready(self) -&gt; None:\n    \"\"\"Wait until the all the endpoints are cached.\"\"\"\n    await self._client.http.connect()\n    while not self._endpoints_cached and self._client.cache_endpoints:\n        await asyncio.sleep(0.5)\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.GrowthRateCache","title":"<code>GrowthRateCache(max_size=100)</code>","text":"<p>               Bases: <code>BaseCache['Route', 'models.GrowthRate']</code></p> <p>A cache for growth rates.</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def __init__(self, max_size: int = 100) -&gt; None:\n    self._max_size = max_size\n    self._cache: t.Dict[_KT, _VT] = {}\n    self._endpoints: t.Dict[str, Endpoint] = {}\n    self._endpoints_cached: bool = False\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.GrowthRateCache.cache","title":"<code>cache: t.Dict[_KT, _VT]</code>  <code>property</code>","text":"<p>The cache itself.</p> <p>Returns:</p> Type Description <code>Dict[_KT, _VT]</code> <p>The cache itself.</p>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.GrowthRateCache.endpoints","title":"<code>endpoints: t.Dict[str, Endpoint]</code>  <code>property</code>","text":"<p>The endpoints that are cached.</p> <p>Returns:</p> Type Description <code>Dict[str, Endpoint]</code> <p>The endpoints that are cached.</p>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.GrowthRateCache.load","title":"<code>load(path='.')</code>  <code>async</code>","text":"<p>Load the cache from a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to load the cache from.</p> <code>'.'</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load(self, path: str = \".\") -&gt; None:\n    \"\"\"Load the cache from a file.\n\n    Parameters\n    ----------\n    path: str\n        The path to load the cache from.\n    \"\"\"\n    async with aiofiles.open(pathlib.Path(f\"{path}/{self.__class__.__name__}.json\"), \"r\") as f:\n        data = json.loads(await f.read())\n    self._max_size = len(data)\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: t.Type[\"_VT\"] = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    for endpoint, info in data.items():\n        route = route_model(endpoint=endpoint)\n        self.setdefault(route, model.from_payload(info))\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.GrowthRateCache.load_all","title":"<code>load_all()</code>  <code>async</code>","text":"<p>Load all documents/data from api into the cache. (Endpoints must be cached first)</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load_all(self) -&gt; None:\n    \"\"\"\n    Load all documents/data from api into the cache. (Endpoints must be cached first)\n    \"\"\"\n    if not self._endpoints_cached:\n        raise RuntimeError(\"The endpoints have not been cached yet.\")\n    self._client.logger.info(f\"Loading {self.__class__.__name__}...\")\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: \"models.BaseModel\" = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    self._max_size = len(self._endpoints)\n    for endpoint in self._endpoints.values():\n        route = route_model(endpoint=f\"/{endpoint.url.strip('/').split('/')[-2]}/{str(endpoint)}\")\n        data = self.get(route, None)\n        self.setdefault(route, data if data else model.from_payload(await self._client.http.request(route)))\n    self._client.logger.info(f\"Loaded {self.__class__.__name__}.\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.GrowthRateCache.load_all_batch","title":"<code>load_all_batch(batch_size=20)</code>  <code>async</code>","text":"<p>Load all documents/data from api into the cache in parallel. (Endpoints must be cached first)</p> <p>Parameters:</p> Name Type Description Default <code>batch_size</code> <code>int</code> <p>The number of documents to load at once. Default is 20 to avoid overwhelming the API.</p> <code>20</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load_all_batch(self, batch_size: int = 20) -&gt; None:\n    \"\"\"\n    Load all documents/data from api into the cache in parallel. (Endpoints must be cached first)\n\n    Parameters\n    ----------\n    batch_size: int\n        The number of documents to load at once. Default is 20 to avoid overwhelming the API.\n    \"\"\"\n    if not self._endpoints_cached:\n        raise RuntimeError(\"The endpoints have not been cached yet.\")\n    self._client.logger.info(f\"Loading {self.__class__.__name__}...\")\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: t.Type[\"_VT\"] = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    self._max_size = len(self._endpoints)\n    endpoints = list(self._endpoints.values())\n    total_endpoints = len(endpoints)\n    for i in range(0, total_endpoints, batch_size):\n        batch = endpoints[i : i + batch_size]\n        tasks = []\n        for endpoint in batch:\n            route = route_model(endpoint=f\"/{endpoint.url.strip('/').split('/')[-2]}/{str(endpoint)}\")\n            data = self.get(route, None)\n            if data:\n                self.setdefault(route, data)\n                self._client.logger.info(f\"Cached {route} - existing data used.\")\n            else:\n                tasks.append(self._fetch_and_cache(route, model))\n        if tasks:\n            await asyncio.gather(*tasks)\n        self._client.logger.debug(\n            f\"Loaded batch {i//batch_size + 1}/{(total_endpoints + batch_size - 1)//batch_size} for {self.__class__.__name__}\"\n        )\n    self._client.logger.info(f\"Loaded {self.__class__.__name__} - {len(self._cache)}/{total_endpoints} items.\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.GrowthRateCache.load_documents","title":"<code>load_documents(data)</code>","text":"<p>Load documents into the cache.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>List[Dict[str, str]]</code> <p>The data to load.</p> required Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def load_documents(self, data: t.List[t.Dict[str, str]]) -&gt; None:\n    \"\"\"Load documents into the cache.\n\n    Parameters\n    ----------\n    data: typing.List[typing.Dict[str, str]]\n        The data to load.\n    \"\"\"\n    for document in data:\n        self._endpoints[document[\"name\"]] = Endpoint(url=document[\"url\"], id=int(document[\"url\"].split(\"/\")[-2]))\n    self._endpoints_cached = True\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.GrowthRateCache.save","title":"<code>save(path='.')</code>  <code>async</code>","text":"<p>Save the cache to a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to save the cache to.</p> <code>'.'</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def save(self, path: str = \".\") -&gt; None:\n    \"\"\"Save the cache to a file.\n\n    Parameters\n    ----------\n    path: str\n        The path to save the cache to.\n    \"\"\"\n    pathlib.Path(path).mkdir(parents=True, exist_ok=True)\n    dummy: t.Dict[str, t.Dict[str, t.Any]] = {k.endpoint: v.raw for k, v in self.items()}\n    async with aiofiles.open(pathlib.Path(f\"{path}/{self.__class__.__name__}.json\"), \"w\") as f:\n        await f.write(\"{\\n\")\n        for n, (k, v) in enumerate(dummy.items()):\n            await f.write(\"\\n\".join([4 * \" \" + i for i in f'\"{k}\": {json.dumps(v, indent=4)}'.split(\"\\n\")]))\n            if n != len(dummy) - 1:\n                await f.write(\",\\n\")\n        await f.write(\"\\n}\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.GrowthRateCache.set_size","title":"<code>set_size(size)</code>","text":"<p>Set the size of the cache.</p> <p>Parameters:</p> Name Type Description Default <code>size</code> <code>int</code> <p>The size of the cache.</p> required Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def set_size(self, size: int) -&gt; None:\n    \"\"\"Set the size of the cache.\n\n    Parameters\n    ----------\n    size: int\n        The size of the cache.\n    \"\"\"\n    self._max_size = size\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.GrowthRateCache.wait_until_ready","title":"<code>wait_until_ready()</code>  <code>async</code>","text":"<p>Wait until the all the endpoints are cached.</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def wait_until_ready(self) -&gt; None:\n    \"\"\"Wait until the all the endpoints are cached.\"\"\"\n    await self._client.http.connect()\n    while not self._endpoints_cached and self._client.cache_endpoints:\n        await asyncio.sleep(0.5)\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.ItemAttributeCache","title":"<code>ItemAttributeCache(max_size=100)</code>","text":"<p>               Bases: <code>BaseCache['Route', 'models.ItemAttribute']</code></p> <p>A cache for item attributes.</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def __init__(self, max_size: int = 100) -&gt; None:\n    self._max_size = max_size\n    self._cache: t.Dict[_KT, _VT] = {}\n    self._endpoints: t.Dict[str, Endpoint] = {}\n    self._endpoints_cached: bool = False\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.ItemAttributeCache.cache","title":"<code>cache: t.Dict[_KT, _VT]</code>  <code>property</code>","text":"<p>The cache itself.</p> <p>Returns:</p> Type Description <code>Dict[_KT, _VT]</code> <p>The cache itself.</p>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.ItemAttributeCache.endpoints","title":"<code>endpoints: t.Dict[str, Endpoint]</code>  <code>property</code>","text":"<p>The endpoints that are cached.</p> <p>Returns:</p> Type Description <code>Dict[str, Endpoint]</code> <p>The endpoints that are cached.</p>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.ItemAttributeCache.load","title":"<code>load(path='.')</code>  <code>async</code>","text":"<p>Load the cache from a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to load the cache from.</p> <code>'.'</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load(self, path: str = \".\") -&gt; None:\n    \"\"\"Load the cache from a file.\n\n    Parameters\n    ----------\n    path: str\n        The path to load the cache from.\n    \"\"\"\n    async with aiofiles.open(pathlib.Path(f\"{path}/{self.__class__.__name__}.json\"), \"r\") as f:\n        data = json.loads(await f.read())\n    self._max_size = len(data)\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: t.Type[\"_VT\"] = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    for endpoint, info in data.items():\n        route = route_model(endpoint=endpoint)\n        self.setdefault(route, model.from_payload(info))\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.ItemAttributeCache.load_all","title":"<code>load_all()</code>  <code>async</code>","text":"<p>Load all documents/data from api into the cache. (Endpoints must be cached first)</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load_all(self) -&gt; None:\n    \"\"\"\n    Load all documents/data from api into the cache. (Endpoints must be cached first)\n    \"\"\"\n    if not self._endpoints_cached:\n        raise RuntimeError(\"The endpoints have not been cached yet.\")\n    self._client.logger.info(f\"Loading {self.__class__.__name__}...\")\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: \"models.BaseModel\" = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    self._max_size = len(self._endpoints)\n    for endpoint in self._endpoints.values():\n        route = route_model(endpoint=f\"/{endpoint.url.strip('/').split('/')[-2]}/{str(endpoint)}\")\n        data = self.get(route, None)\n        self.setdefault(route, data if data else model.from_payload(await self._client.http.request(route)))\n    self._client.logger.info(f\"Loaded {self.__class__.__name__}.\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.ItemAttributeCache.load_all_batch","title":"<code>load_all_batch(batch_size=20)</code>  <code>async</code>","text":"<p>Load all documents/data from api into the cache in parallel. (Endpoints must be cached first)</p> <p>Parameters:</p> Name Type Description Default <code>batch_size</code> <code>int</code> <p>The number of documents to load at once. Default is 20 to avoid overwhelming the API.</p> <code>20</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load_all_batch(self, batch_size: int = 20) -&gt; None:\n    \"\"\"\n    Load all documents/data from api into the cache in parallel. (Endpoints must be cached first)\n\n    Parameters\n    ----------\n    batch_size: int\n        The number of documents to load at once. Default is 20 to avoid overwhelming the API.\n    \"\"\"\n    if not self._endpoints_cached:\n        raise RuntimeError(\"The endpoints have not been cached yet.\")\n    self._client.logger.info(f\"Loading {self.__class__.__name__}...\")\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: t.Type[\"_VT\"] = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    self._max_size = len(self._endpoints)\n    endpoints = list(self._endpoints.values())\n    total_endpoints = len(endpoints)\n    for i in range(0, total_endpoints, batch_size):\n        batch = endpoints[i : i + batch_size]\n        tasks = []\n        for endpoint in batch:\n            route = route_model(endpoint=f\"/{endpoint.url.strip('/').split('/')[-2]}/{str(endpoint)}\")\n            data = self.get(route, None)\n            if data:\n                self.setdefault(route, data)\n                self._client.logger.info(f\"Cached {route} - existing data used.\")\n            else:\n                tasks.append(self._fetch_and_cache(route, model))\n        if tasks:\n            await asyncio.gather(*tasks)\n        self._client.logger.debug(\n            f\"Loaded batch {i//batch_size + 1}/{(total_endpoints + batch_size - 1)//batch_size} for {self.__class__.__name__}\"\n        )\n    self._client.logger.info(f\"Loaded {self.__class__.__name__} - {len(self._cache)}/{total_endpoints} items.\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.ItemAttributeCache.load_documents","title":"<code>load_documents(data)</code>","text":"<p>Load documents into the cache.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>List[Dict[str, str]]</code> <p>The data to load.</p> required Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def load_documents(self, data: t.List[t.Dict[str, str]]) -&gt; None:\n    \"\"\"Load documents into the cache.\n\n    Parameters\n    ----------\n    data: typing.List[typing.Dict[str, str]]\n        The data to load.\n    \"\"\"\n    for document in data:\n        self._endpoints[document[\"name\"]] = Endpoint(url=document[\"url\"], id=int(document[\"url\"].split(\"/\")[-2]))\n    self._endpoints_cached = True\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.ItemAttributeCache.save","title":"<code>save(path='.')</code>  <code>async</code>","text":"<p>Save the cache to a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to save the cache to.</p> <code>'.'</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def save(self, path: str = \".\") -&gt; None:\n    \"\"\"Save the cache to a file.\n\n    Parameters\n    ----------\n    path: str\n        The path to save the cache to.\n    \"\"\"\n    pathlib.Path(path).mkdir(parents=True, exist_ok=True)\n    dummy: t.Dict[str, t.Dict[str, t.Any]] = {k.endpoint: v.raw for k, v in self.items()}\n    async with aiofiles.open(pathlib.Path(f\"{path}/{self.__class__.__name__}.json\"), \"w\") as f:\n        await f.write(\"{\\n\")\n        for n, (k, v) in enumerate(dummy.items()):\n            await f.write(\"\\n\".join([4 * \" \" + i for i in f'\"{k}\": {json.dumps(v, indent=4)}'.split(\"\\n\")]))\n            if n != len(dummy) - 1:\n                await f.write(\",\\n\")\n        await f.write(\"\\n}\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.ItemAttributeCache.set_size","title":"<code>set_size(size)</code>","text":"<p>Set the size of the cache.</p> <p>Parameters:</p> Name Type Description Default <code>size</code> <code>int</code> <p>The size of the cache.</p> required Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def set_size(self, size: int) -&gt; None:\n    \"\"\"Set the size of the cache.\n\n    Parameters\n    ----------\n    size: int\n        The size of the cache.\n    \"\"\"\n    self._max_size = size\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.ItemAttributeCache.wait_until_ready","title":"<code>wait_until_ready()</code>  <code>async</code>","text":"<p>Wait until the all the endpoints are cached.</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def wait_until_ready(self) -&gt; None:\n    \"\"\"Wait until the all the endpoints are cached.\"\"\"\n    await self._client.http.connect()\n    while not self._endpoints_cached and self._client.cache_endpoints:\n        await asyncio.sleep(0.5)\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.ItemCache","title":"<code>ItemCache(max_size=100)</code>","text":"<p>               Bases: <code>BaseCache['Route', 'models.Item']</code></p> <p>A cache for items.</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def __init__(self, max_size: int = 100) -&gt; None:\n    self._max_size = max_size\n    self._cache: t.Dict[_KT, _VT] = {}\n    self._endpoints: t.Dict[str, Endpoint] = {}\n    self._endpoints_cached: bool = False\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.ItemCache.cache","title":"<code>cache: t.Dict[_KT, _VT]</code>  <code>property</code>","text":"<p>The cache itself.</p> <p>Returns:</p> Type Description <code>Dict[_KT, _VT]</code> <p>The cache itself.</p>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.ItemCache.endpoints","title":"<code>endpoints: t.Dict[str, Endpoint]</code>  <code>property</code>","text":"<p>The endpoints that are cached.</p> <p>Returns:</p> Type Description <code>Dict[str, Endpoint]</code> <p>The endpoints that are cached.</p>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.ItemCache.load","title":"<code>load(path='.')</code>  <code>async</code>","text":"<p>Load the cache from a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to load the cache from.</p> <code>'.'</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load(self, path: str = \".\") -&gt; None:\n    \"\"\"Load the cache from a file.\n\n    Parameters\n    ----------\n    path: str\n        The path to load the cache from.\n    \"\"\"\n    async with aiofiles.open(pathlib.Path(f\"{path}/{self.__class__.__name__}.json\"), \"r\") as f:\n        data = json.loads(await f.read())\n    self._max_size = len(data)\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: t.Type[\"_VT\"] = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    for endpoint, info in data.items():\n        route = route_model(endpoint=endpoint)\n        self.setdefault(route, model.from_payload(info))\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.ItemCache.load_all","title":"<code>load_all()</code>  <code>async</code>","text":"<p>Load all documents/data from api into the cache. (Endpoints must be cached first)</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load_all(self) -&gt; None:\n    \"\"\"\n    Load all documents/data from api into the cache. (Endpoints must be cached first)\n    \"\"\"\n    if not self._endpoints_cached:\n        raise RuntimeError(\"The endpoints have not been cached yet.\")\n    self._client.logger.info(f\"Loading {self.__class__.__name__}...\")\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: \"models.BaseModel\" = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    self._max_size = len(self._endpoints)\n    for endpoint in self._endpoints.values():\n        route = route_model(endpoint=f\"/{endpoint.url.strip('/').split('/')[-2]}/{str(endpoint)}\")\n        data = self.get(route, None)\n        self.setdefault(route, data if data else model.from_payload(await self._client.http.request(route)))\n    self._client.logger.info(f\"Loaded {self.__class__.__name__}.\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.ItemCache.load_all_batch","title":"<code>load_all_batch(batch_size=20)</code>  <code>async</code>","text":"<p>Load all documents/data from api into the cache in parallel. (Endpoints must be cached first)</p> <p>Parameters:</p> Name Type Description Default <code>batch_size</code> <code>int</code> <p>The number of documents to load at once. Default is 20 to avoid overwhelming the API.</p> <code>20</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load_all_batch(self, batch_size: int = 20) -&gt; None:\n    \"\"\"\n    Load all documents/data from api into the cache in parallel. (Endpoints must be cached first)\n\n    Parameters\n    ----------\n    batch_size: int\n        The number of documents to load at once. Default is 20 to avoid overwhelming the API.\n    \"\"\"\n    if not self._endpoints_cached:\n        raise RuntimeError(\"The endpoints have not been cached yet.\")\n    self._client.logger.info(f\"Loading {self.__class__.__name__}...\")\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: t.Type[\"_VT\"] = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    self._max_size = len(self._endpoints)\n    endpoints = list(self._endpoints.values())\n    total_endpoints = len(endpoints)\n    for i in range(0, total_endpoints, batch_size):\n        batch = endpoints[i : i + batch_size]\n        tasks = []\n        for endpoint in batch:\n            route = route_model(endpoint=f\"/{endpoint.url.strip('/').split('/')[-2]}/{str(endpoint)}\")\n            data = self.get(route, None)\n            if data:\n                self.setdefault(route, data)\n                self._client.logger.info(f\"Cached {route} - existing data used.\")\n            else:\n                tasks.append(self._fetch_and_cache(route, model))\n        if tasks:\n            await asyncio.gather(*tasks)\n        self._client.logger.debug(\n            f\"Loaded batch {i//batch_size + 1}/{(total_endpoints + batch_size - 1)//batch_size} for {self.__class__.__name__}\"\n        )\n    self._client.logger.info(f\"Loaded {self.__class__.__name__} - {len(self._cache)}/{total_endpoints} items.\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.ItemCache.load_documents","title":"<code>load_documents(data)</code>","text":"<p>Load documents into the cache.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>List[Dict[str, str]]</code> <p>The data to load.</p> required Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def load_documents(self, data: t.List[t.Dict[str, str]]) -&gt; None:\n    \"\"\"Load documents into the cache.\n\n    Parameters\n    ----------\n    data: typing.List[typing.Dict[str, str]]\n        The data to load.\n    \"\"\"\n    for document in data:\n        self._endpoints[document[\"name\"]] = Endpoint(url=document[\"url\"], id=int(document[\"url\"].split(\"/\")[-2]))\n    self._endpoints_cached = True\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.ItemCache.save","title":"<code>save(path='.')</code>  <code>async</code>","text":"<p>Save the cache to a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to save the cache to.</p> <code>'.'</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def save(self, path: str = \".\") -&gt; None:\n    \"\"\"Save the cache to a file.\n\n    Parameters\n    ----------\n    path: str\n        The path to save the cache to.\n    \"\"\"\n    pathlib.Path(path).mkdir(parents=True, exist_ok=True)\n    dummy: t.Dict[str, t.Dict[str, t.Any]] = {k.endpoint: v.raw for k, v in self.items()}\n    async with aiofiles.open(pathlib.Path(f\"{path}/{self.__class__.__name__}.json\"), \"w\") as f:\n        await f.write(\"{\\n\")\n        for n, (k, v) in enumerate(dummy.items()):\n            await f.write(\"\\n\".join([4 * \" \" + i for i in f'\"{k}\": {json.dumps(v, indent=4)}'.split(\"\\n\")]))\n            if n != len(dummy) - 1:\n                await f.write(\",\\n\")\n        await f.write(\"\\n}\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.ItemCache.set_size","title":"<code>set_size(size)</code>","text":"<p>Set the size of the cache.</p> <p>Parameters:</p> Name Type Description Default <code>size</code> <code>int</code> <p>The size of the cache.</p> required Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def set_size(self, size: int) -&gt; None:\n    \"\"\"Set the size of the cache.\n\n    Parameters\n    ----------\n    size: int\n        The size of the cache.\n    \"\"\"\n    self._max_size = size\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.ItemCache.wait_until_ready","title":"<code>wait_until_ready()</code>  <code>async</code>","text":"<p>Wait until the all the endpoints are cached.</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def wait_until_ready(self) -&gt; None:\n    \"\"\"Wait until the all the endpoints are cached.\"\"\"\n    await self._client.http.connect()\n    while not self._endpoints_cached and self._client.cache_endpoints:\n        await asyncio.sleep(0.5)\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.ItemCategoryCache","title":"<code>ItemCategoryCache(max_size=100)</code>","text":"<p>               Bases: <code>BaseCache['Route', 'models.ItemCategory']</code></p> <p>A cache for item categories.</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def __init__(self, max_size: int = 100) -&gt; None:\n    self._max_size = max_size\n    self._cache: t.Dict[_KT, _VT] = {}\n    self._endpoints: t.Dict[str, Endpoint] = {}\n    self._endpoints_cached: bool = False\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.ItemCategoryCache.cache","title":"<code>cache: t.Dict[_KT, _VT]</code>  <code>property</code>","text":"<p>The cache itself.</p> <p>Returns:</p> Type Description <code>Dict[_KT, _VT]</code> <p>The cache itself.</p>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.ItemCategoryCache.endpoints","title":"<code>endpoints: t.Dict[str, Endpoint]</code>  <code>property</code>","text":"<p>The endpoints that are cached.</p> <p>Returns:</p> Type Description <code>Dict[str, Endpoint]</code> <p>The endpoints that are cached.</p>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.ItemCategoryCache.load","title":"<code>load(path='.')</code>  <code>async</code>","text":"<p>Load the cache from a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to load the cache from.</p> <code>'.'</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load(self, path: str = \".\") -&gt; None:\n    \"\"\"Load the cache from a file.\n\n    Parameters\n    ----------\n    path: str\n        The path to load the cache from.\n    \"\"\"\n    async with aiofiles.open(pathlib.Path(f\"{path}/{self.__class__.__name__}.json\"), \"r\") as f:\n        data = json.loads(await f.read())\n    self._max_size = len(data)\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: t.Type[\"_VT\"] = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    for endpoint, info in data.items():\n        route = route_model(endpoint=endpoint)\n        self.setdefault(route, model.from_payload(info))\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.ItemCategoryCache.load_all","title":"<code>load_all()</code>  <code>async</code>","text":"<p>Load all documents/data from api into the cache. (Endpoints must be cached first)</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load_all(self) -&gt; None:\n    \"\"\"\n    Load all documents/data from api into the cache. (Endpoints must be cached first)\n    \"\"\"\n    if not self._endpoints_cached:\n        raise RuntimeError(\"The endpoints have not been cached yet.\")\n    self._client.logger.info(f\"Loading {self.__class__.__name__}...\")\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: \"models.BaseModel\" = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    self._max_size = len(self._endpoints)\n    for endpoint in self._endpoints.values():\n        route = route_model(endpoint=f\"/{endpoint.url.strip('/').split('/')[-2]}/{str(endpoint)}\")\n        data = self.get(route, None)\n        self.setdefault(route, data if data else model.from_payload(await self._client.http.request(route)))\n    self._client.logger.info(f\"Loaded {self.__class__.__name__}.\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.ItemCategoryCache.load_all_batch","title":"<code>load_all_batch(batch_size=20)</code>  <code>async</code>","text":"<p>Load all documents/data from api into the cache in parallel. (Endpoints must be cached first)</p> <p>Parameters:</p> Name Type Description Default <code>batch_size</code> <code>int</code> <p>The number of documents to load at once. Default is 20 to avoid overwhelming the API.</p> <code>20</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load_all_batch(self, batch_size: int = 20) -&gt; None:\n    \"\"\"\n    Load all documents/data from api into the cache in parallel. (Endpoints must be cached first)\n\n    Parameters\n    ----------\n    batch_size: int\n        The number of documents to load at once. Default is 20 to avoid overwhelming the API.\n    \"\"\"\n    if not self._endpoints_cached:\n        raise RuntimeError(\"The endpoints have not been cached yet.\")\n    self._client.logger.info(f\"Loading {self.__class__.__name__}...\")\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: t.Type[\"_VT\"] = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    self._max_size = len(self._endpoints)\n    endpoints = list(self._endpoints.values())\n    total_endpoints = len(endpoints)\n    for i in range(0, total_endpoints, batch_size):\n        batch = endpoints[i : i + batch_size]\n        tasks = []\n        for endpoint in batch:\n            route = route_model(endpoint=f\"/{endpoint.url.strip('/').split('/')[-2]}/{str(endpoint)}\")\n            data = self.get(route, None)\n            if data:\n                self.setdefault(route, data)\n                self._client.logger.info(f\"Cached {route} - existing data used.\")\n            else:\n                tasks.append(self._fetch_and_cache(route, model))\n        if tasks:\n            await asyncio.gather(*tasks)\n        self._client.logger.debug(\n            f\"Loaded batch {i//batch_size + 1}/{(total_endpoints + batch_size - 1)//batch_size} for {self.__class__.__name__}\"\n        )\n    self._client.logger.info(f\"Loaded {self.__class__.__name__} - {len(self._cache)}/{total_endpoints} items.\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.ItemCategoryCache.load_documents","title":"<code>load_documents(data)</code>","text":"<p>Load documents into the cache.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>List[Dict[str, str]]</code> <p>The data to load.</p> required Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def load_documents(self, data: t.List[t.Dict[str, str]]) -&gt; None:\n    \"\"\"Load documents into the cache.\n\n    Parameters\n    ----------\n    data: typing.List[typing.Dict[str, str]]\n        The data to load.\n    \"\"\"\n    for document in data:\n        self._endpoints[document[\"name\"]] = Endpoint(url=document[\"url\"], id=int(document[\"url\"].split(\"/\")[-2]))\n    self._endpoints_cached = True\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.ItemCategoryCache.save","title":"<code>save(path='.')</code>  <code>async</code>","text":"<p>Save the cache to a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to save the cache to.</p> <code>'.'</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def save(self, path: str = \".\") -&gt; None:\n    \"\"\"Save the cache to a file.\n\n    Parameters\n    ----------\n    path: str\n        The path to save the cache to.\n    \"\"\"\n    pathlib.Path(path).mkdir(parents=True, exist_ok=True)\n    dummy: t.Dict[str, t.Dict[str, t.Any]] = {k.endpoint: v.raw for k, v in self.items()}\n    async with aiofiles.open(pathlib.Path(f\"{path}/{self.__class__.__name__}.json\"), \"w\") as f:\n        await f.write(\"{\\n\")\n        for n, (k, v) in enumerate(dummy.items()):\n            await f.write(\"\\n\".join([4 * \" \" + i for i in f'\"{k}\": {json.dumps(v, indent=4)}'.split(\"\\n\")]))\n            if n != len(dummy) - 1:\n                await f.write(\",\\n\")\n        await f.write(\"\\n}\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.ItemCategoryCache.set_size","title":"<code>set_size(size)</code>","text":"<p>Set the size of the cache.</p> <p>Parameters:</p> Name Type Description Default <code>size</code> <code>int</code> <p>The size of the cache.</p> required Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def set_size(self, size: int) -&gt; None:\n    \"\"\"Set the size of the cache.\n\n    Parameters\n    ----------\n    size: int\n        The size of the cache.\n    \"\"\"\n    self._max_size = size\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.ItemCategoryCache.wait_until_ready","title":"<code>wait_until_ready()</code>  <code>async</code>","text":"<p>Wait until the all the endpoints are cached.</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def wait_until_ready(self) -&gt; None:\n    \"\"\"Wait until the all the endpoints are cached.\"\"\"\n    await self._client.http.connect()\n    while not self._endpoints_cached and self._client.cache_endpoints:\n        await asyncio.sleep(0.5)\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.ItemFlingEffectCache","title":"<code>ItemFlingEffectCache(max_size=100)</code>","text":"<p>               Bases: <code>BaseCache['Route', 'models.ItemFlingEffect']</code></p> <p>A cache for item fling effects.</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def __init__(self, max_size: int = 100) -&gt; None:\n    self._max_size = max_size\n    self._cache: t.Dict[_KT, _VT] = {}\n    self._endpoints: t.Dict[str, Endpoint] = {}\n    self._endpoints_cached: bool = False\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.ItemFlingEffectCache.cache","title":"<code>cache: t.Dict[_KT, _VT]</code>  <code>property</code>","text":"<p>The cache itself.</p> <p>Returns:</p> Type Description <code>Dict[_KT, _VT]</code> <p>The cache itself.</p>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.ItemFlingEffectCache.endpoints","title":"<code>endpoints: t.Dict[str, Endpoint]</code>  <code>property</code>","text":"<p>The endpoints that are cached.</p> <p>Returns:</p> Type Description <code>Dict[str, Endpoint]</code> <p>The endpoints that are cached.</p>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.ItemFlingEffectCache.load","title":"<code>load(path='.')</code>  <code>async</code>","text":"<p>Load the cache from a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to load the cache from.</p> <code>'.'</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load(self, path: str = \".\") -&gt; None:\n    \"\"\"Load the cache from a file.\n\n    Parameters\n    ----------\n    path: str\n        The path to load the cache from.\n    \"\"\"\n    async with aiofiles.open(pathlib.Path(f\"{path}/{self.__class__.__name__}.json\"), \"r\") as f:\n        data = json.loads(await f.read())\n    self._max_size = len(data)\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: t.Type[\"_VT\"] = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    for endpoint, info in data.items():\n        route = route_model(endpoint=endpoint)\n        self.setdefault(route, model.from_payload(info))\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.ItemFlingEffectCache.load_all","title":"<code>load_all()</code>  <code>async</code>","text":"<p>Load all documents/data from api into the cache. (Endpoints must be cached first)</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load_all(self) -&gt; None:\n    \"\"\"\n    Load all documents/data from api into the cache. (Endpoints must be cached first)\n    \"\"\"\n    if not self._endpoints_cached:\n        raise RuntimeError(\"The endpoints have not been cached yet.\")\n    self._client.logger.info(f\"Loading {self.__class__.__name__}...\")\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: \"models.BaseModel\" = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    self._max_size = len(self._endpoints)\n    for endpoint in self._endpoints.values():\n        route = route_model(endpoint=f\"/{endpoint.url.strip('/').split('/')[-2]}/{str(endpoint)}\")\n        data = self.get(route, None)\n        self.setdefault(route, data if data else model.from_payload(await self._client.http.request(route)))\n    self._client.logger.info(f\"Loaded {self.__class__.__name__}.\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.ItemFlingEffectCache.load_all_batch","title":"<code>load_all_batch(batch_size=20)</code>  <code>async</code>","text":"<p>Load all documents/data from api into the cache in parallel. (Endpoints must be cached first)</p> <p>Parameters:</p> Name Type Description Default <code>batch_size</code> <code>int</code> <p>The number of documents to load at once. Default is 20 to avoid overwhelming the API.</p> <code>20</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load_all_batch(self, batch_size: int = 20) -&gt; None:\n    \"\"\"\n    Load all documents/data from api into the cache in parallel. (Endpoints must be cached first)\n\n    Parameters\n    ----------\n    batch_size: int\n        The number of documents to load at once. Default is 20 to avoid overwhelming the API.\n    \"\"\"\n    if not self._endpoints_cached:\n        raise RuntimeError(\"The endpoints have not been cached yet.\")\n    self._client.logger.info(f\"Loading {self.__class__.__name__}...\")\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: t.Type[\"_VT\"] = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    self._max_size = len(self._endpoints)\n    endpoints = list(self._endpoints.values())\n    total_endpoints = len(endpoints)\n    for i in range(0, total_endpoints, batch_size):\n        batch = endpoints[i : i + batch_size]\n        tasks = []\n        for endpoint in batch:\n            route = route_model(endpoint=f\"/{endpoint.url.strip('/').split('/')[-2]}/{str(endpoint)}\")\n            data = self.get(route, None)\n            if data:\n                self.setdefault(route, data)\n                self._client.logger.info(f\"Cached {route} - existing data used.\")\n            else:\n                tasks.append(self._fetch_and_cache(route, model))\n        if tasks:\n            await asyncio.gather(*tasks)\n        self._client.logger.debug(\n            f\"Loaded batch {i//batch_size + 1}/{(total_endpoints + batch_size - 1)//batch_size} for {self.__class__.__name__}\"\n        )\n    self._client.logger.info(f\"Loaded {self.__class__.__name__} - {len(self._cache)}/{total_endpoints} items.\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.ItemFlingEffectCache.load_documents","title":"<code>load_documents(data)</code>","text":"<p>Load documents into the cache.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>List[Dict[str, str]]</code> <p>The data to load.</p> required Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def load_documents(self, data: t.List[t.Dict[str, str]]) -&gt; None:\n    \"\"\"Load documents into the cache.\n\n    Parameters\n    ----------\n    data: typing.List[typing.Dict[str, str]]\n        The data to load.\n    \"\"\"\n    for document in data:\n        self._endpoints[document[\"name\"]] = Endpoint(url=document[\"url\"], id=int(document[\"url\"].split(\"/\")[-2]))\n    self._endpoints_cached = True\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.ItemFlingEffectCache.save","title":"<code>save(path='.')</code>  <code>async</code>","text":"<p>Save the cache to a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to save the cache to.</p> <code>'.'</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def save(self, path: str = \".\") -&gt; None:\n    \"\"\"Save the cache to a file.\n\n    Parameters\n    ----------\n    path: str\n        The path to save the cache to.\n    \"\"\"\n    pathlib.Path(path).mkdir(parents=True, exist_ok=True)\n    dummy: t.Dict[str, t.Dict[str, t.Any]] = {k.endpoint: v.raw for k, v in self.items()}\n    async with aiofiles.open(pathlib.Path(f\"{path}/{self.__class__.__name__}.json\"), \"w\") as f:\n        await f.write(\"{\\n\")\n        for n, (k, v) in enumerate(dummy.items()):\n            await f.write(\"\\n\".join([4 * \" \" + i for i in f'\"{k}\": {json.dumps(v, indent=4)}'.split(\"\\n\")]))\n            if n != len(dummy) - 1:\n                await f.write(\",\\n\")\n        await f.write(\"\\n}\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.ItemFlingEffectCache.set_size","title":"<code>set_size(size)</code>","text":"<p>Set the size of the cache.</p> <p>Parameters:</p> Name Type Description Default <code>size</code> <code>int</code> <p>The size of the cache.</p> required Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def set_size(self, size: int) -&gt; None:\n    \"\"\"Set the size of the cache.\n\n    Parameters\n    ----------\n    size: int\n        The size of the cache.\n    \"\"\"\n    self._max_size = size\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.ItemFlingEffectCache.wait_until_ready","title":"<code>wait_until_ready()</code>  <code>async</code>","text":"<p>Wait until the all the endpoints are cached.</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def wait_until_ready(self) -&gt; None:\n    \"\"\"Wait until the all the endpoints are cached.\"\"\"\n    await self._client.http.connect()\n    while not self._endpoints_cached and self._client.cache_endpoints:\n        await asyncio.sleep(0.5)\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.ItemPocketCache","title":"<code>ItemPocketCache(max_size=100)</code>","text":"<p>               Bases: <code>BaseCache['Route', 'models.ItemPocket']</code></p> <p>A cache for item pockets.</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def __init__(self, max_size: int = 100) -&gt; None:\n    self._max_size = max_size\n    self._cache: t.Dict[_KT, _VT] = {}\n    self._endpoints: t.Dict[str, Endpoint] = {}\n    self._endpoints_cached: bool = False\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.ItemPocketCache.cache","title":"<code>cache: t.Dict[_KT, _VT]</code>  <code>property</code>","text":"<p>The cache itself.</p> <p>Returns:</p> Type Description <code>Dict[_KT, _VT]</code> <p>The cache itself.</p>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.ItemPocketCache.endpoints","title":"<code>endpoints: t.Dict[str, Endpoint]</code>  <code>property</code>","text":"<p>The endpoints that are cached.</p> <p>Returns:</p> Type Description <code>Dict[str, Endpoint]</code> <p>The endpoints that are cached.</p>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.ItemPocketCache.load","title":"<code>load(path='.')</code>  <code>async</code>","text":"<p>Load the cache from a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to load the cache from.</p> <code>'.'</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load(self, path: str = \".\") -&gt; None:\n    \"\"\"Load the cache from a file.\n\n    Parameters\n    ----------\n    path: str\n        The path to load the cache from.\n    \"\"\"\n    async with aiofiles.open(pathlib.Path(f\"{path}/{self.__class__.__name__}.json\"), \"r\") as f:\n        data = json.loads(await f.read())\n    self._max_size = len(data)\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: t.Type[\"_VT\"] = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    for endpoint, info in data.items():\n        route = route_model(endpoint=endpoint)\n        self.setdefault(route, model.from_payload(info))\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.ItemPocketCache.load_all","title":"<code>load_all()</code>  <code>async</code>","text":"<p>Load all documents/data from api into the cache. (Endpoints must be cached first)</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load_all(self) -&gt; None:\n    \"\"\"\n    Load all documents/data from api into the cache. (Endpoints must be cached first)\n    \"\"\"\n    if not self._endpoints_cached:\n        raise RuntimeError(\"The endpoints have not been cached yet.\")\n    self._client.logger.info(f\"Loading {self.__class__.__name__}...\")\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: \"models.BaseModel\" = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    self._max_size = len(self._endpoints)\n    for endpoint in self._endpoints.values():\n        route = route_model(endpoint=f\"/{endpoint.url.strip('/').split('/')[-2]}/{str(endpoint)}\")\n        data = self.get(route, None)\n        self.setdefault(route, data if data else model.from_payload(await self._client.http.request(route)))\n    self._client.logger.info(f\"Loaded {self.__class__.__name__}.\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.ItemPocketCache.load_all_batch","title":"<code>load_all_batch(batch_size=20)</code>  <code>async</code>","text":"<p>Load all documents/data from api into the cache in parallel. (Endpoints must be cached first)</p> <p>Parameters:</p> Name Type Description Default <code>batch_size</code> <code>int</code> <p>The number of documents to load at once. Default is 20 to avoid overwhelming the API.</p> <code>20</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load_all_batch(self, batch_size: int = 20) -&gt; None:\n    \"\"\"\n    Load all documents/data from api into the cache in parallel. (Endpoints must be cached first)\n\n    Parameters\n    ----------\n    batch_size: int\n        The number of documents to load at once. Default is 20 to avoid overwhelming the API.\n    \"\"\"\n    if not self._endpoints_cached:\n        raise RuntimeError(\"The endpoints have not been cached yet.\")\n    self._client.logger.info(f\"Loading {self.__class__.__name__}...\")\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: t.Type[\"_VT\"] = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    self._max_size = len(self._endpoints)\n    endpoints = list(self._endpoints.values())\n    total_endpoints = len(endpoints)\n    for i in range(0, total_endpoints, batch_size):\n        batch = endpoints[i : i + batch_size]\n        tasks = []\n        for endpoint in batch:\n            route = route_model(endpoint=f\"/{endpoint.url.strip('/').split('/')[-2]}/{str(endpoint)}\")\n            data = self.get(route, None)\n            if data:\n                self.setdefault(route, data)\n                self._client.logger.info(f\"Cached {route} - existing data used.\")\n            else:\n                tasks.append(self._fetch_and_cache(route, model))\n        if tasks:\n            await asyncio.gather(*tasks)\n        self._client.logger.debug(\n            f\"Loaded batch {i//batch_size + 1}/{(total_endpoints + batch_size - 1)//batch_size} for {self.__class__.__name__}\"\n        )\n    self._client.logger.info(f\"Loaded {self.__class__.__name__} - {len(self._cache)}/{total_endpoints} items.\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.ItemPocketCache.load_documents","title":"<code>load_documents(data)</code>","text":"<p>Load documents into the cache.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>List[Dict[str, str]]</code> <p>The data to load.</p> required Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def load_documents(self, data: t.List[t.Dict[str, str]]) -&gt; None:\n    \"\"\"Load documents into the cache.\n\n    Parameters\n    ----------\n    data: typing.List[typing.Dict[str, str]]\n        The data to load.\n    \"\"\"\n    for document in data:\n        self._endpoints[document[\"name\"]] = Endpoint(url=document[\"url\"], id=int(document[\"url\"].split(\"/\")[-2]))\n    self._endpoints_cached = True\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.ItemPocketCache.save","title":"<code>save(path='.')</code>  <code>async</code>","text":"<p>Save the cache to a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to save the cache to.</p> <code>'.'</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def save(self, path: str = \".\") -&gt; None:\n    \"\"\"Save the cache to a file.\n\n    Parameters\n    ----------\n    path: str\n        The path to save the cache to.\n    \"\"\"\n    pathlib.Path(path).mkdir(parents=True, exist_ok=True)\n    dummy: t.Dict[str, t.Dict[str, t.Any]] = {k.endpoint: v.raw for k, v in self.items()}\n    async with aiofiles.open(pathlib.Path(f\"{path}/{self.__class__.__name__}.json\"), \"w\") as f:\n        await f.write(\"{\\n\")\n        for n, (k, v) in enumerate(dummy.items()):\n            await f.write(\"\\n\".join([4 * \" \" + i for i in f'\"{k}\": {json.dumps(v, indent=4)}'.split(\"\\n\")]))\n            if n != len(dummy) - 1:\n                await f.write(\",\\n\")\n        await f.write(\"\\n}\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.ItemPocketCache.set_size","title":"<code>set_size(size)</code>","text":"<p>Set the size of the cache.</p> <p>Parameters:</p> Name Type Description Default <code>size</code> <code>int</code> <p>The size of the cache.</p> required Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def set_size(self, size: int) -&gt; None:\n    \"\"\"Set the size of the cache.\n\n    Parameters\n    ----------\n    size: int\n        The size of the cache.\n    \"\"\"\n    self._max_size = size\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.ItemPocketCache.wait_until_ready","title":"<code>wait_until_ready()</code>  <code>async</code>","text":"<p>Wait until the all the endpoints are cached.</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def wait_until_ready(self) -&gt; None:\n    \"\"\"Wait until the all the endpoints are cached.\"\"\"\n    await self._client.http.connect()\n    while not self._endpoints_cached and self._client.cache_endpoints:\n        await asyncio.sleep(0.5)\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.LocationAreaCache","title":"<code>LocationAreaCache(max_size=100)</code>","text":"<p>               Bases: <code>BaseCache['Route', 'models.LocationArea']</code></p> <p>A cache for location areas.</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def __init__(self, max_size: int = 100) -&gt; None:\n    self._max_size = max_size\n    self._cache: t.Dict[_KT, _VT] = {}\n    self._endpoints: t.Dict[str, Endpoint] = {}\n    self._endpoints_cached: bool = False\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.LocationAreaCache.cache","title":"<code>cache: t.Dict[_KT, _VT]</code>  <code>property</code>","text":"<p>The cache itself.</p> <p>Returns:</p> Type Description <code>Dict[_KT, _VT]</code> <p>The cache itself.</p>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.LocationAreaCache.endpoints","title":"<code>endpoints: t.Dict[str, Endpoint]</code>  <code>property</code>","text":"<p>The endpoints that are cached.</p> <p>Returns:</p> Type Description <code>Dict[str, Endpoint]</code> <p>The endpoints that are cached.</p>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.LocationAreaCache.load","title":"<code>load(path='.')</code>  <code>async</code>","text":"<p>Load the cache from a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to load the cache from.</p> <code>'.'</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load(self, path: str = \".\") -&gt; None:\n    \"\"\"Load the cache from a file.\n\n    Parameters\n    ----------\n    path: str\n        The path to load the cache from.\n    \"\"\"\n    async with aiofiles.open(pathlib.Path(f\"{path}/{self.__class__.__name__}.json\"), \"r\") as f:\n        data = json.loads(await f.read())\n    self._max_size = len(data)\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: t.Type[\"_VT\"] = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    for endpoint, info in data.items():\n        route = route_model(endpoint=endpoint)\n        self.setdefault(route, model.from_payload(info))\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.LocationAreaCache.load_all","title":"<code>load_all()</code>  <code>async</code>","text":"<p>Load all documents/data from api into the cache. (Endpoints must be cached first)</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load_all(self) -&gt; None:\n    \"\"\"\n    Load all documents/data from api into the cache. (Endpoints must be cached first)\n    \"\"\"\n    if not self._endpoints_cached:\n        raise RuntimeError(\"The endpoints have not been cached yet.\")\n    self._client.logger.info(f\"Loading {self.__class__.__name__}...\")\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: \"models.BaseModel\" = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    self._max_size = len(self._endpoints)\n    for endpoint in self._endpoints.values():\n        route = route_model(endpoint=f\"/{endpoint.url.strip('/').split('/')[-2]}/{str(endpoint)}\")\n        data = self.get(route, None)\n        self.setdefault(route, data if data else model.from_payload(await self._client.http.request(route)))\n    self._client.logger.info(f\"Loaded {self.__class__.__name__}.\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.LocationAreaCache.load_all_batch","title":"<code>load_all_batch(batch_size=20)</code>  <code>async</code>","text":"<p>Load all documents/data from api into the cache in parallel. (Endpoints must be cached first)</p> <p>Parameters:</p> Name Type Description Default <code>batch_size</code> <code>int</code> <p>The number of documents to load at once. Default is 20 to avoid overwhelming the API.</p> <code>20</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load_all_batch(self, batch_size: int = 20) -&gt; None:\n    \"\"\"\n    Load all documents/data from api into the cache in parallel. (Endpoints must be cached first)\n\n    Parameters\n    ----------\n    batch_size: int\n        The number of documents to load at once. Default is 20 to avoid overwhelming the API.\n    \"\"\"\n    if not self._endpoints_cached:\n        raise RuntimeError(\"The endpoints have not been cached yet.\")\n    self._client.logger.info(f\"Loading {self.__class__.__name__}...\")\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: t.Type[\"_VT\"] = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    self._max_size = len(self._endpoints)\n    endpoints = list(self._endpoints.values())\n    total_endpoints = len(endpoints)\n    for i in range(0, total_endpoints, batch_size):\n        batch = endpoints[i : i + batch_size]\n        tasks = []\n        for endpoint in batch:\n            route = route_model(endpoint=f\"/{endpoint.url.strip('/').split('/')[-2]}/{str(endpoint)}\")\n            data = self.get(route, None)\n            if data:\n                self.setdefault(route, data)\n                self._client.logger.info(f\"Cached {route} - existing data used.\")\n            else:\n                tasks.append(self._fetch_and_cache(route, model))\n        if tasks:\n            await asyncio.gather(*tasks)\n        self._client.logger.debug(\n            f\"Loaded batch {i//batch_size + 1}/{(total_endpoints + batch_size - 1)//batch_size} for {self.__class__.__name__}\"\n        )\n    self._client.logger.info(f\"Loaded {self.__class__.__name__} - {len(self._cache)}/{total_endpoints} items.\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.LocationAreaCache.load_documents","title":"<code>load_documents(data)</code>","text":"<p>Load documents into the cache.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>List[Dict[str, str]]</code> <p>The data to load.</p> required Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def load_documents(self, data: t.List[t.Dict[str, str]]) -&gt; None:\n    \"\"\"Load documents into the cache.\n\n    Parameters\n    ----------\n    data: typing.List[typing.Dict[str, str]]\n        The data to load.\n    \"\"\"\n    for document in data:\n        self._endpoints[document[\"name\"]] = Endpoint(url=document[\"url\"], id=int(document[\"url\"].split(\"/\")[-2]))\n    self._endpoints_cached = True\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.LocationAreaCache.save","title":"<code>save(path='.')</code>  <code>async</code>","text":"<p>Save the cache to a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to save the cache to.</p> <code>'.'</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def save(self, path: str = \".\") -&gt; None:\n    \"\"\"Save the cache to a file.\n\n    Parameters\n    ----------\n    path: str\n        The path to save the cache to.\n    \"\"\"\n    pathlib.Path(path).mkdir(parents=True, exist_ok=True)\n    dummy: t.Dict[str, t.Dict[str, t.Any]] = {k.endpoint: v.raw for k, v in self.items()}\n    async with aiofiles.open(pathlib.Path(f\"{path}/{self.__class__.__name__}.json\"), \"w\") as f:\n        await f.write(\"{\\n\")\n        for n, (k, v) in enumerate(dummy.items()):\n            await f.write(\"\\n\".join([4 * \" \" + i for i in f'\"{k}\": {json.dumps(v, indent=4)}'.split(\"\\n\")]))\n            if n != len(dummy) - 1:\n                await f.write(\",\\n\")\n        await f.write(\"\\n}\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.LocationAreaCache.set_size","title":"<code>set_size(size)</code>","text":"<p>Set the size of the cache.</p> <p>Parameters:</p> Name Type Description Default <code>size</code> <code>int</code> <p>The size of the cache.</p> required Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def set_size(self, size: int) -&gt; None:\n    \"\"\"Set the size of the cache.\n\n    Parameters\n    ----------\n    size: int\n        The size of the cache.\n    \"\"\"\n    self._max_size = size\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.LocationAreaCache.wait_until_ready","title":"<code>wait_until_ready()</code>  <code>async</code>","text":"<p>Wait until the all the endpoints are cached.</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def wait_until_ready(self) -&gt; None:\n    \"\"\"Wait until the all the endpoints are cached.\"\"\"\n    await self._client.http.connect()\n    while not self._endpoints_cached and self._client.cache_endpoints:\n        await asyncio.sleep(0.5)\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.LocationCache","title":"<code>LocationCache(max_size=100)</code>","text":"<p>               Bases: <code>BaseCache['Route', 'models.Location']</code></p> <p>A cache for locations.</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def __init__(self, max_size: int = 100) -&gt; None:\n    self._max_size = max_size\n    self._cache: t.Dict[_KT, _VT] = {}\n    self._endpoints: t.Dict[str, Endpoint] = {}\n    self._endpoints_cached: bool = False\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.LocationCache.cache","title":"<code>cache: t.Dict[_KT, _VT]</code>  <code>property</code>","text":"<p>The cache itself.</p> <p>Returns:</p> Type Description <code>Dict[_KT, _VT]</code> <p>The cache itself.</p>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.LocationCache.endpoints","title":"<code>endpoints: t.Dict[str, Endpoint]</code>  <code>property</code>","text":"<p>The endpoints that are cached.</p> <p>Returns:</p> Type Description <code>Dict[str, Endpoint]</code> <p>The endpoints that are cached.</p>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.LocationCache.load","title":"<code>load(path='.')</code>  <code>async</code>","text":"<p>Load the cache from a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to load the cache from.</p> <code>'.'</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load(self, path: str = \".\") -&gt; None:\n    \"\"\"Load the cache from a file.\n\n    Parameters\n    ----------\n    path: str\n        The path to load the cache from.\n    \"\"\"\n    async with aiofiles.open(pathlib.Path(f\"{path}/{self.__class__.__name__}.json\"), \"r\") as f:\n        data = json.loads(await f.read())\n    self._max_size = len(data)\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: t.Type[\"_VT\"] = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    for endpoint, info in data.items():\n        route = route_model(endpoint=endpoint)\n        self.setdefault(route, model.from_payload(info))\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.LocationCache.load_all","title":"<code>load_all()</code>  <code>async</code>","text":"<p>Load all documents/data from api into the cache. (Endpoints must be cached first)</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load_all(self) -&gt; None:\n    \"\"\"\n    Load all documents/data from api into the cache. (Endpoints must be cached first)\n    \"\"\"\n    if not self._endpoints_cached:\n        raise RuntimeError(\"The endpoints have not been cached yet.\")\n    self._client.logger.info(f\"Loading {self.__class__.__name__}...\")\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: \"models.BaseModel\" = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    self._max_size = len(self._endpoints)\n    for endpoint in self._endpoints.values():\n        route = route_model(endpoint=f\"/{endpoint.url.strip('/').split('/')[-2]}/{str(endpoint)}\")\n        data = self.get(route, None)\n        self.setdefault(route, data if data else model.from_payload(await self._client.http.request(route)))\n    self._client.logger.info(f\"Loaded {self.__class__.__name__}.\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.LocationCache.load_all_batch","title":"<code>load_all_batch(batch_size=20)</code>  <code>async</code>","text":"<p>Load all documents/data from api into the cache in parallel. (Endpoints must be cached first)</p> <p>Parameters:</p> Name Type Description Default <code>batch_size</code> <code>int</code> <p>The number of documents to load at once. Default is 20 to avoid overwhelming the API.</p> <code>20</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load_all_batch(self, batch_size: int = 20) -&gt; None:\n    \"\"\"\n    Load all documents/data from api into the cache in parallel. (Endpoints must be cached first)\n\n    Parameters\n    ----------\n    batch_size: int\n        The number of documents to load at once. Default is 20 to avoid overwhelming the API.\n    \"\"\"\n    if not self._endpoints_cached:\n        raise RuntimeError(\"The endpoints have not been cached yet.\")\n    self._client.logger.info(f\"Loading {self.__class__.__name__}...\")\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: t.Type[\"_VT\"] = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    self._max_size = len(self._endpoints)\n    endpoints = list(self._endpoints.values())\n    total_endpoints = len(endpoints)\n    for i in range(0, total_endpoints, batch_size):\n        batch = endpoints[i : i + batch_size]\n        tasks = []\n        for endpoint in batch:\n            route = route_model(endpoint=f\"/{endpoint.url.strip('/').split('/')[-2]}/{str(endpoint)}\")\n            data = self.get(route, None)\n            if data:\n                self.setdefault(route, data)\n                self._client.logger.info(f\"Cached {route} - existing data used.\")\n            else:\n                tasks.append(self._fetch_and_cache(route, model))\n        if tasks:\n            await asyncio.gather(*tasks)\n        self._client.logger.debug(\n            f\"Loaded batch {i//batch_size + 1}/{(total_endpoints + batch_size - 1)//batch_size} for {self.__class__.__name__}\"\n        )\n    self._client.logger.info(f\"Loaded {self.__class__.__name__} - {len(self._cache)}/{total_endpoints} items.\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.LocationCache.load_documents","title":"<code>load_documents(data)</code>","text":"<p>Load documents into the cache.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>List[Dict[str, str]]</code> <p>The data to load.</p> required Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def load_documents(self, data: t.List[t.Dict[str, str]]) -&gt; None:\n    \"\"\"Load documents into the cache.\n\n    Parameters\n    ----------\n    data: typing.List[typing.Dict[str, str]]\n        The data to load.\n    \"\"\"\n    for document in data:\n        self._endpoints[document[\"name\"]] = Endpoint(url=document[\"url\"], id=int(document[\"url\"].split(\"/\")[-2]))\n    self._endpoints_cached = True\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.LocationCache.save","title":"<code>save(path='.')</code>  <code>async</code>","text":"<p>Save the cache to a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to save the cache to.</p> <code>'.'</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def save(self, path: str = \".\") -&gt; None:\n    \"\"\"Save the cache to a file.\n\n    Parameters\n    ----------\n    path: str\n        The path to save the cache to.\n    \"\"\"\n    pathlib.Path(path).mkdir(parents=True, exist_ok=True)\n    dummy: t.Dict[str, t.Dict[str, t.Any]] = {k.endpoint: v.raw for k, v in self.items()}\n    async with aiofiles.open(pathlib.Path(f\"{path}/{self.__class__.__name__}.json\"), \"w\") as f:\n        await f.write(\"{\\n\")\n        for n, (k, v) in enumerate(dummy.items()):\n            await f.write(\"\\n\".join([4 * \" \" + i for i in f'\"{k}\": {json.dumps(v, indent=4)}'.split(\"\\n\")]))\n            if n != len(dummy) - 1:\n                await f.write(\",\\n\")\n        await f.write(\"\\n}\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.LocationCache.set_size","title":"<code>set_size(size)</code>","text":"<p>Set the size of the cache.</p> <p>Parameters:</p> Name Type Description Default <code>size</code> <code>int</code> <p>The size of the cache.</p> required Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def set_size(self, size: int) -&gt; None:\n    \"\"\"Set the size of the cache.\n\n    Parameters\n    ----------\n    size: int\n        The size of the cache.\n    \"\"\"\n    self._max_size = size\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.LocationCache.wait_until_ready","title":"<code>wait_until_ready()</code>  <code>async</code>","text":"<p>Wait until the all the endpoints are cached.</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def wait_until_ready(self) -&gt; None:\n    \"\"\"Wait until the all the endpoints are cached.\"\"\"\n    await self._client.http.connect()\n    while not self._endpoints_cached and self._client.cache_endpoints:\n        await asyncio.sleep(0.5)\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.MachineCache","title":"<code>MachineCache(max_size=100)</code>","text":"<p>               Bases: <code>SecondaryTypeCache['Route', 'models.Machine']</code></p> <p>A cache for machines.</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def __init__(self, max_size: int = 100) -&gt; None:\n    self._max_size = max_size\n    self._cache: t.Dict[_KT, _VT] = {}\n    self._endpoints: t.Dict[str, Endpoint] = {}\n    self._endpoints_cached: bool = False\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.MachineCache.cache","title":"<code>cache: t.Dict[_KT, _VT]</code>  <code>property</code>","text":"<p>The cache itself.</p> <p>Returns:</p> Type Description <code>Dict[_KT, _VT]</code> <p>The cache itself.</p>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.MachineCache.endpoints","title":"<code>endpoints: t.Dict[str, Endpoint]</code>  <code>property</code>","text":"<p>The endpoints that are cached.</p> <p>Returns:</p> Type Description <code>Dict[str, Endpoint]</code> <p>The endpoints that are cached.</p>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.MachineCache.load","title":"<code>load(path='.')</code>  <code>async</code>","text":"<p>Load the cache from a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to load the cache from.</p> <code>'.'</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load(self, path: str = \".\") -&gt; None:\n    \"\"\"Load the cache from a file.\n\n    Parameters\n    ----------\n    path: str\n        The path to load the cache from.\n    \"\"\"\n    async with aiofiles.open(pathlib.Path(f\"{path}/{self.__class__.__name__}.json\"), \"r\") as f:\n        data = json.loads(await f.read())\n    self._max_size = len(data)\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: t.Type[\"_VT\"] = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    for endpoint, info in data.items():\n        route = route_model(endpoint=endpoint)\n        self.setdefault(route, model.from_payload(info))\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.MachineCache.load_all","title":"<code>load_all()</code>  <code>async</code>","text":"<p>Load all documents/data from api into the cache. (Endpoints must be cached first)</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load_all(self) -&gt; None:\n    \"\"\"\n    Load all documents/data from api into the cache. (Endpoints must be cached first)\n    \"\"\"\n    if not self._endpoints_cached:\n        raise RuntimeError(\"The endpoints have not been cached yet.\")\n    self._client.logger.info(f\"Loading {self.__class__.__name__}...\")\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: \"models.BaseModel\" = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    self._max_size = len(self._endpoints)\n    for endpoint in self._endpoints.values():\n        route = route_model(endpoint=f\"/{endpoint.url.strip('/').split('/')[-2]}/{str(endpoint)}\")\n        data = self.get(route, None)\n        self.setdefault(route, data if data else model.from_payload(await self._client.http.request(route)))\n    self._client.logger.info(f\"Loaded {self.__class__.__name__}.\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.MachineCache.load_all_batch","title":"<code>load_all_batch(batch_size=20)</code>  <code>async</code>","text":"<p>Load all documents/data from api into the cache in parallel. (Endpoints must be cached first)</p> <p>Parameters:</p> Name Type Description Default <code>batch_size</code> <code>int</code> <p>The number of documents to load at once. Default is 20 to avoid overwhelming the API.</p> <code>20</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load_all_batch(self, batch_size: int = 20) -&gt; None:\n    \"\"\"\n    Load all documents/data from api into the cache in parallel. (Endpoints must be cached first)\n\n    Parameters\n    ----------\n    batch_size: int\n        The number of documents to load at once. Default is 20 to avoid overwhelming the API.\n    \"\"\"\n    if not self._endpoints_cached:\n        raise RuntimeError(\"The endpoints have not been cached yet.\")\n    self._client.logger.info(f\"Loading {self.__class__.__name__}...\")\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: t.Type[\"_VT\"] = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    self._max_size = len(self._endpoints)\n    endpoints = list(self._endpoints.values())\n    total_endpoints = len(endpoints)\n    for i in range(0, total_endpoints, batch_size):\n        batch = endpoints[i : i + batch_size]\n        tasks = []\n        for endpoint in batch:\n            route = route_model(endpoint=f\"/{endpoint.url.strip('/').split('/')[-2]}/{str(endpoint)}\")\n            data = self.get(route, None)\n            if data:\n                self.setdefault(route, data)\n                self._client.logger.info(f\"Cached {route} - existing data used.\")\n            else:\n                tasks.append(self._fetch_and_cache(route, model))\n        if tasks:\n            await asyncio.gather(*tasks)\n        self._client.logger.debug(\n            f\"Loaded batch {i//batch_size + 1}/{(total_endpoints + batch_size - 1)//batch_size} for {self.__class__.__name__}\"\n        )\n    self._client.logger.info(f\"Loaded {self.__class__.__name__} - {len(self._cache)}/{total_endpoints} items.\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.MachineCache.load_documents","title":"<code>load_documents(data)</code>","text":"<p>Load documents into the cache. Endpoints are different for secondary types.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>List[Dict[str, str]]</code> <p>The data to load.</p> required Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def load_documents(self, data: t.List[t.Dict[str, str]]) -&gt; None:\n    \"\"\"Load documents into the cache. Endpoints are different for secondary types.\n\n    Parameters\n    ----------\n    data: typing.List[typing.Dict[str, str]]\n        The data to load.\n    \"\"\"\n    for document in data:\n        self._endpoints[document[\"url\"].split(\"/\")[-2]] = Endpoint(\n            url=document[\"url\"], id=int(document[\"url\"].split(\"/\")[-2])\n        )\n    self._endpoints_cached = True\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.MachineCache.save","title":"<code>save(path='.')</code>  <code>async</code>","text":"<p>Save the cache to a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to save the cache to.</p> <code>'.'</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def save(self, path: str = \".\") -&gt; None:\n    \"\"\"Save the cache to a file.\n\n    Parameters\n    ----------\n    path: str\n        The path to save the cache to.\n    \"\"\"\n    pathlib.Path(path).mkdir(parents=True, exist_ok=True)\n    dummy: t.Dict[str, t.Dict[str, t.Any]] = {k.endpoint: v.raw for k, v in self.items()}\n    async with aiofiles.open(pathlib.Path(f\"{path}/{self.__class__.__name__}.json\"), \"w\") as f:\n        await f.write(\"{\\n\")\n        for n, (k, v) in enumerate(dummy.items()):\n            await f.write(\"\\n\".join([4 * \" \" + i for i in f'\"{k}\": {json.dumps(v, indent=4)}'.split(\"\\n\")]))\n            if n != len(dummy) - 1:\n                await f.write(\",\\n\")\n        await f.write(\"\\n}\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.MachineCache.set_size","title":"<code>set_size(size)</code>","text":"<p>Set the size of the cache.</p> <p>Parameters:</p> Name Type Description Default <code>size</code> <code>int</code> <p>The size of the cache.</p> required Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def set_size(self, size: int) -&gt; None:\n    \"\"\"Set the size of the cache.\n\n    Parameters\n    ----------\n    size: int\n        The size of the cache.\n    \"\"\"\n    self._max_size = size\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.MachineCache.wait_until_ready","title":"<code>wait_until_ready()</code>  <code>async</code>","text":"<p>Wait until the all the endpoints are cached.</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def wait_until_ready(self) -&gt; None:\n    \"\"\"Wait until the all the endpoints are cached.\"\"\"\n    await self._client.http.connect()\n    while not self._endpoints_cached and self._client.cache_endpoints:\n        await asyncio.sleep(0.5)\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.MoveAilmentCache","title":"<code>MoveAilmentCache(max_size=100)</code>","text":"<p>               Bases: <code>BaseCache['Route', 'models.MoveAilment']</code></p> <p>A cache for move ailments.</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def __init__(self, max_size: int = 100) -&gt; None:\n    self._max_size = max_size\n    self._cache: t.Dict[_KT, _VT] = {}\n    self._endpoints: t.Dict[str, Endpoint] = {}\n    self._endpoints_cached: bool = False\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.MoveAilmentCache.cache","title":"<code>cache: t.Dict[_KT, _VT]</code>  <code>property</code>","text":"<p>The cache itself.</p> <p>Returns:</p> Type Description <code>Dict[_KT, _VT]</code> <p>The cache itself.</p>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.MoveAilmentCache.endpoints","title":"<code>endpoints: t.Dict[str, Endpoint]</code>  <code>property</code>","text":"<p>The endpoints that are cached.</p> <p>Returns:</p> Type Description <code>Dict[str, Endpoint]</code> <p>The endpoints that are cached.</p>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.MoveAilmentCache.load","title":"<code>load(path='.')</code>  <code>async</code>","text":"<p>Load the cache from a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to load the cache from.</p> <code>'.'</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load(self, path: str = \".\") -&gt; None:\n    \"\"\"Load the cache from a file.\n\n    Parameters\n    ----------\n    path: str\n        The path to load the cache from.\n    \"\"\"\n    async with aiofiles.open(pathlib.Path(f\"{path}/{self.__class__.__name__}.json\"), \"r\") as f:\n        data = json.loads(await f.read())\n    self._max_size = len(data)\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: t.Type[\"_VT\"] = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    for endpoint, info in data.items():\n        route = route_model(endpoint=endpoint)\n        self.setdefault(route, model.from_payload(info))\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.MoveAilmentCache.load_all","title":"<code>load_all()</code>  <code>async</code>","text":"<p>Load all documents/data from api into the cache. (Endpoints must be cached first)</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load_all(self) -&gt; None:\n    \"\"\"\n    Load all documents/data from api into the cache. (Endpoints must be cached first)\n    \"\"\"\n    if not self._endpoints_cached:\n        raise RuntimeError(\"The endpoints have not been cached yet.\")\n    self._client.logger.info(f\"Loading {self.__class__.__name__}...\")\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: \"models.BaseModel\" = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    self._max_size = len(self._endpoints)\n    for endpoint in self._endpoints.values():\n        route = route_model(endpoint=f\"/{endpoint.url.strip('/').split('/')[-2]}/{str(endpoint)}\")\n        data = self.get(route, None)\n        self.setdefault(route, data if data else model.from_payload(await self._client.http.request(route)))\n    self._client.logger.info(f\"Loaded {self.__class__.__name__}.\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.MoveAilmentCache.load_all_batch","title":"<code>load_all_batch(batch_size=20)</code>  <code>async</code>","text":"<p>Load all documents/data from api into the cache in parallel. (Endpoints must be cached first)</p> <p>Parameters:</p> Name Type Description Default <code>batch_size</code> <code>int</code> <p>The number of documents to load at once. Default is 20 to avoid overwhelming the API.</p> <code>20</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load_all_batch(self, batch_size: int = 20) -&gt; None:\n    \"\"\"\n    Load all documents/data from api into the cache in parallel. (Endpoints must be cached first)\n\n    Parameters\n    ----------\n    batch_size: int\n        The number of documents to load at once. Default is 20 to avoid overwhelming the API.\n    \"\"\"\n    if not self._endpoints_cached:\n        raise RuntimeError(\"The endpoints have not been cached yet.\")\n    self._client.logger.info(f\"Loading {self.__class__.__name__}...\")\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: t.Type[\"_VT\"] = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    self._max_size = len(self._endpoints)\n    endpoints = list(self._endpoints.values())\n    total_endpoints = len(endpoints)\n    for i in range(0, total_endpoints, batch_size):\n        batch = endpoints[i : i + batch_size]\n        tasks = []\n        for endpoint in batch:\n            route = route_model(endpoint=f\"/{endpoint.url.strip('/').split('/')[-2]}/{str(endpoint)}\")\n            data = self.get(route, None)\n            if data:\n                self.setdefault(route, data)\n                self._client.logger.info(f\"Cached {route} - existing data used.\")\n            else:\n                tasks.append(self._fetch_and_cache(route, model))\n        if tasks:\n            await asyncio.gather(*tasks)\n        self._client.logger.debug(\n            f\"Loaded batch {i//batch_size + 1}/{(total_endpoints + batch_size - 1)//batch_size} for {self.__class__.__name__}\"\n        )\n    self._client.logger.info(f\"Loaded {self.__class__.__name__} - {len(self._cache)}/{total_endpoints} items.\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.MoveAilmentCache.load_documents","title":"<code>load_documents(data)</code>","text":"<p>Load documents into the cache.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>List[Dict[str, str]]</code> <p>The data to load.</p> required Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def load_documents(self, data: t.List[t.Dict[str, str]]) -&gt; None:\n    \"\"\"Load documents into the cache.\n\n    Parameters\n    ----------\n    data: typing.List[typing.Dict[str, str]]\n        The data to load.\n    \"\"\"\n    for document in data:\n        self._endpoints[document[\"name\"]] = Endpoint(url=document[\"url\"], id=int(document[\"url\"].split(\"/\")[-2]))\n    self._endpoints_cached = True\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.MoveAilmentCache.save","title":"<code>save(path='.')</code>  <code>async</code>","text":"<p>Save the cache to a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to save the cache to.</p> <code>'.'</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def save(self, path: str = \".\") -&gt; None:\n    \"\"\"Save the cache to a file.\n\n    Parameters\n    ----------\n    path: str\n        The path to save the cache to.\n    \"\"\"\n    pathlib.Path(path).mkdir(parents=True, exist_ok=True)\n    dummy: t.Dict[str, t.Dict[str, t.Any]] = {k.endpoint: v.raw for k, v in self.items()}\n    async with aiofiles.open(pathlib.Path(f\"{path}/{self.__class__.__name__}.json\"), \"w\") as f:\n        await f.write(\"{\\n\")\n        for n, (k, v) in enumerate(dummy.items()):\n            await f.write(\"\\n\".join([4 * \" \" + i for i in f'\"{k}\": {json.dumps(v, indent=4)}'.split(\"\\n\")]))\n            if n != len(dummy) - 1:\n                await f.write(\",\\n\")\n        await f.write(\"\\n}\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.MoveAilmentCache.set_size","title":"<code>set_size(size)</code>","text":"<p>Set the size of the cache.</p> <p>Parameters:</p> Name Type Description Default <code>size</code> <code>int</code> <p>The size of the cache.</p> required Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def set_size(self, size: int) -&gt; None:\n    \"\"\"Set the size of the cache.\n\n    Parameters\n    ----------\n    size: int\n        The size of the cache.\n    \"\"\"\n    self._max_size = size\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.MoveAilmentCache.wait_until_ready","title":"<code>wait_until_ready()</code>  <code>async</code>","text":"<p>Wait until the all the endpoints are cached.</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def wait_until_ready(self) -&gt; None:\n    \"\"\"Wait until the all the endpoints are cached.\"\"\"\n    await self._client.http.connect()\n    while not self._endpoints_cached and self._client.cache_endpoints:\n        await asyncio.sleep(0.5)\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.MoveBattleStyleCache","title":"<code>MoveBattleStyleCache(max_size=100)</code>","text":"<p>               Bases: <code>BaseCache['Route', 'models.MoveBattleStyle']</code></p> <p>A cache for move battle styles.</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def __init__(self, max_size: int = 100) -&gt; None:\n    self._max_size = max_size\n    self._cache: t.Dict[_KT, _VT] = {}\n    self._endpoints: t.Dict[str, Endpoint] = {}\n    self._endpoints_cached: bool = False\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.MoveBattleStyleCache.cache","title":"<code>cache: t.Dict[_KT, _VT]</code>  <code>property</code>","text":"<p>The cache itself.</p> <p>Returns:</p> Type Description <code>Dict[_KT, _VT]</code> <p>The cache itself.</p>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.MoveBattleStyleCache.endpoints","title":"<code>endpoints: t.Dict[str, Endpoint]</code>  <code>property</code>","text":"<p>The endpoints that are cached.</p> <p>Returns:</p> Type Description <code>Dict[str, Endpoint]</code> <p>The endpoints that are cached.</p>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.MoveBattleStyleCache.load","title":"<code>load(path='.')</code>  <code>async</code>","text":"<p>Load the cache from a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to load the cache from.</p> <code>'.'</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load(self, path: str = \".\") -&gt; None:\n    \"\"\"Load the cache from a file.\n\n    Parameters\n    ----------\n    path: str\n        The path to load the cache from.\n    \"\"\"\n    async with aiofiles.open(pathlib.Path(f\"{path}/{self.__class__.__name__}.json\"), \"r\") as f:\n        data = json.loads(await f.read())\n    self._max_size = len(data)\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: t.Type[\"_VT\"] = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    for endpoint, info in data.items():\n        route = route_model(endpoint=endpoint)\n        self.setdefault(route, model.from_payload(info))\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.MoveBattleStyleCache.load_all","title":"<code>load_all()</code>  <code>async</code>","text":"<p>Load all documents/data from api into the cache. (Endpoints must be cached first)</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load_all(self) -&gt; None:\n    \"\"\"\n    Load all documents/data from api into the cache. (Endpoints must be cached first)\n    \"\"\"\n    if not self._endpoints_cached:\n        raise RuntimeError(\"The endpoints have not been cached yet.\")\n    self._client.logger.info(f\"Loading {self.__class__.__name__}...\")\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: \"models.BaseModel\" = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    self._max_size = len(self._endpoints)\n    for endpoint in self._endpoints.values():\n        route = route_model(endpoint=f\"/{endpoint.url.strip('/').split('/')[-2]}/{str(endpoint)}\")\n        data = self.get(route, None)\n        self.setdefault(route, data if data else model.from_payload(await self._client.http.request(route)))\n    self._client.logger.info(f\"Loaded {self.__class__.__name__}.\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.MoveBattleStyleCache.load_all_batch","title":"<code>load_all_batch(batch_size=20)</code>  <code>async</code>","text":"<p>Load all documents/data from api into the cache in parallel. (Endpoints must be cached first)</p> <p>Parameters:</p> Name Type Description Default <code>batch_size</code> <code>int</code> <p>The number of documents to load at once. Default is 20 to avoid overwhelming the API.</p> <code>20</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load_all_batch(self, batch_size: int = 20) -&gt; None:\n    \"\"\"\n    Load all documents/data from api into the cache in parallel. (Endpoints must be cached first)\n\n    Parameters\n    ----------\n    batch_size: int\n        The number of documents to load at once. Default is 20 to avoid overwhelming the API.\n    \"\"\"\n    if not self._endpoints_cached:\n        raise RuntimeError(\"The endpoints have not been cached yet.\")\n    self._client.logger.info(f\"Loading {self.__class__.__name__}...\")\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: t.Type[\"_VT\"] = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    self._max_size = len(self._endpoints)\n    endpoints = list(self._endpoints.values())\n    total_endpoints = len(endpoints)\n    for i in range(0, total_endpoints, batch_size):\n        batch = endpoints[i : i + batch_size]\n        tasks = []\n        for endpoint in batch:\n            route = route_model(endpoint=f\"/{endpoint.url.strip('/').split('/')[-2]}/{str(endpoint)}\")\n            data = self.get(route, None)\n            if data:\n                self.setdefault(route, data)\n                self._client.logger.info(f\"Cached {route} - existing data used.\")\n            else:\n                tasks.append(self._fetch_and_cache(route, model))\n        if tasks:\n            await asyncio.gather(*tasks)\n        self._client.logger.debug(\n            f\"Loaded batch {i//batch_size + 1}/{(total_endpoints + batch_size - 1)//batch_size} for {self.__class__.__name__}\"\n        )\n    self._client.logger.info(f\"Loaded {self.__class__.__name__} - {len(self._cache)}/{total_endpoints} items.\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.MoveBattleStyleCache.load_documents","title":"<code>load_documents(data)</code>","text":"<p>Load documents into the cache.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>List[Dict[str, str]]</code> <p>The data to load.</p> required Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def load_documents(self, data: t.List[t.Dict[str, str]]) -&gt; None:\n    \"\"\"Load documents into the cache.\n\n    Parameters\n    ----------\n    data: typing.List[typing.Dict[str, str]]\n        The data to load.\n    \"\"\"\n    for document in data:\n        self._endpoints[document[\"name\"]] = Endpoint(url=document[\"url\"], id=int(document[\"url\"].split(\"/\")[-2]))\n    self._endpoints_cached = True\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.MoveBattleStyleCache.save","title":"<code>save(path='.')</code>  <code>async</code>","text":"<p>Save the cache to a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to save the cache to.</p> <code>'.'</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def save(self, path: str = \".\") -&gt; None:\n    \"\"\"Save the cache to a file.\n\n    Parameters\n    ----------\n    path: str\n        The path to save the cache to.\n    \"\"\"\n    pathlib.Path(path).mkdir(parents=True, exist_ok=True)\n    dummy: t.Dict[str, t.Dict[str, t.Any]] = {k.endpoint: v.raw for k, v in self.items()}\n    async with aiofiles.open(pathlib.Path(f\"{path}/{self.__class__.__name__}.json\"), \"w\") as f:\n        await f.write(\"{\\n\")\n        for n, (k, v) in enumerate(dummy.items()):\n            await f.write(\"\\n\".join([4 * \" \" + i for i in f'\"{k}\": {json.dumps(v, indent=4)}'.split(\"\\n\")]))\n            if n != len(dummy) - 1:\n                await f.write(\",\\n\")\n        await f.write(\"\\n}\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.MoveBattleStyleCache.set_size","title":"<code>set_size(size)</code>","text":"<p>Set the size of the cache.</p> <p>Parameters:</p> Name Type Description Default <code>size</code> <code>int</code> <p>The size of the cache.</p> required Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def set_size(self, size: int) -&gt; None:\n    \"\"\"Set the size of the cache.\n\n    Parameters\n    ----------\n    size: int\n        The size of the cache.\n    \"\"\"\n    self._max_size = size\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.MoveBattleStyleCache.wait_until_ready","title":"<code>wait_until_ready()</code>  <code>async</code>","text":"<p>Wait until the all the endpoints are cached.</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def wait_until_ready(self) -&gt; None:\n    \"\"\"Wait until the all the endpoints are cached.\"\"\"\n    await self._client.http.connect()\n    while not self._endpoints_cached and self._client.cache_endpoints:\n        await asyncio.sleep(0.5)\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.MoveCache","title":"<code>MoveCache(max_size=100)</code>","text":"<p>               Bases: <code>BaseCache['Route', 'models.Move']</code></p> <p>A cache for moves.</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def __init__(self, max_size: int = 100) -&gt; None:\n    self._max_size = max_size\n    self._cache: t.Dict[_KT, _VT] = {}\n    self._endpoints: t.Dict[str, Endpoint] = {}\n    self._endpoints_cached: bool = False\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.MoveCache.cache","title":"<code>cache: t.Dict[_KT, _VT]</code>  <code>property</code>","text":"<p>The cache itself.</p> <p>Returns:</p> Type Description <code>Dict[_KT, _VT]</code> <p>The cache itself.</p>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.MoveCache.endpoints","title":"<code>endpoints: t.Dict[str, Endpoint]</code>  <code>property</code>","text":"<p>The endpoints that are cached.</p> <p>Returns:</p> Type Description <code>Dict[str, Endpoint]</code> <p>The endpoints that are cached.</p>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.MoveCache.load","title":"<code>load(path='.')</code>  <code>async</code>","text":"<p>Load the cache from a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to load the cache from.</p> <code>'.'</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load(self, path: str = \".\") -&gt; None:\n    \"\"\"Load the cache from a file.\n\n    Parameters\n    ----------\n    path: str\n        The path to load the cache from.\n    \"\"\"\n    async with aiofiles.open(pathlib.Path(f\"{path}/{self.__class__.__name__}.json\"), \"r\") as f:\n        data = json.loads(await f.read())\n    self._max_size = len(data)\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: t.Type[\"_VT\"] = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    for endpoint, info in data.items():\n        route = route_model(endpoint=endpoint)\n        self.setdefault(route, model.from_payload(info))\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.MoveCache.load_all","title":"<code>load_all()</code>  <code>async</code>","text":"<p>Load all documents/data from api into the cache. (Endpoints must be cached first)</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load_all(self) -&gt; None:\n    \"\"\"\n    Load all documents/data from api into the cache. (Endpoints must be cached first)\n    \"\"\"\n    if not self._endpoints_cached:\n        raise RuntimeError(\"The endpoints have not been cached yet.\")\n    self._client.logger.info(f\"Loading {self.__class__.__name__}...\")\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: \"models.BaseModel\" = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    self._max_size = len(self._endpoints)\n    for endpoint in self._endpoints.values():\n        route = route_model(endpoint=f\"/{endpoint.url.strip('/').split('/')[-2]}/{str(endpoint)}\")\n        data = self.get(route, None)\n        self.setdefault(route, data if data else model.from_payload(await self._client.http.request(route)))\n    self._client.logger.info(f\"Loaded {self.__class__.__name__}.\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.MoveCache.load_all_batch","title":"<code>load_all_batch(batch_size=20)</code>  <code>async</code>","text":"<p>Load all documents/data from api into the cache in parallel. (Endpoints must be cached first)</p> <p>Parameters:</p> Name Type Description Default <code>batch_size</code> <code>int</code> <p>The number of documents to load at once. Default is 20 to avoid overwhelming the API.</p> <code>20</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load_all_batch(self, batch_size: int = 20) -&gt; None:\n    \"\"\"\n    Load all documents/data from api into the cache in parallel. (Endpoints must be cached first)\n\n    Parameters\n    ----------\n    batch_size: int\n        The number of documents to load at once. Default is 20 to avoid overwhelming the API.\n    \"\"\"\n    if not self._endpoints_cached:\n        raise RuntimeError(\"The endpoints have not been cached yet.\")\n    self._client.logger.info(f\"Loading {self.__class__.__name__}...\")\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: t.Type[\"_VT\"] = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    self._max_size = len(self._endpoints)\n    endpoints = list(self._endpoints.values())\n    total_endpoints = len(endpoints)\n    for i in range(0, total_endpoints, batch_size):\n        batch = endpoints[i : i + batch_size]\n        tasks = []\n        for endpoint in batch:\n            route = route_model(endpoint=f\"/{endpoint.url.strip('/').split('/')[-2]}/{str(endpoint)}\")\n            data = self.get(route, None)\n            if data:\n                self.setdefault(route, data)\n                self._client.logger.info(f\"Cached {route} - existing data used.\")\n            else:\n                tasks.append(self._fetch_and_cache(route, model))\n        if tasks:\n            await asyncio.gather(*tasks)\n        self._client.logger.debug(\n            f\"Loaded batch {i//batch_size + 1}/{(total_endpoints + batch_size - 1)//batch_size} for {self.__class__.__name__}\"\n        )\n    self._client.logger.info(f\"Loaded {self.__class__.__name__} - {len(self._cache)}/{total_endpoints} items.\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.MoveCache.load_documents","title":"<code>load_documents(data)</code>","text":"<p>Load documents into the cache.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>List[Dict[str, str]]</code> <p>The data to load.</p> required Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def load_documents(self, data: t.List[t.Dict[str, str]]) -&gt; None:\n    \"\"\"Load documents into the cache.\n\n    Parameters\n    ----------\n    data: typing.List[typing.Dict[str, str]]\n        The data to load.\n    \"\"\"\n    for document in data:\n        self._endpoints[document[\"name\"]] = Endpoint(url=document[\"url\"], id=int(document[\"url\"].split(\"/\")[-2]))\n    self._endpoints_cached = True\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.MoveCache.save","title":"<code>save(path='.')</code>  <code>async</code>","text":"<p>Save the cache to a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to save the cache to.</p> <code>'.'</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def save(self, path: str = \".\") -&gt; None:\n    \"\"\"Save the cache to a file.\n\n    Parameters\n    ----------\n    path: str\n        The path to save the cache to.\n    \"\"\"\n    pathlib.Path(path).mkdir(parents=True, exist_ok=True)\n    dummy: t.Dict[str, t.Dict[str, t.Any]] = {k.endpoint: v.raw for k, v in self.items()}\n    async with aiofiles.open(pathlib.Path(f\"{path}/{self.__class__.__name__}.json\"), \"w\") as f:\n        await f.write(\"{\\n\")\n        for n, (k, v) in enumerate(dummy.items()):\n            await f.write(\"\\n\".join([4 * \" \" + i for i in f'\"{k}\": {json.dumps(v, indent=4)}'.split(\"\\n\")]))\n            if n != len(dummy) - 1:\n                await f.write(\",\\n\")\n        await f.write(\"\\n}\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.MoveCache.set_size","title":"<code>set_size(size)</code>","text":"<p>Set the size of the cache.</p> <p>Parameters:</p> Name Type Description Default <code>size</code> <code>int</code> <p>The size of the cache.</p> required Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def set_size(self, size: int) -&gt; None:\n    \"\"\"Set the size of the cache.\n\n    Parameters\n    ----------\n    size: int\n        The size of the cache.\n    \"\"\"\n    self._max_size = size\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.MoveCache.wait_until_ready","title":"<code>wait_until_ready()</code>  <code>async</code>","text":"<p>Wait until the all the endpoints are cached.</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def wait_until_ready(self) -&gt; None:\n    \"\"\"Wait until the all the endpoints are cached.\"\"\"\n    await self._client.http.connect()\n    while not self._endpoints_cached and self._client.cache_endpoints:\n        await asyncio.sleep(0.5)\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.MoveCategoryCache","title":"<code>MoveCategoryCache(max_size=100)</code>","text":"<p>               Bases: <code>BaseCache['Route', 'models.MoveCategory']</code></p> <p>A cache for move categories.</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def __init__(self, max_size: int = 100) -&gt; None:\n    self._max_size = max_size\n    self._cache: t.Dict[_KT, _VT] = {}\n    self._endpoints: t.Dict[str, Endpoint] = {}\n    self._endpoints_cached: bool = False\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.MoveCategoryCache.cache","title":"<code>cache: t.Dict[_KT, _VT]</code>  <code>property</code>","text":"<p>The cache itself.</p> <p>Returns:</p> Type Description <code>Dict[_KT, _VT]</code> <p>The cache itself.</p>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.MoveCategoryCache.endpoints","title":"<code>endpoints: t.Dict[str, Endpoint]</code>  <code>property</code>","text":"<p>The endpoints that are cached.</p> <p>Returns:</p> Type Description <code>Dict[str, Endpoint]</code> <p>The endpoints that are cached.</p>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.MoveCategoryCache.load","title":"<code>load(path='.')</code>  <code>async</code>","text":"<p>Load the cache from a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to load the cache from.</p> <code>'.'</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load(self, path: str = \".\") -&gt; None:\n    \"\"\"Load the cache from a file.\n\n    Parameters\n    ----------\n    path: str\n        The path to load the cache from.\n    \"\"\"\n    async with aiofiles.open(pathlib.Path(f\"{path}/{self.__class__.__name__}.json\"), \"r\") as f:\n        data = json.loads(await f.read())\n    self._max_size = len(data)\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: t.Type[\"_VT\"] = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    for endpoint, info in data.items():\n        route = route_model(endpoint=endpoint)\n        self.setdefault(route, model.from_payload(info))\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.MoveCategoryCache.load_all","title":"<code>load_all()</code>  <code>async</code>","text":"<p>Load all documents/data from api into the cache. (Endpoints must be cached first)</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load_all(self) -&gt; None:\n    \"\"\"\n    Load all documents/data from api into the cache. (Endpoints must be cached first)\n    \"\"\"\n    if not self._endpoints_cached:\n        raise RuntimeError(\"The endpoints have not been cached yet.\")\n    self._client.logger.info(f\"Loading {self.__class__.__name__}...\")\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: \"models.BaseModel\" = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    self._max_size = len(self._endpoints)\n    for endpoint in self._endpoints.values():\n        route = route_model(endpoint=f\"/{endpoint.url.strip('/').split('/')[-2]}/{str(endpoint)}\")\n        data = self.get(route, None)\n        self.setdefault(route, data if data else model.from_payload(await self._client.http.request(route)))\n    self._client.logger.info(f\"Loaded {self.__class__.__name__}.\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.MoveCategoryCache.load_all_batch","title":"<code>load_all_batch(batch_size=20)</code>  <code>async</code>","text":"<p>Load all documents/data from api into the cache in parallel. (Endpoints must be cached first)</p> <p>Parameters:</p> Name Type Description Default <code>batch_size</code> <code>int</code> <p>The number of documents to load at once. Default is 20 to avoid overwhelming the API.</p> <code>20</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load_all_batch(self, batch_size: int = 20) -&gt; None:\n    \"\"\"\n    Load all documents/data from api into the cache in parallel. (Endpoints must be cached first)\n\n    Parameters\n    ----------\n    batch_size: int\n        The number of documents to load at once. Default is 20 to avoid overwhelming the API.\n    \"\"\"\n    if not self._endpoints_cached:\n        raise RuntimeError(\"The endpoints have not been cached yet.\")\n    self._client.logger.info(f\"Loading {self.__class__.__name__}...\")\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: t.Type[\"_VT\"] = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    self._max_size = len(self._endpoints)\n    endpoints = list(self._endpoints.values())\n    total_endpoints = len(endpoints)\n    for i in range(0, total_endpoints, batch_size):\n        batch = endpoints[i : i + batch_size]\n        tasks = []\n        for endpoint in batch:\n            route = route_model(endpoint=f\"/{endpoint.url.strip('/').split('/')[-2]}/{str(endpoint)}\")\n            data = self.get(route, None)\n            if data:\n                self.setdefault(route, data)\n                self._client.logger.info(f\"Cached {route} - existing data used.\")\n            else:\n                tasks.append(self._fetch_and_cache(route, model))\n        if tasks:\n            await asyncio.gather(*tasks)\n        self._client.logger.debug(\n            f\"Loaded batch {i//batch_size + 1}/{(total_endpoints + batch_size - 1)//batch_size} for {self.__class__.__name__}\"\n        )\n    self._client.logger.info(f\"Loaded {self.__class__.__name__} - {len(self._cache)}/{total_endpoints} items.\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.MoveCategoryCache.load_documents","title":"<code>load_documents(data)</code>","text":"<p>Load documents into the cache.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>List[Dict[str, str]]</code> <p>The data to load.</p> required Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def load_documents(self, data: t.List[t.Dict[str, str]]) -&gt; None:\n    \"\"\"Load documents into the cache.\n\n    Parameters\n    ----------\n    data: typing.List[typing.Dict[str, str]]\n        The data to load.\n    \"\"\"\n    for document in data:\n        self._endpoints[document[\"name\"]] = Endpoint(url=document[\"url\"], id=int(document[\"url\"].split(\"/\")[-2]))\n    self._endpoints_cached = True\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.MoveCategoryCache.save","title":"<code>save(path='.')</code>  <code>async</code>","text":"<p>Save the cache to a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to save the cache to.</p> <code>'.'</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def save(self, path: str = \".\") -&gt; None:\n    \"\"\"Save the cache to a file.\n\n    Parameters\n    ----------\n    path: str\n        The path to save the cache to.\n    \"\"\"\n    pathlib.Path(path).mkdir(parents=True, exist_ok=True)\n    dummy: t.Dict[str, t.Dict[str, t.Any]] = {k.endpoint: v.raw for k, v in self.items()}\n    async with aiofiles.open(pathlib.Path(f\"{path}/{self.__class__.__name__}.json\"), \"w\") as f:\n        await f.write(\"{\\n\")\n        for n, (k, v) in enumerate(dummy.items()):\n            await f.write(\"\\n\".join([4 * \" \" + i for i in f'\"{k}\": {json.dumps(v, indent=4)}'.split(\"\\n\")]))\n            if n != len(dummy) - 1:\n                await f.write(\",\\n\")\n        await f.write(\"\\n}\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.MoveCategoryCache.set_size","title":"<code>set_size(size)</code>","text":"<p>Set the size of the cache.</p> <p>Parameters:</p> Name Type Description Default <code>size</code> <code>int</code> <p>The size of the cache.</p> required Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def set_size(self, size: int) -&gt; None:\n    \"\"\"Set the size of the cache.\n\n    Parameters\n    ----------\n    size: int\n        The size of the cache.\n    \"\"\"\n    self._max_size = size\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.MoveCategoryCache.wait_until_ready","title":"<code>wait_until_ready()</code>  <code>async</code>","text":"<p>Wait until the all the endpoints are cached.</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def wait_until_ready(self) -&gt; None:\n    \"\"\"Wait until the all the endpoints are cached.\"\"\"\n    await self._client.http.connect()\n    while not self._endpoints_cached and self._client.cache_endpoints:\n        await asyncio.sleep(0.5)\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.MoveDamageClassCache","title":"<code>MoveDamageClassCache(max_size=100)</code>","text":"<p>               Bases: <code>BaseCache['Route', 'models.MoveDamageClass']</code></p> <p>A cache for move damage classes.</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def __init__(self, max_size: int = 100) -&gt; None:\n    self._max_size = max_size\n    self._cache: t.Dict[_KT, _VT] = {}\n    self._endpoints: t.Dict[str, Endpoint] = {}\n    self._endpoints_cached: bool = False\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.MoveDamageClassCache.cache","title":"<code>cache: t.Dict[_KT, _VT]</code>  <code>property</code>","text":"<p>The cache itself.</p> <p>Returns:</p> Type Description <code>Dict[_KT, _VT]</code> <p>The cache itself.</p>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.MoveDamageClassCache.endpoints","title":"<code>endpoints: t.Dict[str, Endpoint]</code>  <code>property</code>","text":"<p>The endpoints that are cached.</p> <p>Returns:</p> Type Description <code>Dict[str, Endpoint]</code> <p>The endpoints that are cached.</p>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.MoveDamageClassCache.load","title":"<code>load(path='.')</code>  <code>async</code>","text":"<p>Load the cache from a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to load the cache from.</p> <code>'.'</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load(self, path: str = \".\") -&gt; None:\n    \"\"\"Load the cache from a file.\n\n    Parameters\n    ----------\n    path: str\n        The path to load the cache from.\n    \"\"\"\n    async with aiofiles.open(pathlib.Path(f\"{path}/{self.__class__.__name__}.json\"), \"r\") as f:\n        data = json.loads(await f.read())\n    self._max_size = len(data)\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: t.Type[\"_VT\"] = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    for endpoint, info in data.items():\n        route = route_model(endpoint=endpoint)\n        self.setdefault(route, model.from_payload(info))\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.MoveDamageClassCache.load_all","title":"<code>load_all()</code>  <code>async</code>","text":"<p>Load all documents/data from api into the cache. (Endpoints must be cached first)</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load_all(self) -&gt; None:\n    \"\"\"\n    Load all documents/data from api into the cache. (Endpoints must be cached first)\n    \"\"\"\n    if not self._endpoints_cached:\n        raise RuntimeError(\"The endpoints have not been cached yet.\")\n    self._client.logger.info(f\"Loading {self.__class__.__name__}...\")\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: \"models.BaseModel\" = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    self._max_size = len(self._endpoints)\n    for endpoint in self._endpoints.values():\n        route = route_model(endpoint=f\"/{endpoint.url.strip('/').split('/')[-2]}/{str(endpoint)}\")\n        data = self.get(route, None)\n        self.setdefault(route, data if data else model.from_payload(await self._client.http.request(route)))\n    self._client.logger.info(f\"Loaded {self.__class__.__name__}.\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.MoveDamageClassCache.load_all_batch","title":"<code>load_all_batch(batch_size=20)</code>  <code>async</code>","text":"<p>Load all documents/data from api into the cache in parallel. (Endpoints must be cached first)</p> <p>Parameters:</p> Name Type Description Default <code>batch_size</code> <code>int</code> <p>The number of documents to load at once. Default is 20 to avoid overwhelming the API.</p> <code>20</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load_all_batch(self, batch_size: int = 20) -&gt; None:\n    \"\"\"\n    Load all documents/data from api into the cache in parallel. (Endpoints must be cached first)\n\n    Parameters\n    ----------\n    batch_size: int\n        The number of documents to load at once. Default is 20 to avoid overwhelming the API.\n    \"\"\"\n    if not self._endpoints_cached:\n        raise RuntimeError(\"The endpoints have not been cached yet.\")\n    self._client.logger.info(f\"Loading {self.__class__.__name__}...\")\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: t.Type[\"_VT\"] = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    self._max_size = len(self._endpoints)\n    endpoints = list(self._endpoints.values())\n    total_endpoints = len(endpoints)\n    for i in range(0, total_endpoints, batch_size):\n        batch = endpoints[i : i + batch_size]\n        tasks = []\n        for endpoint in batch:\n            route = route_model(endpoint=f\"/{endpoint.url.strip('/').split('/')[-2]}/{str(endpoint)}\")\n            data = self.get(route, None)\n            if data:\n                self.setdefault(route, data)\n                self._client.logger.info(f\"Cached {route} - existing data used.\")\n            else:\n                tasks.append(self._fetch_and_cache(route, model))\n        if tasks:\n            await asyncio.gather(*tasks)\n        self._client.logger.debug(\n            f\"Loaded batch {i//batch_size + 1}/{(total_endpoints + batch_size - 1)//batch_size} for {self.__class__.__name__}\"\n        )\n    self._client.logger.info(f\"Loaded {self.__class__.__name__} - {len(self._cache)}/{total_endpoints} items.\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.MoveDamageClassCache.load_documents","title":"<code>load_documents(data)</code>","text":"<p>Load documents into the cache.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>List[Dict[str, str]]</code> <p>The data to load.</p> required Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def load_documents(self, data: t.List[t.Dict[str, str]]) -&gt; None:\n    \"\"\"Load documents into the cache.\n\n    Parameters\n    ----------\n    data: typing.List[typing.Dict[str, str]]\n        The data to load.\n    \"\"\"\n    for document in data:\n        self._endpoints[document[\"name\"]] = Endpoint(url=document[\"url\"], id=int(document[\"url\"].split(\"/\")[-2]))\n    self._endpoints_cached = True\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.MoveDamageClassCache.save","title":"<code>save(path='.')</code>  <code>async</code>","text":"<p>Save the cache to a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to save the cache to.</p> <code>'.'</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def save(self, path: str = \".\") -&gt; None:\n    \"\"\"Save the cache to a file.\n\n    Parameters\n    ----------\n    path: str\n        The path to save the cache to.\n    \"\"\"\n    pathlib.Path(path).mkdir(parents=True, exist_ok=True)\n    dummy: t.Dict[str, t.Dict[str, t.Any]] = {k.endpoint: v.raw for k, v in self.items()}\n    async with aiofiles.open(pathlib.Path(f\"{path}/{self.__class__.__name__}.json\"), \"w\") as f:\n        await f.write(\"{\\n\")\n        for n, (k, v) in enumerate(dummy.items()):\n            await f.write(\"\\n\".join([4 * \" \" + i for i in f'\"{k}\": {json.dumps(v, indent=4)}'.split(\"\\n\")]))\n            if n != len(dummy) - 1:\n                await f.write(\",\\n\")\n        await f.write(\"\\n}\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.MoveDamageClassCache.set_size","title":"<code>set_size(size)</code>","text":"<p>Set the size of the cache.</p> <p>Parameters:</p> Name Type Description Default <code>size</code> <code>int</code> <p>The size of the cache.</p> required Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def set_size(self, size: int) -&gt; None:\n    \"\"\"Set the size of the cache.\n\n    Parameters\n    ----------\n    size: int\n        The size of the cache.\n    \"\"\"\n    self._max_size = size\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.MoveDamageClassCache.wait_until_ready","title":"<code>wait_until_ready()</code>  <code>async</code>","text":"<p>Wait until the all the endpoints are cached.</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def wait_until_ready(self) -&gt; None:\n    \"\"\"Wait until the all the endpoints are cached.\"\"\"\n    await self._client.http.connect()\n    while not self._endpoints_cached and self._client.cache_endpoints:\n        await asyncio.sleep(0.5)\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.MoveLearnMethodCache","title":"<code>MoveLearnMethodCache(max_size=100)</code>","text":"<p>               Bases: <code>BaseCache['Route', 'models.MoveLearnMethod']</code></p> <p>A cache for move learn methods.</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def __init__(self, max_size: int = 100) -&gt; None:\n    self._max_size = max_size\n    self._cache: t.Dict[_KT, _VT] = {}\n    self._endpoints: t.Dict[str, Endpoint] = {}\n    self._endpoints_cached: bool = False\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.MoveLearnMethodCache.cache","title":"<code>cache: t.Dict[_KT, _VT]</code>  <code>property</code>","text":"<p>The cache itself.</p> <p>Returns:</p> Type Description <code>Dict[_KT, _VT]</code> <p>The cache itself.</p>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.MoveLearnMethodCache.endpoints","title":"<code>endpoints: t.Dict[str, Endpoint]</code>  <code>property</code>","text":"<p>The endpoints that are cached.</p> <p>Returns:</p> Type Description <code>Dict[str, Endpoint]</code> <p>The endpoints that are cached.</p>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.MoveLearnMethodCache.load","title":"<code>load(path='.')</code>  <code>async</code>","text":"<p>Load the cache from a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to load the cache from.</p> <code>'.'</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load(self, path: str = \".\") -&gt; None:\n    \"\"\"Load the cache from a file.\n\n    Parameters\n    ----------\n    path: str\n        The path to load the cache from.\n    \"\"\"\n    async with aiofiles.open(pathlib.Path(f\"{path}/{self.__class__.__name__}.json\"), \"r\") as f:\n        data = json.loads(await f.read())\n    self._max_size = len(data)\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: t.Type[\"_VT\"] = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    for endpoint, info in data.items():\n        route = route_model(endpoint=endpoint)\n        self.setdefault(route, model.from_payload(info))\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.MoveLearnMethodCache.load_all","title":"<code>load_all()</code>  <code>async</code>","text":"<p>Load all documents/data from api into the cache. (Endpoints must be cached first)</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load_all(self) -&gt; None:\n    \"\"\"\n    Load all documents/data from api into the cache. (Endpoints must be cached first)\n    \"\"\"\n    if not self._endpoints_cached:\n        raise RuntimeError(\"The endpoints have not been cached yet.\")\n    self._client.logger.info(f\"Loading {self.__class__.__name__}...\")\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: \"models.BaseModel\" = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    self._max_size = len(self._endpoints)\n    for endpoint in self._endpoints.values():\n        route = route_model(endpoint=f\"/{endpoint.url.strip('/').split('/')[-2]}/{str(endpoint)}\")\n        data = self.get(route, None)\n        self.setdefault(route, data if data else model.from_payload(await self._client.http.request(route)))\n    self._client.logger.info(f\"Loaded {self.__class__.__name__}.\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.MoveLearnMethodCache.load_all_batch","title":"<code>load_all_batch(batch_size=20)</code>  <code>async</code>","text":"<p>Load all documents/data from api into the cache in parallel. (Endpoints must be cached first)</p> <p>Parameters:</p> Name Type Description Default <code>batch_size</code> <code>int</code> <p>The number of documents to load at once. Default is 20 to avoid overwhelming the API.</p> <code>20</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load_all_batch(self, batch_size: int = 20) -&gt; None:\n    \"\"\"\n    Load all documents/data from api into the cache in parallel. (Endpoints must be cached first)\n\n    Parameters\n    ----------\n    batch_size: int\n        The number of documents to load at once. Default is 20 to avoid overwhelming the API.\n    \"\"\"\n    if not self._endpoints_cached:\n        raise RuntimeError(\"The endpoints have not been cached yet.\")\n    self._client.logger.info(f\"Loading {self.__class__.__name__}...\")\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: t.Type[\"_VT\"] = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    self._max_size = len(self._endpoints)\n    endpoints = list(self._endpoints.values())\n    total_endpoints = len(endpoints)\n    for i in range(0, total_endpoints, batch_size):\n        batch = endpoints[i : i + batch_size]\n        tasks = []\n        for endpoint in batch:\n            route = route_model(endpoint=f\"/{endpoint.url.strip('/').split('/')[-2]}/{str(endpoint)}\")\n            data = self.get(route, None)\n            if data:\n                self.setdefault(route, data)\n                self._client.logger.info(f\"Cached {route} - existing data used.\")\n            else:\n                tasks.append(self._fetch_and_cache(route, model))\n        if tasks:\n            await asyncio.gather(*tasks)\n        self._client.logger.debug(\n            f\"Loaded batch {i//batch_size + 1}/{(total_endpoints + batch_size - 1)//batch_size} for {self.__class__.__name__}\"\n        )\n    self._client.logger.info(f\"Loaded {self.__class__.__name__} - {len(self._cache)}/{total_endpoints} items.\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.MoveLearnMethodCache.load_documents","title":"<code>load_documents(data)</code>","text":"<p>Load documents into the cache.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>List[Dict[str, str]]</code> <p>The data to load.</p> required Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def load_documents(self, data: t.List[t.Dict[str, str]]) -&gt; None:\n    \"\"\"Load documents into the cache.\n\n    Parameters\n    ----------\n    data: typing.List[typing.Dict[str, str]]\n        The data to load.\n    \"\"\"\n    for document in data:\n        self._endpoints[document[\"name\"]] = Endpoint(url=document[\"url\"], id=int(document[\"url\"].split(\"/\")[-2]))\n    self._endpoints_cached = True\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.MoveLearnMethodCache.save","title":"<code>save(path='.')</code>  <code>async</code>","text":"<p>Save the cache to a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to save the cache to.</p> <code>'.'</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def save(self, path: str = \".\") -&gt; None:\n    \"\"\"Save the cache to a file.\n\n    Parameters\n    ----------\n    path: str\n        The path to save the cache to.\n    \"\"\"\n    pathlib.Path(path).mkdir(parents=True, exist_ok=True)\n    dummy: t.Dict[str, t.Dict[str, t.Any]] = {k.endpoint: v.raw for k, v in self.items()}\n    async with aiofiles.open(pathlib.Path(f\"{path}/{self.__class__.__name__}.json\"), \"w\") as f:\n        await f.write(\"{\\n\")\n        for n, (k, v) in enumerate(dummy.items()):\n            await f.write(\"\\n\".join([4 * \" \" + i for i in f'\"{k}\": {json.dumps(v, indent=4)}'.split(\"\\n\")]))\n            if n != len(dummy) - 1:\n                await f.write(\",\\n\")\n        await f.write(\"\\n}\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.MoveLearnMethodCache.set_size","title":"<code>set_size(size)</code>","text":"<p>Set the size of the cache.</p> <p>Parameters:</p> Name Type Description Default <code>size</code> <code>int</code> <p>The size of the cache.</p> required Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def set_size(self, size: int) -&gt; None:\n    \"\"\"Set the size of the cache.\n\n    Parameters\n    ----------\n    size: int\n        The size of the cache.\n    \"\"\"\n    self._max_size = size\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.MoveLearnMethodCache.wait_until_ready","title":"<code>wait_until_ready()</code>  <code>async</code>","text":"<p>Wait until the all the endpoints are cached.</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def wait_until_ready(self) -&gt; None:\n    \"\"\"Wait until the all the endpoints are cached.\"\"\"\n    await self._client.http.connect()\n    while not self._endpoints_cached and self._client.cache_endpoints:\n        await asyncio.sleep(0.5)\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.MoveTargetCache","title":"<code>MoveTargetCache(max_size=100)</code>","text":"<p>               Bases: <code>BaseCache['Route', 'models.MoveTarget']</code></p> <p>A cache for move targets.</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def __init__(self, max_size: int = 100) -&gt; None:\n    self._max_size = max_size\n    self._cache: t.Dict[_KT, _VT] = {}\n    self._endpoints: t.Dict[str, Endpoint] = {}\n    self._endpoints_cached: bool = False\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.MoveTargetCache.cache","title":"<code>cache: t.Dict[_KT, _VT]</code>  <code>property</code>","text":"<p>The cache itself.</p> <p>Returns:</p> Type Description <code>Dict[_KT, _VT]</code> <p>The cache itself.</p>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.MoveTargetCache.endpoints","title":"<code>endpoints: t.Dict[str, Endpoint]</code>  <code>property</code>","text":"<p>The endpoints that are cached.</p> <p>Returns:</p> Type Description <code>Dict[str, Endpoint]</code> <p>The endpoints that are cached.</p>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.MoveTargetCache.load","title":"<code>load(path='.')</code>  <code>async</code>","text":"<p>Load the cache from a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to load the cache from.</p> <code>'.'</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load(self, path: str = \".\") -&gt; None:\n    \"\"\"Load the cache from a file.\n\n    Parameters\n    ----------\n    path: str\n        The path to load the cache from.\n    \"\"\"\n    async with aiofiles.open(pathlib.Path(f\"{path}/{self.__class__.__name__}.json\"), \"r\") as f:\n        data = json.loads(await f.read())\n    self._max_size = len(data)\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: t.Type[\"_VT\"] = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    for endpoint, info in data.items():\n        route = route_model(endpoint=endpoint)\n        self.setdefault(route, model.from_payload(info))\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.MoveTargetCache.load_all","title":"<code>load_all()</code>  <code>async</code>","text":"<p>Load all documents/data from api into the cache. (Endpoints must be cached first)</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load_all(self) -&gt; None:\n    \"\"\"\n    Load all documents/data from api into the cache. (Endpoints must be cached first)\n    \"\"\"\n    if not self._endpoints_cached:\n        raise RuntimeError(\"The endpoints have not been cached yet.\")\n    self._client.logger.info(f\"Loading {self.__class__.__name__}...\")\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: \"models.BaseModel\" = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    self._max_size = len(self._endpoints)\n    for endpoint in self._endpoints.values():\n        route = route_model(endpoint=f\"/{endpoint.url.strip('/').split('/')[-2]}/{str(endpoint)}\")\n        data = self.get(route, None)\n        self.setdefault(route, data if data else model.from_payload(await self._client.http.request(route)))\n    self._client.logger.info(f\"Loaded {self.__class__.__name__}.\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.MoveTargetCache.load_all_batch","title":"<code>load_all_batch(batch_size=20)</code>  <code>async</code>","text":"<p>Load all documents/data from api into the cache in parallel. (Endpoints must be cached first)</p> <p>Parameters:</p> Name Type Description Default <code>batch_size</code> <code>int</code> <p>The number of documents to load at once. Default is 20 to avoid overwhelming the API.</p> <code>20</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load_all_batch(self, batch_size: int = 20) -&gt; None:\n    \"\"\"\n    Load all documents/data from api into the cache in parallel. (Endpoints must be cached first)\n\n    Parameters\n    ----------\n    batch_size: int\n        The number of documents to load at once. Default is 20 to avoid overwhelming the API.\n    \"\"\"\n    if not self._endpoints_cached:\n        raise RuntimeError(\"The endpoints have not been cached yet.\")\n    self._client.logger.info(f\"Loading {self.__class__.__name__}...\")\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: t.Type[\"_VT\"] = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    self._max_size = len(self._endpoints)\n    endpoints = list(self._endpoints.values())\n    total_endpoints = len(endpoints)\n    for i in range(0, total_endpoints, batch_size):\n        batch = endpoints[i : i + batch_size]\n        tasks = []\n        for endpoint in batch:\n            route = route_model(endpoint=f\"/{endpoint.url.strip('/').split('/')[-2]}/{str(endpoint)}\")\n            data = self.get(route, None)\n            if data:\n                self.setdefault(route, data)\n                self._client.logger.info(f\"Cached {route} - existing data used.\")\n            else:\n                tasks.append(self._fetch_and_cache(route, model))\n        if tasks:\n            await asyncio.gather(*tasks)\n        self._client.logger.debug(\n            f\"Loaded batch {i//batch_size + 1}/{(total_endpoints + batch_size - 1)//batch_size} for {self.__class__.__name__}\"\n        )\n    self._client.logger.info(f\"Loaded {self.__class__.__name__} - {len(self._cache)}/{total_endpoints} items.\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.MoveTargetCache.load_documents","title":"<code>load_documents(data)</code>","text":"<p>Load documents into the cache.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>List[Dict[str, str]]</code> <p>The data to load.</p> required Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def load_documents(self, data: t.List[t.Dict[str, str]]) -&gt; None:\n    \"\"\"Load documents into the cache.\n\n    Parameters\n    ----------\n    data: typing.List[typing.Dict[str, str]]\n        The data to load.\n    \"\"\"\n    for document in data:\n        self._endpoints[document[\"name\"]] = Endpoint(url=document[\"url\"], id=int(document[\"url\"].split(\"/\")[-2]))\n    self._endpoints_cached = True\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.MoveTargetCache.save","title":"<code>save(path='.')</code>  <code>async</code>","text":"<p>Save the cache to a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to save the cache to.</p> <code>'.'</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def save(self, path: str = \".\") -&gt; None:\n    \"\"\"Save the cache to a file.\n\n    Parameters\n    ----------\n    path: str\n        The path to save the cache to.\n    \"\"\"\n    pathlib.Path(path).mkdir(parents=True, exist_ok=True)\n    dummy: t.Dict[str, t.Dict[str, t.Any]] = {k.endpoint: v.raw for k, v in self.items()}\n    async with aiofiles.open(pathlib.Path(f\"{path}/{self.__class__.__name__}.json\"), \"w\") as f:\n        await f.write(\"{\\n\")\n        for n, (k, v) in enumerate(dummy.items()):\n            await f.write(\"\\n\".join([4 * \" \" + i for i in f'\"{k}\": {json.dumps(v, indent=4)}'.split(\"\\n\")]))\n            if n != len(dummy) - 1:\n                await f.write(\",\\n\")\n        await f.write(\"\\n}\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.MoveTargetCache.set_size","title":"<code>set_size(size)</code>","text":"<p>Set the size of the cache.</p> <p>Parameters:</p> Name Type Description Default <code>size</code> <code>int</code> <p>The size of the cache.</p> required Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def set_size(self, size: int) -&gt; None:\n    \"\"\"Set the size of the cache.\n\n    Parameters\n    ----------\n    size: int\n        The size of the cache.\n    \"\"\"\n    self._max_size = size\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.MoveTargetCache.wait_until_ready","title":"<code>wait_until_ready()</code>  <code>async</code>","text":"<p>Wait until the all the endpoints are cached.</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def wait_until_ready(self) -&gt; None:\n    \"\"\"Wait until the all the endpoints are cached.\"\"\"\n    await self._client.http.connect()\n    while not self._endpoints_cached and self._client.cache_endpoints:\n        await asyncio.sleep(0.5)\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.NatureCache","title":"<code>NatureCache(max_size=100)</code>","text":"<p>               Bases: <code>BaseCache['Route', 'models.Nature']</code></p> <p>A cache for natures.</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def __init__(self, max_size: int = 100) -&gt; None:\n    self._max_size = max_size\n    self._cache: t.Dict[_KT, _VT] = {}\n    self._endpoints: t.Dict[str, Endpoint] = {}\n    self._endpoints_cached: bool = False\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.NatureCache.cache","title":"<code>cache: t.Dict[_KT, _VT]</code>  <code>property</code>","text":"<p>The cache itself.</p> <p>Returns:</p> Type Description <code>Dict[_KT, _VT]</code> <p>The cache itself.</p>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.NatureCache.endpoints","title":"<code>endpoints: t.Dict[str, Endpoint]</code>  <code>property</code>","text":"<p>The endpoints that are cached.</p> <p>Returns:</p> Type Description <code>Dict[str, Endpoint]</code> <p>The endpoints that are cached.</p>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.NatureCache.load","title":"<code>load(path='.')</code>  <code>async</code>","text":"<p>Load the cache from a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to load the cache from.</p> <code>'.'</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load(self, path: str = \".\") -&gt; None:\n    \"\"\"Load the cache from a file.\n\n    Parameters\n    ----------\n    path: str\n        The path to load the cache from.\n    \"\"\"\n    async with aiofiles.open(pathlib.Path(f\"{path}/{self.__class__.__name__}.json\"), \"r\") as f:\n        data = json.loads(await f.read())\n    self._max_size = len(data)\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: t.Type[\"_VT\"] = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    for endpoint, info in data.items():\n        route = route_model(endpoint=endpoint)\n        self.setdefault(route, model.from_payload(info))\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.NatureCache.load_all","title":"<code>load_all()</code>  <code>async</code>","text":"<p>Load all documents/data from api into the cache. (Endpoints must be cached first)</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load_all(self) -&gt; None:\n    \"\"\"\n    Load all documents/data from api into the cache. (Endpoints must be cached first)\n    \"\"\"\n    if not self._endpoints_cached:\n        raise RuntimeError(\"The endpoints have not been cached yet.\")\n    self._client.logger.info(f\"Loading {self.__class__.__name__}...\")\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: \"models.BaseModel\" = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    self._max_size = len(self._endpoints)\n    for endpoint in self._endpoints.values():\n        route = route_model(endpoint=f\"/{endpoint.url.strip('/').split('/')[-2]}/{str(endpoint)}\")\n        data = self.get(route, None)\n        self.setdefault(route, data if data else model.from_payload(await self._client.http.request(route)))\n    self._client.logger.info(f\"Loaded {self.__class__.__name__}.\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.NatureCache.load_all_batch","title":"<code>load_all_batch(batch_size=20)</code>  <code>async</code>","text":"<p>Load all documents/data from api into the cache in parallel. (Endpoints must be cached first)</p> <p>Parameters:</p> Name Type Description Default <code>batch_size</code> <code>int</code> <p>The number of documents to load at once. Default is 20 to avoid overwhelming the API.</p> <code>20</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load_all_batch(self, batch_size: int = 20) -&gt; None:\n    \"\"\"\n    Load all documents/data from api into the cache in parallel. (Endpoints must be cached first)\n\n    Parameters\n    ----------\n    batch_size: int\n        The number of documents to load at once. Default is 20 to avoid overwhelming the API.\n    \"\"\"\n    if not self._endpoints_cached:\n        raise RuntimeError(\"The endpoints have not been cached yet.\")\n    self._client.logger.info(f\"Loading {self.__class__.__name__}...\")\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: t.Type[\"_VT\"] = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    self._max_size = len(self._endpoints)\n    endpoints = list(self._endpoints.values())\n    total_endpoints = len(endpoints)\n    for i in range(0, total_endpoints, batch_size):\n        batch = endpoints[i : i + batch_size]\n        tasks = []\n        for endpoint in batch:\n            route = route_model(endpoint=f\"/{endpoint.url.strip('/').split('/')[-2]}/{str(endpoint)}\")\n            data = self.get(route, None)\n            if data:\n                self.setdefault(route, data)\n                self._client.logger.info(f\"Cached {route} - existing data used.\")\n            else:\n                tasks.append(self._fetch_and_cache(route, model))\n        if tasks:\n            await asyncio.gather(*tasks)\n        self._client.logger.debug(\n            f\"Loaded batch {i//batch_size + 1}/{(total_endpoints + batch_size - 1)//batch_size} for {self.__class__.__name__}\"\n        )\n    self._client.logger.info(f\"Loaded {self.__class__.__name__} - {len(self._cache)}/{total_endpoints} items.\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.NatureCache.load_documents","title":"<code>load_documents(data)</code>","text":"<p>Load documents into the cache.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>List[Dict[str, str]]</code> <p>The data to load.</p> required Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def load_documents(self, data: t.List[t.Dict[str, str]]) -&gt; None:\n    \"\"\"Load documents into the cache.\n\n    Parameters\n    ----------\n    data: typing.List[typing.Dict[str, str]]\n        The data to load.\n    \"\"\"\n    for document in data:\n        self._endpoints[document[\"name\"]] = Endpoint(url=document[\"url\"], id=int(document[\"url\"].split(\"/\")[-2]))\n    self._endpoints_cached = True\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.NatureCache.save","title":"<code>save(path='.')</code>  <code>async</code>","text":"<p>Save the cache to a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to save the cache to.</p> <code>'.'</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def save(self, path: str = \".\") -&gt; None:\n    \"\"\"Save the cache to a file.\n\n    Parameters\n    ----------\n    path: str\n        The path to save the cache to.\n    \"\"\"\n    pathlib.Path(path).mkdir(parents=True, exist_ok=True)\n    dummy: t.Dict[str, t.Dict[str, t.Any]] = {k.endpoint: v.raw for k, v in self.items()}\n    async with aiofiles.open(pathlib.Path(f\"{path}/{self.__class__.__name__}.json\"), \"w\") as f:\n        await f.write(\"{\\n\")\n        for n, (k, v) in enumerate(dummy.items()):\n            await f.write(\"\\n\".join([4 * \" \" + i for i in f'\"{k}\": {json.dumps(v, indent=4)}'.split(\"\\n\")]))\n            if n != len(dummy) - 1:\n                await f.write(\",\\n\")\n        await f.write(\"\\n}\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.NatureCache.set_size","title":"<code>set_size(size)</code>","text":"<p>Set the size of the cache.</p> <p>Parameters:</p> Name Type Description Default <code>size</code> <code>int</code> <p>The size of the cache.</p> required Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def set_size(self, size: int) -&gt; None:\n    \"\"\"Set the size of the cache.\n\n    Parameters\n    ----------\n    size: int\n        The size of the cache.\n    \"\"\"\n    self._max_size = size\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.NatureCache.wait_until_ready","title":"<code>wait_until_ready()</code>  <code>async</code>","text":"<p>Wait until the all the endpoints are cached.</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def wait_until_ready(self) -&gt; None:\n    \"\"\"Wait until the all the endpoints are cached.\"\"\"\n    await self._client.http.connect()\n    while not self._endpoints_cached and self._client.cache_endpoints:\n        await asyncio.sleep(0.5)\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.PalParkAreaCache","title":"<code>PalParkAreaCache(max_size=100)</code>","text":"<p>               Bases: <code>BaseCache['Route', 'models.PalParkArea']</code></p> <p>A cache for pal park areas.</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def __init__(self, max_size: int = 100) -&gt; None:\n    self._max_size = max_size\n    self._cache: t.Dict[_KT, _VT] = {}\n    self._endpoints: t.Dict[str, Endpoint] = {}\n    self._endpoints_cached: bool = False\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.PalParkAreaCache.cache","title":"<code>cache: t.Dict[_KT, _VT]</code>  <code>property</code>","text":"<p>The cache itself.</p> <p>Returns:</p> Type Description <code>Dict[_KT, _VT]</code> <p>The cache itself.</p>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.PalParkAreaCache.endpoints","title":"<code>endpoints: t.Dict[str, Endpoint]</code>  <code>property</code>","text":"<p>The endpoints that are cached.</p> <p>Returns:</p> Type Description <code>Dict[str, Endpoint]</code> <p>The endpoints that are cached.</p>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.PalParkAreaCache.load","title":"<code>load(path='.')</code>  <code>async</code>","text":"<p>Load the cache from a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to load the cache from.</p> <code>'.'</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load(self, path: str = \".\") -&gt; None:\n    \"\"\"Load the cache from a file.\n\n    Parameters\n    ----------\n    path: str\n        The path to load the cache from.\n    \"\"\"\n    async with aiofiles.open(pathlib.Path(f\"{path}/{self.__class__.__name__}.json\"), \"r\") as f:\n        data = json.loads(await f.read())\n    self._max_size = len(data)\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: t.Type[\"_VT\"] = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    for endpoint, info in data.items():\n        route = route_model(endpoint=endpoint)\n        self.setdefault(route, model.from_payload(info))\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.PalParkAreaCache.load_all","title":"<code>load_all()</code>  <code>async</code>","text":"<p>Load all documents/data from api into the cache. (Endpoints must be cached first)</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load_all(self) -&gt; None:\n    \"\"\"\n    Load all documents/data from api into the cache. (Endpoints must be cached first)\n    \"\"\"\n    if not self._endpoints_cached:\n        raise RuntimeError(\"The endpoints have not been cached yet.\")\n    self._client.logger.info(f\"Loading {self.__class__.__name__}...\")\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: \"models.BaseModel\" = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    self._max_size = len(self._endpoints)\n    for endpoint in self._endpoints.values():\n        route = route_model(endpoint=f\"/{endpoint.url.strip('/').split('/')[-2]}/{str(endpoint)}\")\n        data = self.get(route, None)\n        self.setdefault(route, data if data else model.from_payload(await self._client.http.request(route)))\n    self._client.logger.info(f\"Loaded {self.__class__.__name__}.\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.PalParkAreaCache.load_all_batch","title":"<code>load_all_batch(batch_size=20)</code>  <code>async</code>","text":"<p>Load all documents/data from api into the cache in parallel. (Endpoints must be cached first)</p> <p>Parameters:</p> Name Type Description Default <code>batch_size</code> <code>int</code> <p>The number of documents to load at once. Default is 20 to avoid overwhelming the API.</p> <code>20</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load_all_batch(self, batch_size: int = 20) -&gt; None:\n    \"\"\"\n    Load all documents/data from api into the cache in parallel. (Endpoints must be cached first)\n\n    Parameters\n    ----------\n    batch_size: int\n        The number of documents to load at once. Default is 20 to avoid overwhelming the API.\n    \"\"\"\n    if not self._endpoints_cached:\n        raise RuntimeError(\"The endpoints have not been cached yet.\")\n    self._client.logger.info(f\"Loading {self.__class__.__name__}...\")\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: t.Type[\"_VT\"] = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    self._max_size = len(self._endpoints)\n    endpoints = list(self._endpoints.values())\n    total_endpoints = len(endpoints)\n    for i in range(0, total_endpoints, batch_size):\n        batch = endpoints[i : i + batch_size]\n        tasks = []\n        for endpoint in batch:\n            route = route_model(endpoint=f\"/{endpoint.url.strip('/').split('/')[-2]}/{str(endpoint)}\")\n            data = self.get(route, None)\n            if data:\n                self.setdefault(route, data)\n                self._client.logger.info(f\"Cached {route} - existing data used.\")\n            else:\n                tasks.append(self._fetch_and_cache(route, model))\n        if tasks:\n            await asyncio.gather(*tasks)\n        self._client.logger.debug(\n            f\"Loaded batch {i//batch_size + 1}/{(total_endpoints + batch_size - 1)//batch_size} for {self.__class__.__name__}\"\n        )\n    self._client.logger.info(f\"Loaded {self.__class__.__name__} - {len(self._cache)}/{total_endpoints} items.\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.PalParkAreaCache.load_documents","title":"<code>load_documents(data)</code>","text":"<p>Load documents into the cache.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>List[Dict[str, str]]</code> <p>The data to load.</p> required Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def load_documents(self, data: t.List[t.Dict[str, str]]) -&gt; None:\n    \"\"\"Load documents into the cache.\n\n    Parameters\n    ----------\n    data: typing.List[typing.Dict[str, str]]\n        The data to load.\n    \"\"\"\n    for document in data:\n        self._endpoints[document[\"name\"]] = Endpoint(url=document[\"url\"], id=int(document[\"url\"].split(\"/\")[-2]))\n    self._endpoints_cached = True\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.PalParkAreaCache.save","title":"<code>save(path='.')</code>  <code>async</code>","text":"<p>Save the cache to a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to save the cache to.</p> <code>'.'</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def save(self, path: str = \".\") -&gt; None:\n    \"\"\"Save the cache to a file.\n\n    Parameters\n    ----------\n    path: str\n        The path to save the cache to.\n    \"\"\"\n    pathlib.Path(path).mkdir(parents=True, exist_ok=True)\n    dummy: t.Dict[str, t.Dict[str, t.Any]] = {k.endpoint: v.raw for k, v in self.items()}\n    async with aiofiles.open(pathlib.Path(f\"{path}/{self.__class__.__name__}.json\"), \"w\") as f:\n        await f.write(\"{\\n\")\n        for n, (k, v) in enumerate(dummy.items()):\n            await f.write(\"\\n\".join([4 * \" \" + i for i in f'\"{k}\": {json.dumps(v, indent=4)}'.split(\"\\n\")]))\n            if n != len(dummy) - 1:\n                await f.write(\",\\n\")\n        await f.write(\"\\n}\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.PalParkAreaCache.set_size","title":"<code>set_size(size)</code>","text":"<p>Set the size of the cache.</p> <p>Parameters:</p> Name Type Description Default <code>size</code> <code>int</code> <p>The size of the cache.</p> required Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def set_size(self, size: int) -&gt; None:\n    \"\"\"Set the size of the cache.\n\n    Parameters\n    ----------\n    size: int\n        The size of the cache.\n    \"\"\"\n    self._max_size = size\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.PalParkAreaCache.wait_until_ready","title":"<code>wait_until_ready()</code>  <code>async</code>","text":"<p>Wait until the all the endpoints are cached.</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def wait_until_ready(self) -&gt; None:\n    \"\"\"Wait until the all the endpoints are cached.\"\"\"\n    await self._client.http.connect()\n    while not self._endpoints_cached and self._client.cache_endpoints:\n        await asyncio.sleep(0.5)\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.PokeathlonStatCache","title":"<code>PokeathlonStatCache(max_size=100)</code>","text":"<p>               Bases: <code>BaseCache['Route', 'models.PokeathlonStat']</code></p> <p>A cache for pokeathlon stats.</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def __init__(self, max_size: int = 100) -&gt; None:\n    self._max_size = max_size\n    self._cache: t.Dict[_KT, _VT] = {}\n    self._endpoints: t.Dict[str, Endpoint] = {}\n    self._endpoints_cached: bool = False\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.PokeathlonStatCache.cache","title":"<code>cache: t.Dict[_KT, _VT]</code>  <code>property</code>","text":"<p>The cache itself.</p> <p>Returns:</p> Type Description <code>Dict[_KT, _VT]</code> <p>The cache itself.</p>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.PokeathlonStatCache.endpoints","title":"<code>endpoints: t.Dict[str, Endpoint]</code>  <code>property</code>","text":"<p>The endpoints that are cached.</p> <p>Returns:</p> Type Description <code>Dict[str, Endpoint]</code> <p>The endpoints that are cached.</p>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.PokeathlonStatCache.load","title":"<code>load(path='.')</code>  <code>async</code>","text":"<p>Load the cache from a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to load the cache from.</p> <code>'.'</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load(self, path: str = \".\") -&gt; None:\n    \"\"\"Load the cache from a file.\n\n    Parameters\n    ----------\n    path: str\n        The path to load the cache from.\n    \"\"\"\n    async with aiofiles.open(pathlib.Path(f\"{path}/{self.__class__.__name__}.json\"), \"r\") as f:\n        data = json.loads(await f.read())\n    self._max_size = len(data)\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: t.Type[\"_VT\"] = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    for endpoint, info in data.items():\n        route = route_model(endpoint=endpoint)\n        self.setdefault(route, model.from_payload(info))\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.PokeathlonStatCache.load_all","title":"<code>load_all()</code>  <code>async</code>","text":"<p>Load all documents/data from api into the cache. (Endpoints must be cached first)</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load_all(self) -&gt; None:\n    \"\"\"\n    Load all documents/data from api into the cache. (Endpoints must be cached first)\n    \"\"\"\n    if not self._endpoints_cached:\n        raise RuntimeError(\"The endpoints have not been cached yet.\")\n    self._client.logger.info(f\"Loading {self.__class__.__name__}...\")\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: \"models.BaseModel\" = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    self._max_size = len(self._endpoints)\n    for endpoint in self._endpoints.values():\n        route = route_model(endpoint=f\"/{endpoint.url.strip('/').split('/')[-2]}/{str(endpoint)}\")\n        data = self.get(route, None)\n        self.setdefault(route, data if data else model.from_payload(await self._client.http.request(route)))\n    self._client.logger.info(f\"Loaded {self.__class__.__name__}.\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.PokeathlonStatCache.load_all_batch","title":"<code>load_all_batch(batch_size=20)</code>  <code>async</code>","text":"<p>Load all documents/data from api into the cache in parallel. (Endpoints must be cached first)</p> <p>Parameters:</p> Name Type Description Default <code>batch_size</code> <code>int</code> <p>The number of documents to load at once. Default is 20 to avoid overwhelming the API.</p> <code>20</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load_all_batch(self, batch_size: int = 20) -&gt; None:\n    \"\"\"\n    Load all documents/data from api into the cache in parallel. (Endpoints must be cached first)\n\n    Parameters\n    ----------\n    batch_size: int\n        The number of documents to load at once. Default is 20 to avoid overwhelming the API.\n    \"\"\"\n    if not self._endpoints_cached:\n        raise RuntimeError(\"The endpoints have not been cached yet.\")\n    self._client.logger.info(f\"Loading {self.__class__.__name__}...\")\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: t.Type[\"_VT\"] = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    self._max_size = len(self._endpoints)\n    endpoints = list(self._endpoints.values())\n    total_endpoints = len(endpoints)\n    for i in range(0, total_endpoints, batch_size):\n        batch = endpoints[i : i + batch_size]\n        tasks = []\n        for endpoint in batch:\n            route = route_model(endpoint=f\"/{endpoint.url.strip('/').split('/')[-2]}/{str(endpoint)}\")\n            data = self.get(route, None)\n            if data:\n                self.setdefault(route, data)\n                self._client.logger.info(f\"Cached {route} - existing data used.\")\n            else:\n                tasks.append(self._fetch_and_cache(route, model))\n        if tasks:\n            await asyncio.gather(*tasks)\n        self._client.logger.debug(\n            f\"Loaded batch {i//batch_size + 1}/{(total_endpoints + batch_size - 1)//batch_size} for {self.__class__.__name__}\"\n        )\n    self._client.logger.info(f\"Loaded {self.__class__.__name__} - {len(self._cache)}/{total_endpoints} items.\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.PokeathlonStatCache.load_documents","title":"<code>load_documents(data)</code>","text":"<p>Load documents into the cache.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>List[Dict[str, str]]</code> <p>The data to load.</p> required Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def load_documents(self, data: t.List[t.Dict[str, str]]) -&gt; None:\n    \"\"\"Load documents into the cache.\n\n    Parameters\n    ----------\n    data: typing.List[typing.Dict[str, str]]\n        The data to load.\n    \"\"\"\n    for document in data:\n        self._endpoints[document[\"name\"]] = Endpoint(url=document[\"url\"], id=int(document[\"url\"].split(\"/\")[-2]))\n    self._endpoints_cached = True\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.PokeathlonStatCache.save","title":"<code>save(path='.')</code>  <code>async</code>","text":"<p>Save the cache to a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to save the cache to.</p> <code>'.'</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def save(self, path: str = \".\") -&gt; None:\n    \"\"\"Save the cache to a file.\n\n    Parameters\n    ----------\n    path: str\n        The path to save the cache to.\n    \"\"\"\n    pathlib.Path(path).mkdir(parents=True, exist_ok=True)\n    dummy: t.Dict[str, t.Dict[str, t.Any]] = {k.endpoint: v.raw for k, v in self.items()}\n    async with aiofiles.open(pathlib.Path(f\"{path}/{self.__class__.__name__}.json\"), \"w\") as f:\n        await f.write(\"{\\n\")\n        for n, (k, v) in enumerate(dummy.items()):\n            await f.write(\"\\n\".join([4 * \" \" + i for i in f'\"{k}\": {json.dumps(v, indent=4)}'.split(\"\\n\")]))\n            if n != len(dummy) - 1:\n                await f.write(\",\\n\")\n        await f.write(\"\\n}\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.PokeathlonStatCache.set_size","title":"<code>set_size(size)</code>","text":"<p>Set the size of the cache.</p> <p>Parameters:</p> Name Type Description Default <code>size</code> <code>int</code> <p>The size of the cache.</p> required Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def set_size(self, size: int) -&gt; None:\n    \"\"\"Set the size of the cache.\n\n    Parameters\n    ----------\n    size: int\n        The size of the cache.\n    \"\"\"\n    self._max_size = size\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.PokeathlonStatCache.wait_until_ready","title":"<code>wait_until_ready()</code>  <code>async</code>","text":"<p>Wait until the all the endpoints are cached.</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def wait_until_ready(self) -&gt; None:\n    \"\"\"Wait until the all the endpoints are cached.\"\"\"\n    await self._client.http.connect()\n    while not self._endpoints_cached and self._client.cache_endpoints:\n        await asyncio.sleep(0.5)\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.PokemonCache","title":"<code>PokemonCache(max_size=100)</code>","text":"<p>               Bases: <code>BaseCache['Route', 'models.Pokemon']</code></p> <p>A cache for pokemon.</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def __init__(self, max_size: int = 100) -&gt; None:\n    self._max_size = max_size\n    self._cache: t.Dict[_KT, _VT] = {}\n    self._endpoints: t.Dict[str, Endpoint] = {}\n    self._endpoints_cached: bool = False\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.PokemonCache.cache","title":"<code>cache: t.Dict[_KT, _VT]</code>  <code>property</code>","text":"<p>The cache itself.</p> <p>Returns:</p> Type Description <code>Dict[_KT, _VT]</code> <p>The cache itself.</p>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.PokemonCache.endpoints","title":"<code>endpoints: t.Dict[str, Endpoint]</code>  <code>property</code>","text":"<p>The endpoints that are cached.</p> <p>Returns:</p> Type Description <code>Dict[str, Endpoint]</code> <p>The endpoints that are cached.</p>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.PokemonCache.load","title":"<code>load(path='.')</code>  <code>async</code>","text":"<p>Load the cache from a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to load the cache from.</p> <code>'.'</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load(self, path: str = \".\") -&gt; None:\n    \"\"\"Load the cache from a file.\n\n    Parameters\n    ----------\n    path: str\n        The path to load the cache from.\n    \"\"\"\n    async with aiofiles.open(pathlib.Path(f\"{path}/{self.__class__.__name__}.json\"), \"r\") as f:\n        data = json.loads(await f.read())\n    self._max_size = len(data)\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: t.Type[\"_VT\"] = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    for endpoint, info in data.items():\n        route = route_model(endpoint=endpoint)\n        self.setdefault(route, model.from_payload(info))\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.PokemonCache.load_all","title":"<code>load_all()</code>  <code>async</code>","text":"<p>Load all documents/data from api into the cache. (Endpoints must be cached first)</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load_all(self) -&gt; None:\n    \"\"\"\n    Load all documents/data from api into the cache. (Endpoints must be cached first)\n    \"\"\"\n    if not self._endpoints_cached:\n        raise RuntimeError(\"The endpoints have not been cached yet.\")\n    self._client.logger.info(f\"Loading {self.__class__.__name__}...\")\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: \"models.BaseModel\" = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    self._max_size = len(self._endpoints)\n    for endpoint in self._endpoints.values():\n        route = route_model(endpoint=f\"/{endpoint.url.strip('/').split('/')[-2]}/{str(endpoint)}\")\n        data = self.get(route, None)\n        self.setdefault(route, data if data else model.from_payload(await self._client.http.request(route)))\n    self._client.logger.info(f\"Loaded {self.__class__.__name__}.\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.PokemonCache.load_all_batch","title":"<code>load_all_batch(batch_size=20)</code>  <code>async</code>","text":"<p>Load all documents/data from api into the cache in parallel. (Endpoints must be cached first)</p> <p>Parameters:</p> Name Type Description Default <code>batch_size</code> <code>int</code> <p>The number of documents to load at once. Default is 20 to avoid overwhelming the API.</p> <code>20</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load_all_batch(self, batch_size: int = 20) -&gt; None:\n    \"\"\"\n    Load all documents/data from api into the cache in parallel. (Endpoints must be cached first)\n\n    Parameters\n    ----------\n    batch_size: int\n        The number of documents to load at once. Default is 20 to avoid overwhelming the API.\n    \"\"\"\n    if not self._endpoints_cached:\n        raise RuntimeError(\"The endpoints have not been cached yet.\")\n    self._client.logger.info(f\"Loading {self.__class__.__name__}...\")\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: t.Type[\"_VT\"] = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    self._max_size = len(self._endpoints)\n    endpoints = list(self._endpoints.values())\n    total_endpoints = len(endpoints)\n    for i in range(0, total_endpoints, batch_size):\n        batch = endpoints[i : i + batch_size]\n        tasks = []\n        for endpoint in batch:\n            route = route_model(endpoint=f\"/{endpoint.url.strip('/').split('/')[-2]}/{str(endpoint)}\")\n            data = self.get(route, None)\n            if data:\n                self.setdefault(route, data)\n                self._client.logger.info(f\"Cached {route} - existing data used.\")\n            else:\n                tasks.append(self._fetch_and_cache(route, model))\n        if tasks:\n            await asyncio.gather(*tasks)\n        self._client.logger.debug(\n            f\"Loaded batch {i//batch_size + 1}/{(total_endpoints + batch_size - 1)//batch_size} for {self.__class__.__name__}\"\n        )\n    self._client.logger.info(f\"Loaded {self.__class__.__name__} - {len(self._cache)}/{total_endpoints} items.\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.PokemonCache.load_documents","title":"<code>load_documents(data)</code>","text":"<p>Load documents into the cache.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>List[Dict[str, str]]</code> <p>The data to load.</p> required Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def load_documents(self, data: t.List[t.Dict[str, str]]) -&gt; None:\n    \"\"\"Load documents into the cache.\n\n    Parameters\n    ----------\n    data: typing.List[typing.Dict[str, str]]\n        The data to load.\n    \"\"\"\n    for document in data:\n        self._endpoints[document[\"name\"]] = Endpoint(url=document[\"url\"], id=int(document[\"url\"].split(\"/\")[-2]))\n    self._endpoints_cached = True\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.PokemonCache.save","title":"<code>save(path='.')</code>  <code>async</code>","text":"<p>Save the cache to a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to save the cache to.</p> <code>'.'</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def save(self, path: str = \".\") -&gt; None:\n    \"\"\"Save the cache to a file.\n\n    Parameters\n    ----------\n    path: str\n        The path to save the cache to.\n    \"\"\"\n    pathlib.Path(path).mkdir(parents=True, exist_ok=True)\n    dummy: t.Dict[str, t.Dict[str, t.Any]] = {k.endpoint: v.raw for k, v in self.items()}\n    async with aiofiles.open(pathlib.Path(f\"{path}/{self.__class__.__name__}.json\"), \"w\") as f:\n        await f.write(\"{\\n\")\n        for n, (k, v) in enumerate(dummy.items()):\n            await f.write(\"\\n\".join([4 * \" \" + i for i in f'\"{k}\": {json.dumps(v, indent=4)}'.split(\"\\n\")]))\n            if n != len(dummy) - 1:\n                await f.write(\",\\n\")\n        await f.write(\"\\n}\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.PokemonCache.set_size","title":"<code>set_size(size)</code>","text":"<p>Set the size of the cache.</p> <p>Parameters:</p> Name Type Description Default <code>size</code> <code>int</code> <p>The size of the cache.</p> required Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def set_size(self, size: int) -&gt; None:\n    \"\"\"Set the size of the cache.\n\n    Parameters\n    ----------\n    size: int\n        The size of the cache.\n    \"\"\"\n    self._max_size = size\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.PokemonCache.wait_until_ready","title":"<code>wait_until_ready()</code>  <code>async</code>","text":"<p>Wait until the all the endpoints are cached.</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def wait_until_ready(self) -&gt; None:\n    \"\"\"Wait until the all the endpoints are cached.\"\"\"\n    await self._client.http.connect()\n    while not self._endpoints_cached and self._client.cache_endpoints:\n        await asyncio.sleep(0.5)\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.PokemonColorCache","title":"<code>PokemonColorCache(max_size=100)</code>","text":"<p>               Bases: <code>BaseCache['Route', 'models.PokemonColor']</code></p> <p>A cache for pokemon colors.</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def __init__(self, max_size: int = 100) -&gt; None:\n    self._max_size = max_size\n    self._cache: t.Dict[_KT, _VT] = {}\n    self._endpoints: t.Dict[str, Endpoint] = {}\n    self._endpoints_cached: bool = False\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.PokemonColorCache.cache","title":"<code>cache: t.Dict[_KT, _VT]</code>  <code>property</code>","text":"<p>The cache itself.</p> <p>Returns:</p> Type Description <code>Dict[_KT, _VT]</code> <p>The cache itself.</p>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.PokemonColorCache.endpoints","title":"<code>endpoints: t.Dict[str, Endpoint]</code>  <code>property</code>","text":"<p>The endpoints that are cached.</p> <p>Returns:</p> Type Description <code>Dict[str, Endpoint]</code> <p>The endpoints that are cached.</p>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.PokemonColorCache.load","title":"<code>load(path='.')</code>  <code>async</code>","text":"<p>Load the cache from a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to load the cache from.</p> <code>'.'</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load(self, path: str = \".\") -&gt; None:\n    \"\"\"Load the cache from a file.\n\n    Parameters\n    ----------\n    path: str\n        The path to load the cache from.\n    \"\"\"\n    async with aiofiles.open(pathlib.Path(f\"{path}/{self.__class__.__name__}.json\"), \"r\") as f:\n        data = json.loads(await f.read())\n    self._max_size = len(data)\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: t.Type[\"_VT\"] = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    for endpoint, info in data.items():\n        route = route_model(endpoint=endpoint)\n        self.setdefault(route, model.from_payload(info))\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.PokemonColorCache.load_all","title":"<code>load_all()</code>  <code>async</code>","text":"<p>Load all documents/data from api into the cache. (Endpoints must be cached first)</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load_all(self) -&gt; None:\n    \"\"\"\n    Load all documents/data from api into the cache. (Endpoints must be cached first)\n    \"\"\"\n    if not self._endpoints_cached:\n        raise RuntimeError(\"The endpoints have not been cached yet.\")\n    self._client.logger.info(f\"Loading {self.__class__.__name__}...\")\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: \"models.BaseModel\" = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    self._max_size = len(self._endpoints)\n    for endpoint in self._endpoints.values():\n        route = route_model(endpoint=f\"/{endpoint.url.strip('/').split('/')[-2]}/{str(endpoint)}\")\n        data = self.get(route, None)\n        self.setdefault(route, data if data else model.from_payload(await self._client.http.request(route)))\n    self._client.logger.info(f\"Loaded {self.__class__.__name__}.\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.PokemonColorCache.load_all_batch","title":"<code>load_all_batch(batch_size=20)</code>  <code>async</code>","text":"<p>Load all documents/data from api into the cache in parallel. (Endpoints must be cached first)</p> <p>Parameters:</p> Name Type Description Default <code>batch_size</code> <code>int</code> <p>The number of documents to load at once. Default is 20 to avoid overwhelming the API.</p> <code>20</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load_all_batch(self, batch_size: int = 20) -&gt; None:\n    \"\"\"\n    Load all documents/data from api into the cache in parallel. (Endpoints must be cached first)\n\n    Parameters\n    ----------\n    batch_size: int\n        The number of documents to load at once. Default is 20 to avoid overwhelming the API.\n    \"\"\"\n    if not self._endpoints_cached:\n        raise RuntimeError(\"The endpoints have not been cached yet.\")\n    self._client.logger.info(f\"Loading {self.__class__.__name__}...\")\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: t.Type[\"_VT\"] = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    self._max_size = len(self._endpoints)\n    endpoints = list(self._endpoints.values())\n    total_endpoints = len(endpoints)\n    for i in range(0, total_endpoints, batch_size):\n        batch = endpoints[i : i + batch_size]\n        tasks = []\n        for endpoint in batch:\n            route = route_model(endpoint=f\"/{endpoint.url.strip('/').split('/')[-2]}/{str(endpoint)}\")\n            data = self.get(route, None)\n            if data:\n                self.setdefault(route, data)\n                self._client.logger.info(f\"Cached {route} - existing data used.\")\n            else:\n                tasks.append(self._fetch_and_cache(route, model))\n        if tasks:\n            await asyncio.gather(*tasks)\n        self._client.logger.debug(\n            f\"Loaded batch {i//batch_size + 1}/{(total_endpoints + batch_size - 1)//batch_size} for {self.__class__.__name__}\"\n        )\n    self._client.logger.info(f\"Loaded {self.__class__.__name__} - {len(self._cache)}/{total_endpoints} items.\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.PokemonColorCache.load_documents","title":"<code>load_documents(data)</code>","text":"<p>Load documents into the cache.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>List[Dict[str, str]]</code> <p>The data to load.</p> required Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def load_documents(self, data: t.List[t.Dict[str, str]]) -&gt; None:\n    \"\"\"Load documents into the cache.\n\n    Parameters\n    ----------\n    data: typing.List[typing.Dict[str, str]]\n        The data to load.\n    \"\"\"\n    for document in data:\n        self._endpoints[document[\"name\"]] = Endpoint(url=document[\"url\"], id=int(document[\"url\"].split(\"/\")[-2]))\n    self._endpoints_cached = True\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.PokemonColorCache.save","title":"<code>save(path='.')</code>  <code>async</code>","text":"<p>Save the cache to a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to save the cache to.</p> <code>'.'</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def save(self, path: str = \".\") -&gt; None:\n    \"\"\"Save the cache to a file.\n\n    Parameters\n    ----------\n    path: str\n        The path to save the cache to.\n    \"\"\"\n    pathlib.Path(path).mkdir(parents=True, exist_ok=True)\n    dummy: t.Dict[str, t.Dict[str, t.Any]] = {k.endpoint: v.raw for k, v in self.items()}\n    async with aiofiles.open(pathlib.Path(f\"{path}/{self.__class__.__name__}.json\"), \"w\") as f:\n        await f.write(\"{\\n\")\n        for n, (k, v) in enumerate(dummy.items()):\n            await f.write(\"\\n\".join([4 * \" \" + i for i in f'\"{k}\": {json.dumps(v, indent=4)}'.split(\"\\n\")]))\n            if n != len(dummy) - 1:\n                await f.write(\",\\n\")\n        await f.write(\"\\n}\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.PokemonColorCache.set_size","title":"<code>set_size(size)</code>","text":"<p>Set the size of the cache.</p> <p>Parameters:</p> Name Type Description Default <code>size</code> <code>int</code> <p>The size of the cache.</p> required Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def set_size(self, size: int) -&gt; None:\n    \"\"\"Set the size of the cache.\n\n    Parameters\n    ----------\n    size: int\n        The size of the cache.\n    \"\"\"\n    self._max_size = size\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.PokemonColorCache.wait_until_ready","title":"<code>wait_until_ready()</code>  <code>async</code>","text":"<p>Wait until the all the endpoints are cached.</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def wait_until_ready(self) -&gt; None:\n    \"\"\"Wait until the all the endpoints are cached.\"\"\"\n    await self._client.http.connect()\n    while not self._endpoints_cached and self._client.cache_endpoints:\n        await asyncio.sleep(0.5)\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.PokemonFormCache","title":"<code>PokemonFormCache(max_size=100)</code>","text":"<p>               Bases: <code>BaseCache['Route', 'models.PokemonForm']</code></p> <p>A cache for pokemon forms.</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def __init__(self, max_size: int = 100) -&gt; None:\n    self._max_size = max_size\n    self._cache: t.Dict[_KT, _VT] = {}\n    self._endpoints: t.Dict[str, Endpoint] = {}\n    self._endpoints_cached: bool = False\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.PokemonFormCache.cache","title":"<code>cache: t.Dict[_KT, _VT]</code>  <code>property</code>","text":"<p>The cache itself.</p> <p>Returns:</p> Type Description <code>Dict[_KT, _VT]</code> <p>The cache itself.</p>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.PokemonFormCache.endpoints","title":"<code>endpoints: t.Dict[str, Endpoint]</code>  <code>property</code>","text":"<p>The endpoints that are cached.</p> <p>Returns:</p> Type Description <code>Dict[str, Endpoint]</code> <p>The endpoints that are cached.</p>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.PokemonFormCache.load","title":"<code>load(path='.')</code>  <code>async</code>","text":"<p>Load the cache from a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to load the cache from.</p> <code>'.'</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load(self, path: str = \".\") -&gt; None:\n    \"\"\"Load the cache from a file.\n\n    Parameters\n    ----------\n    path: str\n        The path to load the cache from.\n    \"\"\"\n    async with aiofiles.open(pathlib.Path(f\"{path}/{self.__class__.__name__}.json\"), \"r\") as f:\n        data = json.loads(await f.read())\n    self._max_size = len(data)\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: t.Type[\"_VT\"] = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    for endpoint, info in data.items():\n        route = route_model(endpoint=endpoint)\n        self.setdefault(route, model.from_payload(info))\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.PokemonFormCache.load_all","title":"<code>load_all()</code>  <code>async</code>","text":"<p>Load all documents/data from api into the cache. (Endpoints must be cached first)</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load_all(self) -&gt; None:\n    \"\"\"\n    Load all documents/data from api into the cache. (Endpoints must be cached first)\n    \"\"\"\n    if not self._endpoints_cached:\n        raise RuntimeError(\"The endpoints have not been cached yet.\")\n    self._client.logger.info(f\"Loading {self.__class__.__name__}...\")\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: \"models.BaseModel\" = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    self._max_size = len(self._endpoints)\n    for endpoint in self._endpoints.values():\n        route = route_model(endpoint=f\"/{endpoint.url.strip('/').split('/')[-2]}/{str(endpoint)}\")\n        data = self.get(route, None)\n        self.setdefault(route, data if data else model.from_payload(await self._client.http.request(route)))\n    self._client.logger.info(f\"Loaded {self.__class__.__name__}.\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.PokemonFormCache.load_all_batch","title":"<code>load_all_batch(batch_size=20)</code>  <code>async</code>","text":"<p>Load all documents/data from api into the cache in parallel. (Endpoints must be cached first)</p> <p>Parameters:</p> Name Type Description Default <code>batch_size</code> <code>int</code> <p>The number of documents to load at once. Default is 20 to avoid overwhelming the API.</p> <code>20</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load_all_batch(self, batch_size: int = 20) -&gt; None:\n    \"\"\"\n    Load all documents/data from api into the cache in parallel. (Endpoints must be cached first)\n\n    Parameters\n    ----------\n    batch_size: int\n        The number of documents to load at once. Default is 20 to avoid overwhelming the API.\n    \"\"\"\n    if not self._endpoints_cached:\n        raise RuntimeError(\"The endpoints have not been cached yet.\")\n    self._client.logger.info(f\"Loading {self.__class__.__name__}...\")\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: t.Type[\"_VT\"] = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    self._max_size = len(self._endpoints)\n    endpoints = list(self._endpoints.values())\n    total_endpoints = len(endpoints)\n    for i in range(0, total_endpoints, batch_size):\n        batch = endpoints[i : i + batch_size]\n        tasks = []\n        for endpoint in batch:\n            route = route_model(endpoint=f\"/{endpoint.url.strip('/').split('/')[-2]}/{str(endpoint)}\")\n            data = self.get(route, None)\n            if data:\n                self.setdefault(route, data)\n                self._client.logger.info(f\"Cached {route} - existing data used.\")\n            else:\n                tasks.append(self._fetch_and_cache(route, model))\n        if tasks:\n            await asyncio.gather(*tasks)\n        self._client.logger.debug(\n            f\"Loaded batch {i//batch_size + 1}/{(total_endpoints + batch_size - 1)//batch_size} for {self.__class__.__name__}\"\n        )\n    self._client.logger.info(f\"Loaded {self.__class__.__name__} - {len(self._cache)}/{total_endpoints} items.\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.PokemonFormCache.load_documents","title":"<code>load_documents(data)</code>","text":"<p>Load documents into the cache.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>List[Dict[str, str]]</code> <p>The data to load.</p> required Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def load_documents(self, data: t.List[t.Dict[str, str]]) -&gt; None:\n    \"\"\"Load documents into the cache.\n\n    Parameters\n    ----------\n    data: typing.List[typing.Dict[str, str]]\n        The data to load.\n    \"\"\"\n    for document in data:\n        self._endpoints[document[\"name\"]] = Endpoint(url=document[\"url\"], id=int(document[\"url\"].split(\"/\")[-2]))\n    self._endpoints_cached = True\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.PokemonFormCache.save","title":"<code>save(path='.')</code>  <code>async</code>","text":"<p>Save the cache to a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to save the cache to.</p> <code>'.'</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def save(self, path: str = \".\") -&gt; None:\n    \"\"\"Save the cache to a file.\n\n    Parameters\n    ----------\n    path: str\n        The path to save the cache to.\n    \"\"\"\n    pathlib.Path(path).mkdir(parents=True, exist_ok=True)\n    dummy: t.Dict[str, t.Dict[str, t.Any]] = {k.endpoint: v.raw for k, v in self.items()}\n    async with aiofiles.open(pathlib.Path(f\"{path}/{self.__class__.__name__}.json\"), \"w\") as f:\n        await f.write(\"{\\n\")\n        for n, (k, v) in enumerate(dummy.items()):\n            await f.write(\"\\n\".join([4 * \" \" + i for i in f'\"{k}\": {json.dumps(v, indent=4)}'.split(\"\\n\")]))\n            if n != len(dummy) - 1:\n                await f.write(\",\\n\")\n        await f.write(\"\\n}\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.PokemonFormCache.set_size","title":"<code>set_size(size)</code>","text":"<p>Set the size of the cache.</p> <p>Parameters:</p> Name Type Description Default <code>size</code> <code>int</code> <p>The size of the cache.</p> required Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def set_size(self, size: int) -&gt; None:\n    \"\"\"Set the size of the cache.\n\n    Parameters\n    ----------\n    size: int\n        The size of the cache.\n    \"\"\"\n    self._max_size = size\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.PokemonFormCache.wait_until_ready","title":"<code>wait_until_ready()</code>  <code>async</code>","text":"<p>Wait until the all the endpoints are cached.</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def wait_until_ready(self) -&gt; None:\n    \"\"\"Wait until the all the endpoints are cached.\"\"\"\n    await self._client.http.connect()\n    while not self._endpoints_cached and self._client.cache_endpoints:\n        await asyncio.sleep(0.5)\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.PokemonHabitatCache","title":"<code>PokemonHabitatCache(max_size=100)</code>","text":"<p>               Bases: <code>BaseCache['Route', 'models.PokemonHabitats']</code></p> <p>A cache for pokemon habitats.</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def __init__(self, max_size: int = 100) -&gt; None:\n    self._max_size = max_size\n    self._cache: t.Dict[_KT, _VT] = {}\n    self._endpoints: t.Dict[str, Endpoint] = {}\n    self._endpoints_cached: bool = False\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.PokemonHabitatCache.cache","title":"<code>cache: t.Dict[_KT, _VT]</code>  <code>property</code>","text":"<p>The cache itself.</p> <p>Returns:</p> Type Description <code>Dict[_KT, _VT]</code> <p>The cache itself.</p>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.PokemonHabitatCache.endpoints","title":"<code>endpoints: t.Dict[str, Endpoint]</code>  <code>property</code>","text":"<p>The endpoints that are cached.</p> <p>Returns:</p> Type Description <code>Dict[str, Endpoint]</code> <p>The endpoints that are cached.</p>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.PokemonHabitatCache.load","title":"<code>load(path='.')</code>  <code>async</code>","text":"<p>Load the cache from a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to load the cache from.</p> <code>'.'</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load(self, path: str = \".\") -&gt; None:\n    \"\"\"Load the cache from a file.\n\n    Parameters\n    ----------\n    path: str\n        The path to load the cache from.\n    \"\"\"\n    async with aiofiles.open(pathlib.Path(f\"{path}/{self.__class__.__name__}.json\"), \"r\") as f:\n        data = json.loads(await f.read())\n    self._max_size = len(data)\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: t.Type[\"_VT\"] = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    for endpoint, info in data.items():\n        route = route_model(endpoint=endpoint)\n        self.setdefault(route, model.from_payload(info))\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.PokemonHabitatCache.load_all","title":"<code>load_all()</code>  <code>async</code>","text":"<p>Load all documents/data from api into the cache. (Endpoints must be cached first)</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load_all(self) -&gt; None:\n    \"\"\"\n    Load all documents/data from api into the cache. (Endpoints must be cached first)\n    \"\"\"\n    if not self._endpoints_cached:\n        raise RuntimeError(\"The endpoints have not been cached yet.\")\n    self._client.logger.info(f\"Loading {self.__class__.__name__}...\")\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: \"models.BaseModel\" = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    self._max_size = len(self._endpoints)\n    for endpoint in self._endpoints.values():\n        route = route_model(endpoint=f\"/{endpoint.url.strip('/').split('/')[-2]}/{str(endpoint)}\")\n        data = self.get(route, None)\n        self.setdefault(route, data if data else model.from_payload(await self._client.http.request(route)))\n    self._client.logger.info(f\"Loaded {self.__class__.__name__}.\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.PokemonHabitatCache.load_all_batch","title":"<code>load_all_batch(batch_size=20)</code>  <code>async</code>","text":"<p>Load all documents/data from api into the cache in parallel. (Endpoints must be cached first)</p> <p>Parameters:</p> Name Type Description Default <code>batch_size</code> <code>int</code> <p>The number of documents to load at once. Default is 20 to avoid overwhelming the API.</p> <code>20</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load_all_batch(self, batch_size: int = 20) -&gt; None:\n    \"\"\"\n    Load all documents/data from api into the cache in parallel. (Endpoints must be cached first)\n\n    Parameters\n    ----------\n    batch_size: int\n        The number of documents to load at once. Default is 20 to avoid overwhelming the API.\n    \"\"\"\n    if not self._endpoints_cached:\n        raise RuntimeError(\"The endpoints have not been cached yet.\")\n    self._client.logger.info(f\"Loading {self.__class__.__name__}...\")\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: t.Type[\"_VT\"] = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    self._max_size = len(self._endpoints)\n    endpoints = list(self._endpoints.values())\n    total_endpoints = len(endpoints)\n    for i in range(0, total_endpoints, batch_size):\n        batch = endpoints[i : i + batch_size]\n        tasks = []\n        for endpoint in batch:\n            route = route_model(endpoint=f\"/{endpoint.url.strip('/').split('/')[-2]}/{str(endpoint)}\")\n            data = self.get(route, None)\n            if data:\n                self.setdefault(route, data)\n                self._client.logger.info(f\"Cached {route} - existing data used.\")\n            else:\n                tasks.append(self._fetch_and_cache(route, model))\n        if tasks:\n            await asyncio.gather(*tasks)\n        self._client.logger.debug(\n            f\"Loaded batch {i//batch_size + 1}/{(total_endpoints + batch_size - 1)//batch_size} for {self.__class__.__name__}\"\n        )\n    self._client.logger.info(f\"Loaded {self.__class__.__name__} - {len(self._cache)}/{total_endpoints} items.\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.PokemonHabitatCache.load_documents","title":"<code>load_documents(data)</code>","text":"<p>Load documents into the cache.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>List[Dict[str, str]]</code> <p>The data to load.</p> required Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def load_documents(self, data: t.List[t.Dict[str, str]]) -&gt; None:\n    \"\"\"Load documents into the cache.\n\n    Parameters\n    ----------\n    data: typing.List[typing.Dict[str, str]]\n        The data to load.\n    \"\"\"\n    for document in data:\n        self._endpoints[document[\"name\"]] = Endpoint(url=document[\"url\"], id=int(document[\"url\"].split(\"/\")[-2]))\n    self._endpoints_cached = True\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.PokemonHabitatCache.save","title":"<code>save(path='.')</code>  <code>async</code>","text":"<p>Save the cache to a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to save the cache to.</p> <code>'.'</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def save(self, path: str = \".\") -&gt; None:\n    \"\"\"Save the cache to a file.\n\n    Parameters\n    ----------\n    path: str\n        The path to save the cache to.\n    \"\"\"\n    pathlib.Path(path).mkdir(parents=True, exist_ok=True)\n    dummy: t.Dict[str, t.Dict[str, t.Any]] = {k.endpoint: v.raw for k, v in self.items()}\n    async with aiofiles.open(pathlib.Path(f\"{path}/{self.__class__.__name__}.json\"), \"w\") as f:\n        await f.write(\"{\\n\")\n        for n, (k, v) in enumerate(dummy.items()):\n            await f.write(\"\\n\".join([4 * \" \" + i for i in f'\"{k}\": {json.dumps(v, indent=4)}'.split(\"\\n\")]))\n            if n != len(dummy) - 1:\n                await f.write(\",\\n\")\n        await f.write(\"\\n}\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.PokemonHabitatCache.set_size","title":"<code>set_size(size)</code>","text":"<p>Set the size of the cache.</p> <p>Parameters:</p> Name Type Description Default <code>size</code> <code>int</code> <p>The size of the cache.</p> required Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def set_size(self, size: int) -&gt; None:\n    \"\"\"Set the size of the cache.\n\n    Parameters\n    ----------\n    size: int\n        The size of the cache.\n    \"\"\"\n    self._max_size = size\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.PokemonHabitatCache.wait_until_ready","title":"<code>wait_until_ready()</code>  <code>async</code>","text":"<p>Wait until the all the endpoints are cached.</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def wait_until_ready(self) -&gt; None:\n    \"\"\"Wait until the all the endpoints are cached.\"\"\"\n    await self._client.http.connect()\n    while not self._endpoints_cached and self._client.cache_endpoints:\n        await asyncio.sleep(0.5)\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.PokemonLocationAreaCache","title":"<code>PokemonLocationAreaCache(max_size=100)</code>","text":"<p>               Bases: <code>BaseCache['Route', 'models.LocationAreaEncounter']</code></p> <p>A cache for pokemon location areas.</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def __init__(self, max_size: int = 100) -&gt; None:\n    self._max_size = max_size\n    self._cache: t.Dict[_KT, _VT] = {}\n    self._endpoints: t.Dict[str, Endpoint] = {}\n    self._endpoints_cached: bool = False\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.PokemonLocationAreaCache.cache","title":"<code>cache: t.Dict[_KT, _VT]</code>  <code>property</code>","text":"<p>The cache itself.</p> <p>Returns:</p> Type Description <code>Dict[_KT, _VT]</code> <p>The cache itself.</p>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.PokemonLocationAreaCache.endpoints","title":"<code>endpoints: t.Dict[str, Endpoint]</code>  <code>property</code>","text":"<p>The endpoints that are cached.</p> <p>Returns:</p> Type Description <code>Dict[str, Endpoint]</code> <p>The endpoints that are cached.</p>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.PokemonLocationAreaCache.load","title":"<code>load(path='.')</code>  <code>async</code>","text":"<p>Load the cache from a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to load the cache from.</p> <code>'.'</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load(self, path: str = \".\") -&gt; None:\n    \"\"\"Load the cache from a file.\n\n    Parameters\n    ----------\n    path: str\n        The path to load the cache from.\n    \"\"\"\n    async with aiofiles.open(pathlib.Path(f\"{path}/{self.__class__.__name__}.json\"), \"r\") as f:\n        data = json.loads(await f.read())\n    self._max_size = len(data)\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: t.Type[\"_VT\"] = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    for endpoint, info in data.items():\n        route = route_model(endpoint=endpoint)\n        self.setdefault(route, model.from_payload(info))\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.PokemonLocationAreaCache.load_all","title":"<code>load_all()</code>  <code>async</code>","text":"<p>Load all documents/data from api into the cache. (Endpoints must be cached first)</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load_all(self) -&gt; None:\n    \"\"\"\n    Load all documents/data from api into the cache. (Endpoints must be cached first)\n    \"\"\"\n    if not self._endpoints_cached:\n        raise RuntimeError(\"The endpoints have not been cached yet.\")\n    self._client.logger.info(f\"Loading {self.__class__.__name__}...\")\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: \"models.BaseModel\" = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    self._max_size = len(self._endpoints)\n    for endpoint in self._endpoints.values():\n        route = route_model(endpoint=f\"/{endpoint.url.strip('/').split('/')[-2]}/{str(endpoint)}\")\n        data = self.get(route, None)\n        self.setdefault(route, data if data else model.from_payload(await self._client.http.request(route)))\n    self._client.logger.info(f\"Loaded {self.__class__.__name__}.\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.PokemonLocationAreaCache.load_all_batch","title":"<code>load_all_batch(batch_size=20)</code>  <code>async</code>","text":"<p>Load all documents/data from api into the cache in parallel. (Endpoints must be cached first)</p> <p>Parameters:</p> Name Type Description Default <code>batch_size</code> <code>int</code> <p>The number of documents to load at once. Default is 20 to avoid overwhelming the API.</p> <code>20</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load_all_batch(self, batch_size: int = 20) -&gt; None:\n    \"\"\"\n    Load all documents/data from api into the cache in parallel. (Endpoints must be cached first)\n\n    Parameters\n    ----------\n    batch_size: int\n        The number of documents to load at once. Default is 20 to avoid overwhelming the API.\n    \"\"\"\n    if not self._endpoints_cached:\n        raise RuntimeError(\"The endpoints have not been cached yet.\")\n    self._client.logger.info(f\"Loading {self.__class__.__name__}...\")\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: t.Type[\"_VT\"] = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    self._max_size = len(self._endpoints)\n    endpoints = list(self._endpoints.values())\n    total_endpoints = len(endpoints)\n    for i in range(0, total_endpoints, batch_size):\n        batch = endpoints[i : i + batch_size]\n        tasks = []\n        for endpoint in batch:\n            route = route_model(endpoint=f\"/{endpoint.url.strip('/').split('/')[-2]}/{str(endpoint)}\")\n            data = self.get(route, None)\n            if data:\n                self.setdefault(route, data)\n                self._client.logger.info(f\"Cached {route} - existing data used.\")\n            else:\n                tasks.append(self._fetch_and_cache(route, model))\n        if tasks:\n            await asyncio.gather(*tasks)\n        self._client.logger.debug(\n            f\"Loaded batch {i//batch_size + 1}/{(total_endpoints + batch_size - 1)//batch_size} for {self.__class__.__name__}\"\n        )\n    self._client.logger.info(f\"Loaded {self.__class__.__name__} - {len(self._cache)}/{total_endpoints} items.\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.PokemonLocationAreaCache.load_documents","title":"<code>load_documents(data)</code>","text":"<p>Load documents into the cache.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>List[Dict[str, str]]</code> <p>The data to load.</p> required Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def load_documents(self, data: t.List[t.Dict[str, str]]) -&gt; None:\n    \"\"\"Load documents into the cache.\n\n    Parameters\n    ----------\n    data: typing.List[typing.Dict[str, str]]\n        The data to load.\n    \"\"\"\n    for document in data:\n        self._endpoints[document[\"name\"]] = Endpoint(url=document[\"url\"], id=int(document[\"url\"].split(\"/\")[-2]))\n    self._endpoints_cached = True\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.PokemonLocationAreaCache.save","title":"<code>save(path='.')</code>  <code>async</code>","text":"<p>Save the cache to a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to save the cache to.</p> <code>'.'</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def save(self, path: str = \".\") -&gt; None:\n    \"\"\"Save the cache to a file.\n\n    Parameters\n    ----------\n    path: str\n        The path to save the cache to.\n    \"\"\"\n    pathlib.Path(path).mkdir(parents=True, exist_ok=True)\n    dummy: t.Dict[str, t.Dict[str, t.Any]] = {k.endpoint: v.raw for k, v in self.items()}\n    async with aiofiles.open(pathlib.Path(f\"{path}/{self.__class__.__name__}.json\"), \"w\") as f:\n        await f.write(\"{\\n\")\n        for n, (k, v) in enumerate(dummy.items()):\n            await f.write(\"\\n\".join([4 * \" \" + i for i in f'\"{k}\": {json.dumps(v, indent=4)}'.split(\"\\n\")]))\n            if n != len(dummy) - 1:\n                await f.write(\",\\n\")\n        await f.write(\"\\n}\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.PokemonLocationAreaCache.set_size","title":"<code>set_size(size)</code>","text":"<p>Set the size of the cache.</p> <p>Parameters:</p> Name Type Description Default <code>size</code> <code>int</code> <p>The size of the cache.</p> required Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def set_size(self, size: int) -&gt; None:\n    \"\"\"Set the size of the cache.\n\n    Parameters\n    ----------\n    size: int\n        The size of the cache.\n    \"\"\"\n    self._max_size = size\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.PokemonLocationAreaCache.wait_until_ready","title":"<code>wait_until_ready()</code>  <code>async</code>","text":"<p>Wait until the all the endpoints are cached.</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def wait_until_ready(self) -&gt; None:\n    \"\"\"Wait until the all the endpoints are cached.\"\"\"\n    await self._client.http.connect()\n    while not self._endpoints_cached and self._client.cache_endpoints:\n        await asyncio.sleep(0.5)\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.PokemonShapeCache","title":"<code>PokemonShapeCache(max_size=100)</code>","text":"<p>               Bases: <code>BaseCache['Route', 'models.PokemonShape']</code></p> <p>A cache for pokemon shapes.</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def __init__(self, max_size: int = 100) -&gt; None:\n    self._max_size = max_size\n    self._cache: t.Dict[_KT, _VT] = {}\n    self._endpoints: t.Dict[str, Endpoint] = {}\n    self._endpoints_cached: bool = False\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.PokemonShapeCache.cache","title":"<code>cache: t.Dict[_KT, _VT]</code>  <code>property</code>","text":"<p>The cache itself.</p> <p>Returns:</p> Type Description <code>Dict[_KT, _VT]</code> <p>The cache itself.</p>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.PokemonShapeCache.endpoints","title":"<code>endpoints: t.Dict[str, Endpoint]</code>  <code>property</code>","text":"<p>The endpoints that are cached.</p> <p>Returns:</p> Type Description <code>Dict[str, Endpoint]</code> <p>The endpoints that are cached.</p>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.PokemonShapeCache.load","title":"<code>load(path='.')</code>  <code>async</code>","text":"<p>Load the cache from a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to load the cache from.</p> <code>'.'</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load(self, path: str = \".\") -&gt; None:\n    \"\"\"Load the cache from a file.\n\n    Parameters\n    ----------\n    path: str\n        The path to load the cache from.\n    \"\"\"\n    async with aiofiles.open(pathlib.Path(f\"{path}/{self.__class__.__name__}.json\"), \"r\") as f:\n        data = json.loads(await f.read())\n    self._max_size = len(data)\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: t.Type[\"_VT\"] = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    for endpoint, info in data.items():\n        route = route_model(endpoint=endpoint)\n        self.setdefault(route, model.from_payload(info))\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.PokemonShapeCache.load_all","title":"<code>load_all()</code>  <code>async</code>","text":"<p>Load all documents/data from api into the cache. (Endpoints must be cached first)</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load_all(self) -&gt; None:\n    \"\"\"\n    Load all documents/data from api into the cache. (Endpoints must be cached first)\n    \"\"\"\n    if not self._endpoints_cached:\n        raise RuntimeError(\"The endpoints have not been cached yet.\")\n    self._client.logger.info(f\"Loading {self.__class__.__name__}...\")\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: \"models.BaseModel\" = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    self._max_size = len(self._endpoints)\n    for endpoint in self._endpoints.values():\n        route = route_model(endpoint=f\"/{endpoint.url.strip('/').split('/')[-2]}/{str(endpoint)}\")\n        data = self.get(route, None)\n        self.setdefault(route, data if data else model.from_payload(await self._client.http.request(route)))\n    self._client.logger.info(f\"Loaded {self.__class__.__name__}.\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.PokemonShapeCache.load_all_batch","title":"<code>load_all_batch(batch_size=20)</code>  <code>async</code>","text":"<p>Load all documents/data from api into the cache in parallel. (Endpoints must be cached first)</p> <p>Parameters:</p> Name Type Description Default <code>batch_size</code> <code>int</code> <p>The number of documents to load at once. Default is 20 to avoid overwhelming the API.</p> <code>20</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load_all_batch(self, batch_size: int = 20) -&gt; None:\n    \"\"\"\n    Load all documents/data from api into the cache in parallel. (Endpoints must be cached first)\n\n    Parameters\n    ----------\n    batch_size: int\n        The number of documents to load at once. Default is 20 to avoid overwhelming the API.\n    \"\"\"\n    if not self._endpoints_cached:\n        raise RuntimeError(\"The endpoints have not been cached yet.\")\n    self._client.logger.info(f\"Loading {self.__class__.__name__}...\")\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: t.Type[\"_VT\"] = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    self._max_size = len(self._endpoints)\n    endpoints = list(self._endpoints.values())\n    total_endpoints = len(endpoints)\n    for i in range(0, total_endpoints, batch_size):\n        batch = endpoints[i : i + batch_size]\n        tasks = []\n        for endpoint in batch:\n            route = route_model(endpoint=f\"/{endpoint.url.strip('/').split('/')[-2]}/{str(endpoint)}\")\n            data = self.get(route, None)\n            if data:\n                self.setdefault(route, data)\n                self._client.logger.info(f\"Cached {route} - existing data used.\")\n            else:\n                tasks.append(self._fetch_and_cache(route, model))\n        if tasks:\n            await asyncio.gather(*tasks)\n        self._client.logger.debug(\n            f\"Loaded batch {i//batch_size + 1}/{(total_endpoints + batch_size - 1)//batch_size} for {self.__class__.__name__}\"\n        )\n    self._client.logger.info(f\"Loaded {self.__class__.__name__} - {len(self._cache)}/{total_endpoints} items.\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.PokemonShapeCache.load_documents","title":"<code>load_documents(data)</code>","text":"<p>Load documents into the cache.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>List[Dict[str, str]]</code> <p>The data to load.</p> required Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def load_documents(self, data: t.List[t.Dict[str, str]]) -&gt; None:\n    \"\"\"Load documents into the cache.\n\n    Parameters\n    ----------\n    data: typing.List[typing.Dict[str, str]]\n        The data to load.\n    \"\"\"\n    for document in data:\n        self._endpoints[document[\"name\"]] = Endpoint(url=document[\"url\"], id=int(document[\"url\"].split(\"/\")[-2]))\n    self._endpoints_cached = True\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.PokemonShapeCache.save","title":"<code>save(path='.')</code>  <code>async</code>","text":"<p>Save the cache to a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to save the cache to.</p> <code>'.'</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def save(self, path: str = \".\") -&gt; None:\n    \"\"\"Save the cache to a file.\n\n    Parameters\n    ----------\n    path: str\n        The path to save the cache to.\n    \"\"\"\n    pathlib.Path(path).mkdir(parents=True, exist_ok=True)\n    dummy: t.Dict[str, t.Dict[str, t.Any]] = {k.endpoint: v.raw for k, v in self.items()}\n    async with aiofiles.open(pathlib.Path(f\"{path}/{self.__class__.__name__}.json\"), \"w\") as f:\n        await f.write(\"{\\n\")\n        for n, (k, v) in enumerate(dummy.items()):\n            await f.write(\"\\n\".join([4 * \" \" + i for i in f'\"{k}\": {json.dumps(v, indent=4)}'.split(\"\\n\")]))\n            if n != len(dummy) - 1:\n                await f.write(\",\\n\")\n        await f.write(\"\\n}\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.PokemonShapeCache.set_size","title":"<code>set_size(size)</code>","text":"<p>Set the size of the cache.</p> <p>Parameters:</p> Name Type Description Default <code>size</code> <code>int</code> <p>The size of the cache.</p> required Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def set_size(self, size: int) -&gt; None:\n    \"\"\"Set the size of the cache.\n\n    Parameters\n    ----------\n    size: int\n        The size of the cache.\n    \"\"\"\n    self._max_size = size\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.PokemonShapeCache.wait_until_ready","title":"<code>wait_until_ready()</code>  <code>async</code>","text":"<p>Wait until the all the endpoints are cached.</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def wait_until_ready(self) -&gt; None:\n    \"\"\"Wait until the all the endpoints are cached.\"\"\"\n    await self._client.http.connect()\n    while not self._endpoints_cached and self._client.cache_endpoints:\n        await asyncio.sleep(0.5)\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.PokemonSpeciesCache","title":"<code>PokemonSpeciesCache(max_size=100)</code>","text":"<p>               Bases: <code>BaseCache['Route', 'models.PokemonSpecies']</code></p> <p>A cache for pokemon species.</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def __init__(self, max_size: int = 100) -&gt; None:\n    self._max_size = max_size\n    self._cache: t.Dict[_KT, _VT] = {}\n    self._endpoints: t.Dict[str, Endpoint] = {}\n    self._endpoints_cached: bool = False\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.PokemonSpeciesCache.cache","title":"<code>cache: t.Dict[_KT, _VT]</code>  <code>property</code>","text":"<p>The cache itself.</p> <p>Returns:</p> Type Description <code>Dict[_KT, _VT]</code> <p>The cache itself.</p>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.PokemonSpeciesCache.endpoints","title":"<code>endpoints: t.Dict[str, Endpoint]</code>  <code>property</code>","text":"<p>The endpoints that are cached.</p> <p>Returns:</p> Type Description <code>Dict[str, Endpoint]</code> <p>The endpoints that are cached.</p>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.PokemonSpeciesCache.load","title":"<code>load(path='.')</code>  <code>async</code>","text":"<p>Load the cache from a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to load the cache from.</p> <code>'.'</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load(self, path: str = \".\") -&gt; None:\n    \"\"\"Load the cache from a file.\n\n    Parameters\n    ----------\n    path: str\n        The path to load the cache from.\n    \"\"\"\n    async with aiofiles.open(pathlib.Path(f\"{path}/{self.__class__.__name__}.json\"), \"r\") as f:\n        data = json.loads(await f.read())\n    self._max_size = len(data)\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: t.Type[\"_VT\"] = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    for endpoint, info in data.items():\n        route = route_model(endpoint=endpoint)\n        self.setdefault(route, model.from_payload(info))\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.PokemonSpeciesCache.load_all","title":"<code>load_all()</code>  <code>async</code>","text":"<p>Load all documents/data from api into the cache. (Endpoints must be cached first)</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load_all(self) -&gt; None:\n    \"\"\"\n    Load all documents/data from api into the cache. (Endpoints must be cached first)\n    \"\"\"\n    if not self._endpoints_cached:\n        raise RuntimeError(\"The endpoints have not been cached yet.\")\n    self._client.logger.info(f\"Loading {self.__class__.__name__}...\")\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: \"models.BaseModel\" = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    self._max_size = len(self._endpoints)\n    for endpoint in self._endpoints.values():\n        route = route_model(endpoint=f\"/{endpoint.url.strip('/').split('/')[-2]}/{str(endpoint)}\")\n        data = self.get(route, None)\n        self.setdefault(route, data if data else model.from_payload(await self._client.http.request(route)))\n    self._client.logger.info(f\"Loaded {self.__class__.__name__}.\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.PokemonSpeciesCache.load_all_batch","title":"<code>load_all_batch(batch_size=20)</code>  <code>async</code>","text":"<p>Load all documents/data from api into the cache in parallel. (Endpoints must be cached first)</p> <p>Parameters:</p> Name Type Description Default <code>batch_size</code> <code>int</code> <p>The number of documents to load at once. Default is 20 to avoid overwhelming the API.</p> <code>20</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load_all_batch(self, batch_size: int = 20) -&gt; None:\n    \"\"\"\n    Load all documents/data from api into the cache in parallel. (Endpoints must be cached first)\n\n    Parameters\n    ----------\n    batch_size: int\n        The number of documents to load at once. Default is 20 to avoid overwhelming the API.\n    \"\"\"\n    if not self._endpoints_cached:\n        raise RuntimeError(\"The endpoints have not been cached yet.\")\n    self._client.logger.info(f\"Loading {self.__class__.__name__}...\")\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: t.Type[\"_VT\"] = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    self._max_size = len(self._endpoints)\n    endpoints = list(self._endpoints.values())\n    total_endpoints = len(endpoints)\n    for i in range(0, total_endpoints, batch_size):\n        batch = endpoints[i : i + batch_size]\n        tasks = []\n        for endpoint in batch:\n            route = route_model(endpoint=f\"/{endpoint.url.strip('/').split('/')[-2]}/{str(endpoint)}\")\n            data = self.get(route, None)\n            if data:\n                self.setdefault(route, data)\n                self._client.logger.info(f\"Cached {route} - existing data used.\")\n            else:\n                tasks.append(self._fetch_and_cache(route, model))\n        if tasks:\n            await asyncio.gather(*tasks)\n        self._client.logger.debug(\n            f\"Loaded batch {i//batch_size + 1}/{(total_endpoints + batch_size - 1)//batch_size} for {self.__class__.__name__}\"\n        )\n    self._client.logger.info(f\"Loaded {self.__class__.__name__} - {len(self._cache)}/{total_endpoints} items.\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.PokemonSpeciesCache.load_documents","title":"<code>load_documents(data)</code>","text":"<p>Load documents into the cache.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>List[Dict[str, str]]</code> <p>The data to load.</p> required Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def load_documents(self, data: t.List[t.Dict[str, str]]) -&gt; None:\n    \"\"\"Load documents into the cache.\n\n    Parameters\n    ----------\n    data: typing.List[typing.Dict[str, str]]\n        The data to load.\n    \"\"\"\n    for document in data:\n        self._endpoints[document[\"name\"]] = Endpoint(url=document[\"url\"], id=int(document[\"url\"].split(\"/\")[-2]))\n    self._endpoints_cached = True\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.PokemonSpeciesCache.save","title":"<code>save(path='.')</code>  <code>async</code>","text":"<p>Save the cache to a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to save the cache to.</p> <code>'.'</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def save(self, path: str = \".\") -&gt; None:\n    \"\"\"Save the cache to a file.\n\n    Parameters\n    ----------\n    path: str\n        The path to save the cache to.\n    \"\"\"\n    pathlib.Path(path).mkdir(parents=True, exist_ok=True)\n    dummy: t.Dict[str, t.Dict[str, t.Any]] = {k.endpoint: v.raw for k, v in self.items()}\n    async with aiofiles.open(pathlib.Path(f\"{path}/{self.__class__.__name__}.json\"), \"w\") as f:\n        await f.write(\"{\\n\")\n        for n, (k, v) in enumerate(dummy.items()):\n            await f.write(\"\\n\".join([4 * \" \" + i for i in f'\"{k}\": {json.dumps(v, indent=4)}'.split(\"\\n\")]))\n            if n != len(dummy) - 1:\n                await f.write(\",\\n\")\n        await f.write(\"\\n}\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.PokemonSpeciesCache.set_size","title":"<code>set_size(size)</code>","text":"<p>Set the size of the cache.</p> <p>Parameters:</p> Name Type Description Default <code>size</code> <code>int</code> <p>The size of the cache.</p> required Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def set_size(self, size: int) -&gt; None:\n    \"\"\"Set the size of the cache.\n\n    Parameters\n    ----------\n    size: int\n        The size of the cache.\n    \"\"\"\n    self._max_size = size\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.PokemonSpeciesCache.wait_until_ready","title":"<code>wait_until_ready()</code>  <code>async</code>","text":"<p>Wait until the all the endpoints are cached.</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def wait_until_ready(self) -&gt; None:\n    \"\"\"Wait until the all the endpoints are cached.\"\"\"\n    await self._client.http.connect()\n    while not self._endpoints_cached and self._client.cache_endpoints:\n        await asyncio.sleep(0.5)\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.RegionCache","title":"<code>RegionCache(max_size=100)</code>","text":"<p>               Bases: <code>BaseCache['Route', 'models.Region']</code></p> <p>A cache for regions.</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def __init__(self, max_size: int = 100) -&gt; None:\n    self._max_size = max_size\n    self._cache: t.Dict[_KT, _VT] = {}\n    self._endpoints: t.Dict[str, Endpoint] = {}\n    self._endpoints_cached: bool = False\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.RegionCache.cache","title":"<code>cache: t.Dict[_KT, _VT]</code>  <code>property</code>","text":"<p>The cache itself.</p> <p>Returns:</p> Type Description <code>Dict[_KT, _VT]</code> <p>The cache itself.</p>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.RegionCache.endpoints","title":"<code>endpoints: t.Dict[str, Endpoint]</code>  <code>property</code>","text":"<p>The endpoints that are cached.</p> <p>Returns:</p> Type Description <code>Dict[str, Endpoint]</code> <p>The endpoints that are cached.</p>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.RegionCache.load","title":"<code>load(path='.')</code>  <code>async</code>","text":"<p>Load the cache from a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to load the cache from.</p> <code>'.'</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load(self, path: str = \".\") -&gt; None:\n    \"\"\"Load the cache from a file.\n\n    Parameters\n    ----------\n    path: str\n        The path to load the cache from.\n    \"\"\"\n    async with aiofiles.open(pathlib.Path(f\"{path}/{self.__class__.__name__}.json\"), \"r\") as f:\n        data = json.loads(await f.read())\n    self._max_size = len(data)\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: t.Type[\"_VT\"] = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    for endpoint, info in data.items():\n        route = route_model(endpoint=endpoint)\n        self.setdefault(route, model.from_payload(info))\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.RegionCache.load_all","title":"<code>load_all()</code>  <code>async</code>","text":"<p>Load all documents/data from api into the cache. (Endpoints must be cached first)</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load_all(self) -&gt; None:\n    \"\"\"\n    Load all documents/data from api into the cache. (Endpoints must be cached first)\n    \"\"\"\n    if not self._endpoints_cached:\n        raise RuntimeError(\"The endpoints have not been cached yet.\")\n    self._client.logger.info(f\"Loading {self.__class__.__name__}...\")\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: \"models.BaseModel\" = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    self._max_size = len(self._endpoints)\n    for endpoint in self._endpoints.values():\n        route = route_model(endpoint=f\"/{endpoint.url.strip('/').split('/')[-2]}/{str(endpoint)}\")\n        data = self.get(route, None)\n        self.setdefault(route, data if data else model.from_payload(await self._client.http.request(route)))\n    self._client.logger.info(f\"Loaded {self.__class__.__name__}.\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.RegionCache.load_all_batch","title":"<code>load_all_batch(batch_size=20)</code>  <code>async</code>","text":"<p>Load all documents/data from api into the cache in parallel. (Endpoints must be cached first)</p> <p>Parameters:</p> Name Type Description Default <code>batch_size</code> <code>int</code> <p>The number of documents to load at once. Default is 20 to avoid overwhelming the API.</p> <code>20</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load_all_batch(self, batch_size: int = 20) -&gt; None:\n    \"\"\"\n    Load all documents/data from api into the cache in parallel. (Endpoints must be cached first)\n\n    Parameters\n    ----------\n    batch_size: int\n        The number of documents to load at once. Default is 20 to avoid overwhelming the API.\n    \"\"\"\n    if not self._endpoints_cached:\n        raise RuntimeError(\"The endpoints have not been cached yet.\")\n    self._client.logger.info(f\"Loading {self.__class__.__name__}...\")\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: t.Type[\"_VT\"] = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    self._max_size = len(self._endpoints)\n    endpoints = list(self._endpoints.values())\n    total_endpoints = len(endpoints)\n    for i in range(0, total_endpoints, batch_size):\n        batch = endpoints[i : i + batch_size]\n        tasks = []\n        for endpoint in batch:\n            route = route_model(endpoint=f\"/{endpoint.url.strip('/').split('/')[-2]}/{str(endpoint)}\")\n            data = self.get(route, None)\n            if data:\n                self.setdefault(route, data)\n                self._client.logger.info(f\"Cached {route} - existing data used.\")\n            else:\n                tasks.append(self._fetch_and_cache(route, model))\n        if tasks:\n            await asyncio.gather(*tasks)\n        self._client.logger.debug(\n            f\"Loaded batch {i//batch_size + 1}/{(total_endpoints + batch_size - 1)//batch_size} for {self.__class__.__name__}\"\n        )\n    self._client.logger.info(f\"Loaded {self.__class__.__name__} - {len(self._cache)}/{total_endpoints} items.\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.RegionCache.load_documents","title":"<code>load_documents(data)</code>","text":"<p>Load documents into the cache.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>List[Dict[str, str]]</code> <p>The data to load.</p> required Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def load_documents(self, data: t.List[t.Dict[str, str]]) -&gt; None:\n    \"\"\"Load documents into the cache.\n\n    Parameters\n    ----------\n    data: typing.List[typing.Dict[str, str]]\n        The data to load.\n    \"\"\"\n    for document in data:\n        self._endpoints[document[\"name\"]] = Endpoint(url=document[\"url\"], id=int(document[\"url\"].split(\"/\")[-2]))\n    self._endpoints_cached = True\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.RegionCache.save","title":"<code>save(path='.')</code>  <code>async</code>","text":"<p>Save the cache to a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to save the cache to.</p> <code>'.'</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def save(self, path: str = \".\") -&gt; None:\n    \"\"\"Save the cache to a file.\n\n    Parameters\n    ----------\n    path: str\n        The path to save the cache to.\n    \"\"\"\n    pathlib.Path(path).mkdir(parents=True, exist_ok=True)\n    dummy: t.Dict[str, t.Dict[str, t.Any]] = {k.endpoint: v.raw for k, v in self.items()}\n    async with aiofiles.open(pathlib.Path(f\"{path}/{self.__class__.__name__}.json\"), \"w\") as f:\n        await f.write(\"{\\n\")\n        for n, (k, v) in enumerate(dummy.items()):\n            await f.write(\"\\n\".join([4 * \" \" + i for i in f'\"{k}\": {json.dumps(v, indent=4)}'.split(\"\\n\")]))\n            if n != len(dummy) - 1:\n                await f.write(\",\\n\")\n        await f.write(\"\\n}\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.RegionCache.set_size","title":"<code>set_size(size)</code>","text":"<p>Set the size of the cache.</p> <p>Parameters:</p> Name Type Description Default <code>size</code> <code>int</code> <p>The size of the cache.</p> required Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def set_size(self, size: int) -&gt; None:\n    \"\"\"Set the size of the cache.\n\n    Parameters\n    ----------\n    size: int\n        The size of the cache.\n    \"\"\"\n    self._max_size = size\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.RegionCache.wait_until_ready","title":"<code>wait_until_ready()</code>  <code>async</code>","text":"<p>Wait until the all the endpoints are cached.</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def wait_until_ready(self) -&gt; None:\n    \"\"\"Wait until the all the endpoints are cached.\"\"\"\n    await self._client.http.connect()\n    while not self._endpoints_cached and self._client.cache_endpoints:\n        await asyncio.sleep(0.5)\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.SecondaryTypeCache","title":"<code>SecondaryTypeCache(max_size=100)</code>","text":"<p>               Bases: <code>BaseCache[_KT, _VT]</code></p> <p>A cache for secondary types with differing endpoints.</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def __init__(self, max_size: int = 100) -&gt; None:\n    self._max_size = max_size\n    self._cache: t.Dict[_KT, _VT] = {}\n    self._endpoints: t.Dict[str, Endpoint] = {}\n    self._endpoints_cached: bool = False\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.SecondaryTypeCache.cache","title":"<code>cache: t.Dict[_KT, _VT]</code>  <code>property</code>","text":"<p>The cache itself.</p> <p>Returns:</p> Type Description <code>Dict[_KT, _VT]</code> <p>The cache itself.</p>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.SecondaryTypeCache.endpoints","title":"<code>endpoints: t.Dict[str, Endpoint]</code>  <code>property</code>","text":"<p>The endpoints that are cached.</p> <p>Returns:</p> Type Description <code>Dict[str, Endpoint]</code> <p>The endpoints that are cached.</p>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.SecondaryTypeCache.load","title":"<code>load(path='.')</code>  <code>async</code>","text":"<p>Load the cache from a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to load the cache from.</p> <code>'.'</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load(self, path: str = \".\") -&gt; None:\n    \"\"\"Load the cache from a file.\n\n    Parameters\n    ----------\n    path: str\n        The path to load the cache from.\n    \"\"\"\n    async with aiofiles.open(pathlib.Path(f\"{path}/{self.__class__.__name__}.json\"), \"r\") as f:\n        data = json.loads(await f.read())\n    self._max_size = len(data)\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: t.Type[\"_VT\"] = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    for endpoint, info in data.items():\n        route = route_model(endpoint=endpoint)\n        self.setdefault(route, model.from_payload(info))\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.SecondaryTypeCache.load_all","title":"<code>load_all()</code>  <code>async</code>","text":"<p>Load all documents/data from api into the cache. (Endpoints must be cached first)</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load_all(self) -&gt; None:\n    \"\"\"\n    Load all documents/data from api into the cache. (Endpoints must be cached first)\n    \"\"\"\n    if not self._endpoints_cached:\n        raise RuntimeError(\"The endpoints have not been cached yet.\")\n    self._client.logger.info(f\"Loading {self.__class__.__name__}...\")\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: \"models.BaseModel\" = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    self._max_size = len(self._endpoints)\n    for endpoint in self._endpoints.values():\n        route = route_model(endpoint=f\"/{endpoint.url.strip('/').split('/')[-2]}/{str(endpoint)}\")\n        data = self.get(route, None)\n        self.setdefault(route, data if data else model.from_payload(await self._client.http.request(route)))\n    self._client.logger.info(f\"Loaded {self.__class__.__name__}.\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.SecondaryTypeCache.load_all_batch","title":"<code>load_all_batch(batch_size=20)</code>  <code>async</code>","text":"<p>Load all documents/data from api into the cache in parallel. (Endpoints must be cached first)</p> <p>Parameters:</p> Name Type Description Default <code>batch_size</code> <code>int</code> <p>The number of documents to load at once. Default is 20 to avoid overwhelming the API.</p> <code>20</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load_all_batch(self, batch_size: int = 20) -&gt; None:\n    \"\"\"\n    Load all documents/data from api into the cache in parallel. (Endpoints must be cached first)\n\n    Parameters\n    ----------\n    batch_size: int\n        The number of documents to load at once. Default is 20 to avoid overwhelming the API.\n    \"\"\"\n    if not self._endpoints_cached:\n        raise RuntimeError(\"The endpoints have not been cached yet.\")\n    self._client.logger.info(f\"Loading {self.__class__.__name__}...\")\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: t.Type[\"_VT\"] = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    self._max_size = len(self._endpoints)\n    endpoints = list(self._endpoints.values())\n    total_endpoints = len(endpoints)\n    for i in range(0, total_endpoints, batch_size):\n        batch = endpoints[i : i + batch_size]\n        tasks = []\n        for endpoint in batch:\n            route = route_model(endpoint=f\"/{endpoint.url.strip('/').split('/')[-2]}/{str(endpoint)}\")\n            data = self.get(route, None)\n            if data:\n                self.setdefault(route, data)\n                self._client.logger.info(f\"Cached {route} - existing data used.\")\n            else:\n                tasks.append(self._fetch_and_cache(route, model))\n        if tasks:\n            await asyncio.gather(*tasks)\n        self._client.logger.debug(\n            f\"Loaded batch {i//batch_size + 1}/{(total_endpoints + batch_size - 1)//batch_size} for {self.__class__.__name__}\"\n        )\n    self._client.logger.info(f\"Loaded {self.__class__.__name__} - {len(self._cache)}/{total_endpoints} items.\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.SecondaryTypeCache.load_documents","title":"<code>load_documents(data)</code>","text":"<p>Load documents into the cache. Endpoints are different for secondary types.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>List[Dict[str, str]]</code> <p>The data to load.</p> required Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def load_documents(self, data: t.List[t.Dict[str, str]]) -&gt; None:\n    \"\"\"Load documents into the cache. Endpoints are different for secondary types.\n\n    Parameters\n    ----------\n    data: typing.List[typing.Dict[str, str]]\n        The data to load.\n    \"\"\"\n    for document in data:\n        self._endpoints[document[\"url\"].split(\"/\")[-2]] = Endpoint(\n            url=document[\"url\"], id=int(document[\"url\"].split(\"/\")[-2])\n        )\n    self._endpoints_cached = True\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.SecondaryTypeCache.save","title":"<code>save(path='.')</code>  <code>async</code>","text":"<p>Save the cache to a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to save the cache to.</p> <code>'.'</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def save(self, path: str = \".\") -&gt; None:\n    \"\"\"Save the cache to a file.\n\n    Parameters\n    ----------\n    path: str\n        The path to save the cache to.\n    \"\"\"\n    pathlib.Path(path).mkdir(parents=True, exist_ok=True)\n    dummy: t.Dict[str, t.Dict[str, t.Any]] = {k.endpoint: v.raw for k, v in self.items()}\n    async with aiofiles.open(pathlib.Path(f\"{path}/{self.__class__.__name__}.json\"), \"w\") as f:\n        await f.write(\"{\\n\")\n        for n, (k, v) in enumerate(dummy.items()):\n            await f.write(\"\\n\".join([4 * \" \" + i for i in f'\"{k}\": {json.dumps(v, indent=4)}'.split(\"\\n\")]))\n            if n != len(dummy) - 1:\n                await f.write(\",\\n\")\n        await f.write(\"\\n}\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.SecondaryTypeCache.set_size","title":"<code>set_size(size)</code>","text":"<p>Set the size of the cache.</p> <p>Parameters:</p> Name Type Description Default <code>size</code> <code>int</code> <p>The size of the cache.</p> required Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def set_size(self, size: int) -&gt; None:\n    \"\"\"Set the size of the cache.\n\n    Parameters\n    ----------\n    size: int\n        The size of the cache.\n    \"\"\"\n    self._max_size = size\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.SecondaryTypeCache.wait_until_ready","title":"<code>wait_until_ready()</code>  <code>async</code>","text":"<p>Wait until the all the endpoints are cached.</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def wait_until_ready(self) -&gt; None:\n    \"\"\"Wait until the all the endpoints are cached.\"\"\"\n    await self._client.http.connect()\n    while not self._endpoints_cached and self._client.cache_endpoints:\n        await asyncio.sleep(0.5)\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.StatCache","title":"<code>StatCache(max_size=100)</code>","text":"<p>               Bases: <code>BaseCache['Route', 'models.Stat']</code></p> <p>A cache for stats.</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def __init__(self, max_size: int = 100) -&gt; None:\n    self._max_size = max_size\n    self._cache: t.Dict[_KT, _VT] = {}\n    self._endpoints: t.Dict[str, Endpoint] = {}\n    self._endpoints_cached: bool = False\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.StatCache.cache","title":"<code>cache: t.Dict[_KT, _VT]</code>  <code>property</code>","text":"<p>The cache itself.</p> <p>Returns:</p> Type Description <code>Dict[_KT, _VT]</code> <p>The cache itself.</p>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.StatCache.endpoints","title":"<code>endpoints: t.Dict[str, Endpoint]</code>  <code>property</code>","text":"<p>The endpoints that are cached.</p> <p>Returns:</p> Type Description <code>Dict[str, Endpoint]</code> <p>The endpoints that are cached.</p>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.StatCache.load","title":"<code>load(path='.')</code>  <code>async</code>","text":"<p>Load the cache from a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to load the cache from.</p> <code>'.'</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load(self, path: str = \".\") -&gt; None:\n    \"\"\"Load the cache from a file.\n\n    Parameters\n    ----------\n    path: str\n        The path to load the cache from.\n    \"\"\"\n    async with aiofiles.open(pathlib.Path(f\"{path}/{self.__class__.__name__}.json\"), \"r\") as f:\n        data = json.loads(await f.read())\n    self._max_size = len(data)\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: t.Type[\"_VT\"] = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    for endpoint, info in data.items():\n        route = route_model(endpoint=endpoint)\n        self.setdefault(route, model.from_payload(info))\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.StatCache.load_all","title":"<code>load_all()</code>  <code>async</code>","text":"<p>Load all documents/data from api into the cache. (Endpoints must be cached first)</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load_all(self) -&gt; None:\n    \"\"\"\n    Load all documents/data from api into the cache. (Endpoints must be cached first)\n    \"\"\"\n    if not self._endpoints_cached:\n        raise RuntimeError(\"The endpoints have not been cached yet.\")\n    self._client.logger.info(f\"Loading {self.__class__.__name__}...\")\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: \"models.BaseModel\" = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    self._max_size = len(self._endpoints)\n    for endpoint in self._endpoints.values():\n        route = route_model(endpoint=f\"/{endpoint.url.strip('/').split('/')[-2]}/{str(endpoint)}\")\n        data = self.get(route, None)\n        self.setdefault(route, data if data else model.from_payload(await self._client.http.request(route)))\n    self._client.logger.info(f\"Loaded {self.__class__.__name__}.\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.StatCache.load_all_batch","title":"<code>load_all_batch(batch_size=20)</code>  <code>async</code>","text":"<p>Load all documents/data from api into the cache in parallel. (Endpoints must be cached first)</p> <p>Parameters:</p> Name Type Description Default <code>batch_size</code> <code>int</code> <p>The number of documents to load at once. Default is 20 to avoid overwhelming the API.</p> <code>20</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load_all_batch(self, batch_size: int = 20) -&gt; None:\n    \"\"\"\n    Load all documents/data from api into the cache in parallel. (Endpoints must be cached first)\n\n    Parameters\n    ----------\n    batch_size: int\n        The number of documents to load at once. Default is 20 to avoid overwhelming the API.\n    \"\"\"\n    if not self._endpoints_cached:\n        raise RuntimeError(\"The endpoints have not been cached yet.\")\n    self._client.logger.info(f\"Loading {self.__class__.__name__}...\")\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: t.Type[\"_VT\"] = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    self._max_size = len(self._endpoints)\n    endpoints = list(self._endpoints.values())\n    total_endpoints = len(endpoints)\n    for i in range(0, total_endpoints, batch_size):\n        batch = endpoints[i : i + batch_size]\n        tasks = []\n        for endpoint in batch:\n            route = route_model(endpoint=f\"/{endpoint.url.strip('/').split('/')[-2]}/{str(endpoint)}\")\n            data = self.get(route, None)\n            if data:\n                self.setdefault(route, data)\n                self._client.logger.info(f\"Cached {route} - existing data used.\")\n            else:\n                tasks.append(self._fetch_and_cache(route, model))\n        if tasks:\n            await asyncio.gather(*tasks)\n        self._client.logger.debug(\n            f\"Loaded batch {i//batch_size + 1}/{(total_endpoints + batch_size - 1)//batch_size} for {self.__class__.__name__}\"\n        )\n    self._client.logger.info(f\"Loaded {self.__class__.__name__} - {len(self._cache)}/{total_endpoints} items.\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.StatCache.load_documents","title":"<code>load_documents(data)</code>","text":"<p>Load documents into the cache.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>List[Dict[str, str]]</code> <p>The data to load.</p> required Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def load_documents(self, data: t.List[t.Dict[str, str]]) -&gt; None:\n    \"\"\"Load documents into the cache.\n\n    Parameters\n    ----------\n    data: typing.List[typing.Dict[str, str]]\n        The data to load.\n    \"\"\"\n    for document in data:\n        self._endpoints[document[\"name\"]] = Endpoint(url=document[\"url\"], id=int(document[\"url\"].split(\"/\")[-2]))\n    self._endpoints_cached = True\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.StatCache.save","title":"<code>save(path='.')</code>  <code>async</code>","text":"<p>Save the cache to a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to save the cache to.</p> <code>'.'</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def save(self, path: str = \".\") -&gt; None:\n    \"\"\"Save the cache to a file.\n\n    Parameters\n    ----------\n    path: str\n        The path to save the cache to.\n    \"\"\"\n    pathlib.Path(path).mkdir(parents=True, exist_ok=True)\n    dummy: t.Dict[str, t.Dict[str, t.Any]] = {k.endpoint: v.raw for k, v in self.items()}\n    async with aiofiles.open(pathlib.Path(f\"{path}/{self.__class__.__name__}.json\"), \"w\") as f:\n        await f.write(\"{\\n\")\n        for n, (k, v) in enumerate(dummy.items()):\n            await f.write(\"\\n\".join([4 * \" \" + i for i in f'\"{k}\": {json.dumps(v, indent=4)}'.split(\"\\n\")]))\n            if n != len(dummy) - 1:\n                await f.write(\",\\n\")\n        await f.write(\"\\n}\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.StatCache.set_size","title":"<code>set_size(size)</code>","text":"<p>Set the size of the cache.</p> <p>Parameters:</p> Name Type Description Default <code>size</code> <code>int</code> <p>The size of the cache.</p> required Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def set_size(self, size: int) -&gt; None:\n    \"\"\"Set the size of the cache.\n\n    Parameters\n    ----------\n    size: int\n        The size of the cache.\n    \"\"\"\n    self._max_size = size\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.StatCache.wait_until_ready","title":"<code>wait_until_ready()</code>  <code>async</code>","text":"<p>Wait until the all the endpoints are cached.</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def wait_until_ready(self) -&gt; None:\n    \"\"\"Wait until the all the endpoints are cached.\"\"\"\n    await self._client.http.connect()\n    while not self._endpoints_cached and self._client.cache_endpoints:\n        await asyncio.sleep(0.5)\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.SuperContestEffectCache","title":"<code>SuperContestEffectCache(max_size=100)</code>","text":"<p>               Bases: <code>SecondaryTypeCache['Route', 'models.SuperContestEffect']</code></p> <p>A cache for super contest effects.</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def __init__(self, max_size: int = 100) -&gt; None:\n    self._max_size = max_size\n    self._cache: t.Dict[_KT, _VT] = {}\n    self._endpoints: t.Dict[str, Endpoint] = {}\n    self._endpoints_cached: bool = False\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.SuperContestEffectCache.cache","title":"<code>cache: t.Dict[_KT, _VT]</code>  <code>property</code>","text":"<p>The cache itself.</p> <p>Returns:</p> Type Description <code>Dict[_KT, _VT]</code> <p>The cache itself.</p>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.SuperContestEffectCache.endpoints","title":"<code>endpoints: t.Dict[str, Endpoint]</code>  <code>property</code>","text":"<p>The endpoints that are cached.</p> <p>Returns:</p> Type Description <code>Dict[str, Endpoint]</code> <p>The endpoints that are cached.</p>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.SuperContestEffectCache.load","title":"<code>load(path='.')</code>  <code>async</code>","text":"<p>Load the cache from a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to load the cache from.</p> <code>'.'</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load(self, path: str = \".\") -&gt; None:\n    \"\"\"Load the cache from a file.\n\n    Parameters\n    ----------\n    path: str\n        The path to load the cache from.\n    \"\"\"\n    async with aiofiles.open(pathlib.Path(f\"{path}/{self.__class__.__name__}.json\"), \"r\") as f:\n        data = json.loads(await f.read())\n    self._max_size = len(data)\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: t.Type[\"_VT\"] = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    for endpoint, info in data.items():\n        route = route_model(endpoint=endpoint)\n        self.setdefault(route, model.from_payload(info))\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.SuperContestEffectCache.load_all","title":"<code>load_all()</code>  <code>async</code>","text":"<p>Load all documents/data from api into the cache. (Endpoints must be cached first)</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load_all(self) -&gt; None:\n    \"\"\"\n    Load all documents/data from api into the cache. (Endpoints must be cached first)\n    \"\"\"\n    if not self._endpoints_cached:\n        raise RuntimeError(\"The endpoints have not been cached yet.\")\n    self._client.logger.info(f\"Loading {self.__class__.__name__}...\")\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: \"models.BaseModel\" = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    self._max_size = len(self._endpoints)\n    for endpoint in self._endpoints.values():\n        route = route_model(endpoint=f\"/{endpoint.url.strip('/').split('/')[-2]}/{str(endpoint)}\")\n        data = self.get(route, None)\n        self.setdefault(route, data if data else model.from_payload(await self._client.http.request(route)))\n    self._client.logger.info(f\"Loaded {self.__class__.__name__}.\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.SuperContestEffectCache.load_all_batch","title":"<code>load_all_batch(batch_size=20)</code>  <code>async</code>","text":"<p>Load all documents/data from api into the cache in parallel. (Endpoints must be cached first)</p> <p>Parameters:</p> Name Type Description Default <code>batch_size</code> <code>int</code> <p>The number of documents to load at once. Default is 20 to avoid overwhelming the API.</p> <code>20</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load_all_batch(self, batch_size: int = 20) -&gt; None:\n    \"\"\"\n    Load all documents/data from api into the cache in parallel. (Endpoints must be cached first)\n\n    Parameters\n    ----------\n    batch_size: int\n        The number of documents to load at once. Default is 20 to avoid overwhelming the API.\n    \"\"\"\n    if not self._endpoints_cached:\n        raise RuntimeError(\"The endpoints have not been cached yet.\")\n    self._client.logger.info(f\"Loading {self.__class__.__name__}...\")\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: t.Type[\"_VT\"] = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    self._max_size = len(self._endpoints)\n    endpoints = list(self._endpoints.values())\n    total_endpoints = len(endpoints)\n    for i in range(0, total_endpoints, batch_size):\n        batch = endpoints[i : i + batch_size]\n        tasks = []\n        for endpoint in batch:\n            route = route_model(endpoint=f\"/{endpoint.url.strip('/').split('/')[-2]}/{str(endpoint)}\")\n            data = self.get(route, None)\n            if data:\n                self.setdefault(route, data)\n                self._client.logger.info(f\"Cached {route} - existing data used.\")\n            else:\n                tasks.append(self._fetch_and_cache(route, model))\n        if tasks:\n            await asyncio.gather(*tasks)\n        self._client.logger.debug(\n            f\"Loaded batch {i//batch_size + 1}/{(total_endpoints + batch_size - 1)//batch_size} for {self.__class__.__name__}\"\n        )\n    self._client.logger.info(f\"Loaded {self.__class__.__name__} - {len(self._cache)}/{total_endpoints} items.\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.SuperContestEffectCache.load_documents","title":"<code>load_documents(data)</code>","text":"<p>Load documents into the cache. Endpoints are different for secondary types.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>List[Dict[str, str]]</code> <p>The data to load.</p> required Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def load_documents(self, data: t.List[t.Dict[str, str]]) -&gt; None:\n    \"\"\"Load documents into the cache. Endpoints are different for secondary types.\n\n    Parameters\n    ----------\n    data: typing.List[typing.Dict[str, str]]\n        The data to load.\n    \"\"\"\n    for document in data:\n        self._endpoints[document[\"url\"].split(\"/\")[-2]] = Endpoint(\n            url=document[\"url\"], id=int(document[\"url\"].split(\"/\")[-2])\n        )\n    self._endpoints_cached = True\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.SuperContestEffectCache.save","title":"<code>save(path='.')</code>  <code>async</code>","text":"<p>Save the cache to a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to save the cache to.</p> <code>'.'</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def save(self, path: str = \".\") -&gt; None:\n    \"\"\"Save the cache to a file.\n\n    Parameters\n    ----------\n    path: str\n        The path to save the cache to.\n    \"\"\"\n    pathlib.Path(path).mkdir(parents=True, exist_ok=True)\n    dummy: t.Dict[str, t.Dict[str, t.Any]] = {k.endpoint: v.raw for k, v in self.items()}\n    async with aiofiles.open(pathlib.Path(f\"{path}/{self.__class__.__name__}.json\"), \"w\") as f:\n        await f.write(\"{\\n\")\n        for n, (k, v) in enumerate(dummy.items()):\n            await f.write(\"\\n\".join([4 * \" \" + i for i in f'\"{k}\": {json.dumps(v, indent=4)}'.split(\"\\n\")]))\n            if n != len(dummy) - 1:\n                await f.write(\",\\n\")\n        await f.write(\"\\n}\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.SuperContestEffectCache.set_size","title":"<code>set_size(size)</code>","text":"<p>Set the size of the cache.</p> <p>Parameters:</p> Name Type Description Default <code>size</code> <code>int</code> <p>The size of the cache.</p> required Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def set_size(self, size: int) -&gt; None:\n    \"\"\"Set the size of the cache.\n\n    Parameters\n    ----------\n    size: int\n        The size of the cache.\n    \"\"\"\n    self._max_size = size\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.SuperContestEffectCache.wait_until_ready","title":"<code>wait_until_ready()</code>  <code>async</code>","text":"<p>Wait until the all the endpoints are cached.</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def wait_until_ready(self) -&gt; None:\n    \"\"\"Wait until the all the endpoints are cached.\"\"\"\n    await self._client.http.connect()\n    while not self._endpoints_cached and self._client.cache_endpoints:\n        await asyncio.sleep(0.5)\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.TypeCache","title":"<code>TypeCache(max_size=100)</code>","text":"<p>               Bases: <code>BaseCache['Route', 'models.Type']</code></p> <p>A cache for types.</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def __init__(self, max_size: int = 100) -&gt; None:\n    self._max_size = max_size\n    self._cache: t.Dict[_KT, _VT] = {}\n    self._endpoints: t.Dict[str, Endpoint] = {}\n    self._endpoints_cached: bool = False\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.TypeCache.cache","title":"<code>cache: t.Dict[_KT, _VT]</code>  <code>property</code>","text":"<p>The cache itself.</p> <p>Returns:</p> Type Description <code>Dict[_KT, _VT]</code> <p>The cache itself.</p>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.TypeCache.endpoints","title":"<code>endpoints: t.Dict[str, Endpoint]</code>  <code>property</code>","text":"<p>The endpoints that are cached.</p> <p>Returns:</p> Type Description <code>Dict[str, Endpoint]</code> <p>The endpoints that are cached.</p>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.TypeCache.load","title":"<code>load(path='.')</code>  <code>async</code>","text":"<p>Load the cache from a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to load the cache from.</p> <code>'.'</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load(self, path: str = \".\") -&gt; None:\n    \"\"\"Load the cache from a file.\n\n    Parameters\n    ----------\n    path: str\n        The path to load the cache from.\n    \"\"\"\n    async with aiofiles.open(pathlib.Path(f\"{path}/{self.__class__.__name__}.json\"), \"r\") as f:\n        data = json.loads(await f.read())\n    self._max_size = len(data)\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: t.Type[\"_VT\"] = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    for endpoint, info in data.items():\n        route = route_model(endpoint=endpoint)\n        self.setdefault(route, model.from_payload(info))\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.TypeCache.load_all","title":"<code>load_all()</code>  <code>async</code>","text":"<p>Load all documents/data from api into the cache. (Endpoints must be cached first)</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load_all(self) -&gt; None:\n    \"\"\"\n    Load all documents/data from api into the cache. (Endpoints must be cached first)\n    \"\"\"\n    if not self._endpoints_cached:\n        raise RuntimeError(\"The endpoints have not been cached yet.\")\n    self._client.logger.info(f\"Loading {self.__class__.__name__}...\")\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: \"models.BaseModel\" = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    self._max_size = len(self._endpoints)\n    for endpoint in self._endpoints.values():\n        route = route_model(endpoint=f\"/{endpoint.url.strip('/').split('/')[-2]}/{str(endpoint)}\")\n        data = self.get(route, None)\n        self.setdefault(route, data if data else model.from_payload(await self._client.http.request(route)))\n    self._client.logger.info(f\"Loaded {self.__class__.__name__}.\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.TypeCache.load_all_batch","title":"<code>load_all_batch(batch_size=20)</code>  <code>async</code>","text":"<p>Load all documents/data from api into the cache in parallel. (Endpoints must be cached first)</p> <p>Parameters:</p> Name Type Description Default <code>batch_size</code> <code>int</code> <p>The number of documents to load at once. Default is 20 to avoid overwhelming the API.</p> <code>20</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load_all_batch(self, batch_size: int = 20) -&gt; None:\n    \"\"\"\n    Load all documents/data from api into the cache in parallel. (Endpoints must be cached first)\n\n    Parameters\n    ----------\n    batch_size: int\n        The number of documents to load at once. Default is 20 to avoid overwhelming the API.\n    \"\"\"\n    if not self._endpoints_cached:\n        raise RuntimeError(\"The endpoints have not been cached yet.\")\n    self._client.logger.info(f\"Loading {self.__class__.__name__}...\")\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: t.Type[\"_VT\"] = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    self._max_size = len(self._endpoints)\n    endpoints = list(self._endpoints.values())\n    total_endpoints = len(endpoints)\n    for i in range(0, total_endpoints, batch_size):\n        batch = endpoints[i : i + batch_size]\n        tasks = []\n        for endpoint in batch:\n            route = route_model(endpoint=f\"/{endpoint.url.strip('/').split('/')[-2]}/{str(endpoint)}\")\n            data = self.get(route, None)\n            if data:\n                self.setdefault(route, data)\n                self._client.logger.info(f\"Cached {route} - existing data used.\")\n            else:\n                tasks.append(self._fetch_and_cache(route, model))\n        if tasks:\n            await asyncio.gather(*tasks)\n        self._client.logger.debug(\n            f\"Loaded batch {i//batch_size + 1}/{(total_endpoints + batch_size - 1)//batch_size} for {self.__class__.__name__}\"\n        )\n    self._client.logger.info(f\"Loaded {self.__class__.__name__} - {len(self._cache)}/{total_endpoints} items.\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.TypeCache.load_documents","title":"<code>load_documents(data)</code>","text":"<p>Load documents into the cache.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>List[Dict[str, str]]</code> <p>The data to load.</p> required Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def load_documents(self, data: t.List[t.Dict[str, str]]) -&gt; None:\n    \"\"\"Load documents into the cache.\n\n    Parameters\n    ----------\n    data: typing.List[typing.Dict[str, str]]\n        The data to load.\n    \"\"\"\n    for document in data:\n        self._endpoints[document[\"name\"]] = Endpoint(url=document[\"url\"], id=int(document[\"url\"].split(\"/\")[-2]))\n    self._endpoints_cached = True\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.TypeCache.save","title":"<code>save(path='.')</code>  <code>async</code>","text":"<p>Save the cache to a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to save the cache to.</p> <code>'.'</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def save(self, path: str = \".\") -&gt; None:\n    \"\"\"Save the cache to a file.\n\n    Parameters\n    ----------\n    path: str\n        The path to save the cache to.\n    \"\"\"\n    pathlib.Path(path).mkdir(parents=True, exist_ok=True)\n    dummy: t.Dict[str, t.Dict[str, t.Any]] = {k.endpoint: v.raw for k, v in self.items()}\n    async with aiofiles.open(pathlib.Path(f\"{path}/{self.__class__.__name__}.json\"), \"w\") as f:\n        await f.write(\"{\\n\")\n        for n, (k, v) in enumerate(dummy.items()):\n            await f.write(\"\\n\".join([4 * \" \" + i for i in f'\"{k}\": {json.dumps(v, indent=4)}'.split(\"\\n\")]))\n            if n != len(dummy) - 1:\n                await f.write(\",\\n\")\n        await f.write(\"\\n}\")\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.TypeCache.set_size","title":"<code>set_size(size)</code>","text":"<p>Set the size of the cache.</p> <p>Parameters:</p> Name Type Description Default <code>size</code> <code>int</code> <p>The size of the cache.</p> required Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def set_size(self, size: int) -&gt; None:\n    \"\"\"Set the size of the cache.\n\n    Parameters\n    ----------\n    size: int\n        The size of the cache.\n    \"\"\"\n    self._max_size = size\n</code></pre>"},{"location":"api_reference/cache/cache/#pokelance.cache.cache.TypeCache.wait_until_ready","title":"<code>wait_until_ready()</code>  <code>async</code>","text":"<p>Wait until the all the endpoints are cached.</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def wait_until_ready(self) -&gt; None:\n    \"\"\"Wait until the all the endpoints are cached.\"\"\"\n    await self._client.http.connect()\n    while not self._endpoints_cached and self._client.cache_endpoints:\n        await asyncio.sleep(0.5)\n</code></pre>"},{"location":"api_reference/cache/cache_manager/","title":"CacheManager","text":""},{"location":"api_reference/cache/cache_manager/#pokelance.cache.cache_manager","title":"<code>pokelance.cache.cache_manager</code>","text":""},{"location":"api_reference/cache/cache_manager/#pokelance.cache.cache_manager.Base","title":"<code>Base</code>","text":"<p>Base class for all caches.</p> <p>Attributes:</p> Name Type Description <code>max_size</code> <code>int</code> <p>The maximum cache size.</p>"},{"location":"api_reference/cache/cache_manager/#pokelance.cache.cache_manager.Base.set_client","title":"<code>set_client(client)</code>","text":"<p>Set the client for the cache.</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>PokeLance</code> <p>The client to set.</p> required Source code in <code>pokelance/cache/cache_manager.py</code> Python<pre><code>def set_client(self, client: \"PokeLance\") -&gt; None:\n    \"\"\"Set the client for the cache.\n\n    Parameters\n    ----------\n    client: pokelance.PokeLance\n        The client to set.\n    \"\"\"\n    obj: attrs.Attribute[BaseCache[t.Any, t.Any]]\n    for obj in self.__attrs_attrs__:\n        if isinstance(obj.default, BaseCache) and obj.default is not None:\n            obj.default._client = client\n</code></pre>"},{"location":"api_reference/cache/cache_manager/#pokelance.cache.cache_manager.Base.set_size","title":"<code>set_size(max_size=100)</code>","text":"<p>Set the maximum cache size.</p> <p>Parameters:</p> Name Type Description Default <code>max_size</code> <code>int</code> <p>The maximum cache size.</p> <code>100</code> Source code in <code>pokelance/cache/cache_manager.py</code> Python<pre><code>def set_size(self, max_size: int = 100) -&gt; None:\n    \"\"\"Set the maximum cache size.\n\n    Parameters\n    ----------\n    max_size: int\n        The maximum cache size.\n    \"\"\"\n    self.max_size = max_size\n    obj: attrs.Attribute[BaseCache[t.Any, t.Any]]\n    for obj in self.__attrs_attrs__:\n        if isinstance(obj.default, BaseCache) and obj.default is not None:\n            obj.default._max_size = max_size\n</code></pre>"},{"location":"api_reference/cache/cache_manager/#pokelance.cache.cache_manager.BaseCache","title":"<code>BaseCache(max_size=100)</code>","text":"<p>               Bases: <code>MutableMapping[_KT, _VT]</code></p> <p>Base class for all caches.</p> <p>Parameters:</p> Name Type Description Default <code>max_size</code> <code>int</code> <p>The maximum size of the cache.</p> <code>100</code> <p>Attributes:</p> Name Type Description <code>_max_size</code> <code>int</code> <p>The maximum size of the cache.</p> <code>_cache</code> <code>Dict[_KT, _VT]</code> <p>The cache itself.</p> <code>_endpoints</code> <code>Dict[str, int]</code> <p>The endpoints that are cached.</p> <code>_endpoints_cached</code> <code>bool</code> <p>Whether or not the endpoints are cached.</p> <code>_client</code> <code>PokeLance</code> <p>The client that this cache is for.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; import asyncio\n&gt;&gt;&gt; from pokelance import PokeLance\n&gt;&gt;&gt;\n&gt;&gt;&gt; async def main():\n...     client = PokeLance()\n...     print(await client.ping())\n...     await asyncio.sleep(5)  # Wait for all the endpoints to load automatically. If not just load them manually.\n...     # from pokelance.http import Endpoint\n...     # data = await client.http.request(Endpoint.get_berry_endpoints())\n...     # client.berry._cache.load_documents(str(client.berry.__class__.__name__).lower(), \"berry\", data)\n...     # print(client.berry.cache.berry.endpoints)\n...     # await client.berry.cache.berry.load_all(client.http)\n...     print(client.berry.cache.berry)\n...     await client.berry.cache.berry.save('temp')  # Save the cache to a file.\n...     await client.berry.cache.berry.load('temp')  # Load the cache from a file.\n...     print(client.berry.cache.berry)\n...     await client.close()\n&gt;&gt;&gt;\n&gt;&gt;&gt; asyncio.run(main())\n</code></pre> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def __init__(self, max_size: int = 100) -&gt; None:\n    self._max_size = max_size\n    self._cache: t.Dict[_KT, _VT] = {}\n    self._endpoints: t.Dict[str, Endpoint] = {}\n    self._endpoints_cached: bool = False\n</code></pre>"},{"location":"api_reference/cache/cache_manager/#pokelance.cache.cache_manager.BaseCache.cache","title":"<code>cache: t.Dict[_KT, _VT]</code>  <code>property</code>","text":"<p>The cache itself.</p> <p>Returns:</p> Type Description <code>Dict[_KT, _VT]</code> <p>The cache itself.</p>"},{"location":"api_reference/cache/cache_manager/#pokelance.cache.cache_manager.BaseCache.endpoints","title":"<code>endpoints: t.Dict[str, Endpoint]</code>  <code>property</code>","text":"<p>The endpoints that are cached.</p> <p>Returns:</p> Type Description <code>Dict[str, Endpoint]</code> <p>The endpoints that are cached.</p>"},{"location":"api_reference/cache/cache_manager/#pokelance.cache.cache_manager.BaseCache.load","title":"<code>load(path='.')</code>  <code>async</code>","text":"<p>Load the cache from a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to load the cache from.</p> <code>'.'</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load(self, path: str = \".\") -&gt; None:\n    \"\"\"Load the cache from a file.\n\n    Parameters\n    ----------\n    path: str\n        The path to load the cache from.\n    \"\"\"\n    async with aiofiles.open(pathlib.Path(f\"{path}/{self.__class__.__name__}.json\"), \"r\") as f:\n        data = json.loads(await f.read())\n    self._max_size = len(data)\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: t.Type[\"_VT\"] = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    for endpoint, info in data.items():\n        route = route_model(endpoint=endpoint)\n        self.setdefault(route, model.from_payload(info))\n</code></pre>"},{"location":"api_reference/cache/cache_manager/#pokelance.cache.cache_manager.BaseCache.load_all","title":"<code>load_all()</code>  <code>async</code>","text":"<p>Load all documents/data from api into the cache. (Endpoints must be cached first)</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load_all(self) -&gt; None:\n    \"\"\"\n    Load all documents/data from api into the cache. (Endpoints must be cached first)\n    \"\"\"\n    if not self._endpoints_cached:\n        raise RuntimeError(\"The endpoints have not been cached yet.\")\n    self._client.logger.info(f\"Loading {self.__class__.__name__}...\")\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: \"models.BaseModel\" = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    self._max_size = len(self._endpoints)\n    for endpoint in self._endpoints.values():\n        route = route_model(endpoint=f\"/{endpoint.url.strip('/').split('/')[-2]}/{str(endpoint)}\")\n        data = self.get(route, None)\n        self.setdefault(route, data if data else model.from_payload(await self._client.http.request(route)))\n    self._client.logger.info(f\"Loaded {self.__class__.__name__}.\")\n</code></pre>"},{"location":"api_reference/cache/cache_manager/#pokelance.cache.cache_manager.BaseCache.load_all_batch","title":"<code>load_all_batch(batch_size=20)</code>  <code>async</code>","text":"<p>Load all documents/data from api into the cache in parallel. (Endpoints must be cached first)</p> <p>Parameters:</p> Name Type Description Default <code>batch_size</code> <code>int</code> <p>The number of documents to load at once. Default is 20 to avoid overwhelming the API.</p> <code>20</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def load_all_batch(self, batch_size: int = 20) -&gt; None:\n    \"\"\"\n    Load all documents/data from api into the cache in parallel. (Endpoints must be cached first)\n\n    Parameters\n    ----------\n    batch_size: int\n        The number of documents to load at once. Default is 20 to avoid overwhelming the API.\n    \"\"\"\n    if not self._endpoints_cached:\n        raise RuntimeError(\"The endpoints have not been cached yet.\")\n    self._client.logger.info(f\"Loading {self.__class__.__name__}...\")\n    route_model = importlib.import_module(\"pokelance.http\").__dict__[\"Route\"]\n    value_type = str(self.__orig_bases__[0].__args__[1]).split(\".\")[-1]  # type: ignore\n    model: t.Type[\"_VT\"] = importlib.import_module(\"pokelance.models\").__dict__[value_type]\n    self._max_size = len(self._endpoints)\n    endpoints = list(self._endpoints.values())\n    total_endpoints = len(endpoints)\n    for i in range(0, total_endpoints, batch_size):\n        batch = endpoints[i : i + batch_size]\n        tasks = []\n        for endpoint in batch:\n            route = route_model(endpoint=f\"/{endpoint.url.strip('/').split('/')[-2]}/{str(endpoint)}\")\n            data = self.get(route, None)\n            if data:\n                self.setdefault(route, data)\n                self._client.logger.info(f\"Cached {route} - existing data used.\")\n            else:\n                tasks.append(self._fetch_and_cache(route, model))\n        if tasks:\n            await asyncio.gather(*tasks)\n        self._client.logger.debug(\n            f\"Loaded batch {i//batch_size + 1}/{(total_endpoints + batch_size - 1)//batch_size} for {self.__class__.__name__}\"\n        )\n    self._client.logger.info(f\"Loaded {self.__class__.__name__} - {len(self._cache)}/{total_endpoints} items.\")\n</code></pre>"},{"location":"api_reference/cache/cache_manager/#pokelance.cache.cache_manager.BaseCache.load_documents","title":"<code>load_documents(data)</code>","text":"<p>Load documents into the cache.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>List[Dict[str, str]]</code> <p>The data to load.</p> required Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def load_documents(self, data: t.List[t.Dict[str, str]]) -&gt; None:\n    \"\"\"Load documents into the cache.\n\n    Parameters\n    ----------\n    data: typing.List[typing.Dict[str, str]]\n        The data to load.\n    \"\"\"\n    for document in data:\n        self._endpoints[document[\"name\"]] = Endpoint(url=document[\"url\"], id=int(document[\"url\"].split(\"/\")[-2]))\n    self._endpoints_cached = True\n</code></pre>"},{"location":"api_reference/cache/cache_manager/#pokelance.cache.cache_manager.BaseCache.save","title":"<code>save(path='.')</code>  <code>async</code>","text":"<p>Save the cache to a file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to save the cache to.</p> <code>'.'</code> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def save(self, path: str = \".\") -&gt; None:\n    \"\"\"Save the cache to a file.\n\n    Parameters\n    ----------\n    path: str\n        The path to save the cache to.\n    \"\"\"\n    pathlib.Path(path).mkdir(parents=True, exist_ok=True)\n    dummy: t.Dict[str, t.Dict[str, t.Any]] = {k.endpoint: v.raw for k, v in self.items()}\n    async with aiofiles.open(pathlib.Path(f\"{path}/{self.__class__.__name__}.json\"), \"w\") as f:\n        await f.write(\"{\\n\")\n        for n, (k, v) in enumerate(dummy.items()):\n            await f.write(\"\\n\".join([4 * \" \" + i for i in f'\"{k}\": {json.dumps(v, indent=4)}'.split(\"\\n\")]))\n            if n != len(dummy) - 1:\n                await f.write(\",\\n\")\n        await f.write(\"\\n}\")\n</code></pre>"},{"location":"api_reference/cache/cache_manager/#pokelance.cache.cache_manager.BaseCache.set_size","title":"<code>set_size(size)</code>","text":"<p>Set the size of the cache.</p> <p>Parameters:</p> Name Type Description Default <code>size</code> <code>int</code> <p>The size of the cache.</p> required Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>def set_size(self, size: int) -&gt; None:\n    \"\"\"Set the size of the cache.\n\n    Parameters\n    ----------\n    size: int\n        The size of the cache.\n    \"\"\"\n    self._max_size = size\n</code></pre>"},{"location":"api_reference/cache/cache_manager/#pokelance.cache.cache_manager.BaseCache.wait_until_ready","title":"<code>wait_until_ready()</code>  <code>async</code>","text":"<p>Wait until the all the endpoints are cached.</p> Source code in <code>pokelance/cache/cache.py</code> Python<pre><code>async def wait_until_ready(self) -&gt; None:\n    \"\"\"Wait until the all the endpoints are cached.\"\"\"\n    await self._client.http.connect()\n    while not self._endpoints_cached and self._client.cache_endpoints:\n        await asyncio.sleep(0.5)\n</code></pre>"},{"location":"api_reference/cache/cache_manager/#pokelance.cache.cache_manager.Berry","title":"<code>Berry</code>","text":"<p>               Bases: <code>Base</code></p> <p>Cache for berry related endpoints.</p> <p>Attributes:</p> Name Type Description <code>max_size</code> <code>int</code> <p>The maximum cache size.</p> <code>berry</code> <code>BerryCache</code> <p>The berry.</p> <code>berry_firmness</code> <code>BerryFirmnessCache</code> <p>The berry firmness.</p> <code>berry_flavor</code> <code>BerryFlavorCache</code> <p>The berry flavor.</p>"},{"location":"api_reference/cache/cache_manager/#pokelance.cache.cache_manager.Berry.set_client","title":"<code>set_client(client)</code>","text":"<p>Set the client for the cache.</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>PokeLance</code> <p>The client to set.</p> required Source code in <code>pokelance/cache/cache_manager.py</code> Python<pre><code>def set_client(self, client: \"PokeLance\") -&gt; None:\n    \"\"\"Set the client for the cache.\n\n    Parameters\n    ----------\n    client: pokelance.PokeLance\n        The client to set.\n    \"\"\"\n    obj: attrs.Attribute[BaseCache[t.Any, t.Any]]\n    for obj in self.__attrs_attrs__:\n        if isinstance(obj.default, BaseCache) and obj.default is not None:\n            obj.default._client = client\n</code></pre>"},{"location":"api_reference/cache/cache_manager/#pokelance.cache.cache_manager.Berry.set_size","title":"<code>set_size(max_size=100)</code>","text":"<p>Set the maximum cache size.</p> <p>Parameters:</p> Name Type Description Default <code>max_size</code> <code>int</code> <p>The maximum cache size.</p> <code>100</code> Source code in <code>pokelance/cache/cache_manager.py</code> Python<pre><code>def set_size(self, max_size: int = 100) -&gt; None:\n    \"\"\"Set the maximum cache size.\n\n    Parameters\n    ----------\n    max_size: int\n        The maximum cache size.\n    \"\"\"\n    self.max_size = max_size\n    obj: attrs.Attribute[BaseCache[t.Any, t.Any]]\n    for obj in self.__attrs_attrs__:\n        if isinstance(obj.default, BaseCache) and obj.default is not None:\n            obj.default._max_size = max_size\n</code></pre>"},{"location":"api_reference/cache/cache_manager/#pokelance.cache.cache_manager.Cache","title":"<code>Cache</code>","text":"<p>Cache for all endpoints.</p> <p>Attributes:</p> Name Type Description <code>client</code> <code>PokeLance</code> <p>The pokelance client.</p> <code>max_size</code> <code>int</code> <p>The maximum cache size.</p> <code>berry</code> <code>Berry</code> <p>The berry cache.</p> <code>contest</code> <code>Contest</code> <p>The contest cache.</p> <code>encounter</code> <code>Encounter</code> <p>The encounter cache.</p> <code>evolution</code> <code>Evolution</code> <p>The evolution cache.</p> <code>game</code> <code>Game</code> <p>The game cache.</p> <code>item</code> <code>Item</code> <p>The item cache.</p> <code>location</code> <code>Location</code> <p>The location cache.</p> <code>machine</code> <code>Machine</code> <p>The machine cache.</p> <code>move</code> <code>Move</code> <p>The move cache.</p> <code>pokemon</code> <code>Pokemon</code> <p>The pokemon cache.</p>"},{"location":"api_reference/cache/cache_manager/#pokelance.cache.cache_manager.Cache.load_documents","title":"<code>load_documents(category, _type, data)</code>","text":"<p>Loads the endpoint data into the cache.</p> <p>Parameters:</p> Name Type Description Default <code>category</code> <code>str</code> <p>The category of the endpoint.</p> required <code>_type</code> <code>str</code> <p>The type of the endpoint.</p> required <code>data</code> <code>List[Dict[str, str]]</code> <p>The data to load.</p> required Source code in <code>pokelance/cache/cache_manager.py</code> Python<pre><code>def load_documents(self, category: str, _type: str, data: t.List[t.Dict[str, str]]) -&gt; None:\n    \"\"\"Loads the endpoint data into the cache.\n\n    Parameters\n    ----------\n    category: str\n        The category of the endpoint.\n    _type: str\n        The type of the endpoint.\n    data: typing.List[Dict[str, str]]\n        The data to load.\n    \"\"\"\n    getattr(getattr(self, category.lower()), _type).load_documents(data)\n</code></pre>"},{"location":"api_reference/cache/cache_manager/#pokelance.cache.cache_manager.Cache.set_size","title":"<code>set_size(max_size=100)</code>","text":"<p>Set the maximum cache size.</p> <p>Parameters:</p> Name Type Description Default <code>max_size</code> <code>int</code> <p>The maximum cache size.</p> <code>100</code> Source code in <code>pokelance/cache/cache_manager.py</code> Python<pre><code>def set_size(self, max_size: int = 100) -&gt; None:\n    \"\"\"Set the maximum cache size.\n\n    Parameters\n    ----------\n    max_size: int\n        The maximum cache size.\n    \"\"\"\n    self.max_size = max_size\n    obj: attrs.Attribute[Base]\n    for obj in self.__attrs_attrs__:\n        if isinstance(obj.default, Base) and obj.default is not None:\n            obj.default.set_size(max_size)\n</code></pre>"},{"location":"api_reference/cache/cache_manager/#pokelance.cache.cache_manager.Contest","title":"<code>Contest</code>","text":"<p>               Bases: <code>Base</code></p> <p>Cache for contest related endpoints.</p> <p>Attributes:</p> Name Type Description <code>max_size</code> <code>int</code> <p>The maximum cache size.</p> <code>contest_type</code> <code>ContestTypeCache</code> <p>The contest type.</p> <code>contest_effect</code> <code>ContestEffectCache</code> <p>The contest effect.</p> <code>super_contest_effect</code> <code>SuperContestEffectCache</code> <p>The super contest effect.</p>"},{"location":"api_reference/cache/cache_manager/#pokelance.cache.cache_manager.Contest.set_client","title":"<code>set_client(client)</code>","text":"<p>Set the client for the cache.</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>PokeLance</code> <p>The client to set.</p> required Source code in <code>pokelance/cache/cache_manager.py</code> Python<pre><code>def set_client(self, client: \"PokeLance\") -&gt; None:\n    \"\"\"Set the client for the cache.\n\n    Parameters\n    ----------\n    client: pokelance.PokeLance\n        The client to set.\n    \"\"\"\n    obj: attrs.Attribute[BaseCache[t.Any, t.Any]]\n    for obj in self.__attrs_attrs__:\n        if isinstance(obj.default, BaseCache) and obj.default is not None:\n            obj.default._client = client\n</code></pre>"},{"location":"api_reference/cache/cache_manager/#pokelance.cache.cache_manager.Contest.set_size","title":"<code>set_size(max_size=100)</code>","text":"<p>Set the maximum cache size.</p> <p>Parameters:</p> Name Type Description Default <code>max_size</code> <code>int</code> <p>The maximum cache size.</p> <code>100</code> Source code in <code>pokelance/cache/cache_manager.py</code> Python<pre><code>def set_size(self, max_size: int = 100) -&gt; None:\n    \"\"\"Set the maximum cache size.\n\n    Parameters\n    ----------\n    max_size: int\n        The maximum cache size.\n    \"\"\"\n    self.max_size = max_size\n    obj: attrs.Attribute[BaseCache[t.Any, t.Any]]\n    for obj in self.__attrs_attrs__:\n        if isinstance(obj.default, BaseCache) and obj.default is not None:\n            obj.default._max_size = max_size\n</code></pre>"},{"location":"api_reference/cache/cache_manager/#pokelance.cache.cache_manager.Encounter","title":"<code>Encounter</code>","text":"<p>               Bases: <code>Base</code></p> <p>Cache for encounter related endpoints.</p> <p>Attributes:</p> Name Type Description <code>max_size</code> <code>int</code> <p>The maximum cache size.</p> <code>encounter_method</code> <code>EncounterMethodCache</code> <p>The method in which the encounter happens.</p> <code>encounter_condition</code> <code>EncounterConditionCache</code> <p>The condition in which the encounter happens.</p> <code>encounter_condition_value</code> <code>EncounterConditionValueCache</code> <p>The condition value in which the encounter happens.</p>"},{"location":"api_reference/cache/cache_manager/#pokelance.cache.cache_manager.Encounter.set_client","title":"<code>set_client(client)</code>","text":"<p>Set the client for the cache.</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>PokeLance</code> <p>The client to set.</p> required Source code in <code>pokelance/cache/cache_manager.py</code> Python<pre><code>def set_client(self, client: \"PokeLance\") -&gt; None:\n    \"\"\"Set the client for the cache.\n\n    Parameters\n    ----------\n    client: pokelance.PokeLance\n        The client to set.\n    \"\"\"\n    obj: attrs.Attribute[BaseCache[t.Any, t.Any]]\n    for obj in self.__attrs_attrs__:\n        if isinstance(obj.default, BaseCache) and obj.default is not None:\n            obj.default._client = client\n</code></pre>"},{"location":"api_reference/cache/cache_manager/#pokelance.cache.cache_manager.Encounter.set_size","title":"<code>set_size(max_size=100)</code>","text":"<p>Set the maximum cache size.</p> <p>Parameters:</p> Name Type Description Default <code>max_size</code> <code>int</code> <p>The maximum cache size.</p> <code>100</code> Source code in <code>pokelance/cache/cache_manager.py</code> Python<pre><code>def set_size(self, max_size: int = 100) -&gt; None:\n    \"\"\"Set the maximum cache size.\n\n    Parameters\n    ----------\n    max_size: int\n        The maximum cache size.\n    \"\"\"\n    self.max_size = max_size\n    obj: attrs.Attribute[BaseCache[t.Any, t.Any]]\n    for obj in self.__attrs_attrs__:\n        if isinstance(obj.default, BaseCache) and obj.default is not None:\n            obj.default._max_size = max_size\n</code></pre>"},{"location":"api_reference/cache/cache_manager/#pokelance.cache.cache_manager.Evolution","title":"<code>Evolution</code>","text":"<p>               Bases: <code>Base</code></p> <p>Cache for evolution related endpoints.</p> <p>Attributes:</p> Name Type Description <code>max_size</code> <code>int</code> <p>The maximum cache size.</p> <code>evolution_chain</code> <code>EvolutionChainCache</code> <p>The evolution chain of a Pokemon.</p> <code>evolution_trigger</code> <code>EvolutionTriggerCache</code> <p>The trigger in which the evolution happens.</p>"},{"location":"api_reference/cache/cache_manager/#pokelance.cache.cache_manager.Evolution.set_client","title":"<code>set_client(client)</code>","text":"<p>Set the client for the cache.</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>PokeLance</code> <p>The client to set.</p> required Source code in <code>pokelance/cache/cache_manager.py</code> Python<pre><code>def set_client(self, client: \"PokeLance\") -&gt; None:\n    \"\"\"Set the client for the cache.\n\n    Parameters\n    ----------\n    client: pokelance.PokeLance\n        The client to set.\n    \"\"\"\n    obj: attrs.Attribute[BaseCache[t.Any, t.Any]]\n    for obj in self.__attrs_attrs__:\n        if isinstance(obj.default, BaseCache) and obj.default is not None:\n            obj.default._client = client\n</code></pre>"},{"location":"api_reference/cache/cache_manager/#pokelance.cache.cache_manager.Evolution.set_size","title":"<code>set_size(max_size=100)</code>","text":"<p>Set the maximum cache size.</p> <p>Parameters:</p> Name Type Description Default <code>max_size</code> <code>int</code> <p>The maximum cache size.</p> <code>100</code> Source code in <code>pokelance/cache/cache_manager.py</code> Python<pre><code>def set_size(self, max_size: int = 100) -&gt; None:\n    \"\"\"Set the maximum cache size.\n\n    Parameters\n    ----------\n    max_size: int\n        The maximum cache size.\n    \"\"\"\n    self.max_size = max_size\n    obj: attrs.Attribute[BaseCache[t.Any, t.Any]]\n    for obj in self.__attrs_attrs__:\n        if isinstance(obj.default, BaseCache) and obj.default is not None:\n            obj.default._max_size = max_size\n</code></pre>"},{"location":"api_reference/cache/cache_manager/#pokelance.cache.cache_manager.Game","title":"<code>Game</code>","text":"<p>               Bases: <code>Base</code></p> <p>Cache for game related endpoints.</p> <p>Attributes:</p> Name Type Description <code>max_size</code> <code>int</code> <p>The maximum cache size.</p> <code>generation</code> <code>GamesGenerationCache</code> <p>The generation of a game.</p> <code>pokedex</code> <code>GamesPokedexCache</code> <p>The pokedex of a game.</p> <code>version</code> <code>GamesVersionCache</code> <p>The version of a game.</p> <code>version_group</code> <code>GamesVersionGroupCache</code> <p>The version group of a game.</p>"},{"location":"api_reference/cache/cache_manager/#pokelance.cache.cache_manager.Game.set_client","title":"<code>set_client(client)</code>","text":"<p>Set the client for the cache.</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>PokeLance</code> <p>The client to set.</p> required Source code in <code>pokelance/cache/cache_manager.py</code> Python<pre><code>def set_client(self, client: \"PokeLance\") -&gt; None:\n    \"\"\"Set the client for the cache.\n\n    Parameters\n    ----------\n    client: pokelance.PokeLance\n        The client to set.\n    \"\"\"\n    obj: attrs.Attribute[BaseCache[t.Any, t.Any]]\n    for obj in self.__attrs_attrs__:\n        if isinstance(obj.default, BaseCache) and obj.default is not None:\n            obj.default._client = client\n</code></pre>"},{"location":"api_reference/cache/cache_manager/#pokelance.cache.cache_manager.Game.set_size","title":"<code>set_size(max_size=100)</code>","text":"<p>Set the maximum cache size.</p> <p>Parameters:</p> Name Type Description Default <code>max_size</code> <code>int</code> <p>The maximum cache size.</p> <code>100</code> Source code in <code>pokelance/cache/cache_manager.py</code> Python<pre><code>def set_size(self, max_size: int = 100) -&gt; None:\n    \"\"\"Set the maximum cache size.\n\n    Parameters\n    ----------\n    max_size: int\n        The maximum cache size.\n    \"\"\"\n    self.max_size = max_size\n    obj: attrs.Attribute[BaseCache[t.Any, t.Any]]\n    for obj in self.__attrs_attrs__:\n        if isinstance(obj.default, BaseCache) and obj.default is not None:\n            obj.default._max_size = max_size\n</code></pre>"},{"location":"api_reference/cache/cache_manager/#pokelance.cache.cache_manager.Item","title":"<code>Item</code>","text":"<p>               Bases: <code>Base</code></p> <p>Cache for item related endpoints.</p> <p>Attributes:</p> Name Type Description <code>max_size</code> <code>int</code> <p>The maximum cache size.</p> <code>item</code> <code>ItemCache</code> <p>The item.</p> <code>item_attribute</code> <code>ItemAttributeCache</code> <p>The attribute of an item.</p> <code>item_category</code> <code>ItemCategoryCache</code> <p>The category of an item.</p> <code>item_fling_effect</code> <code>ItemFlingEffectCache</code> <p>The fling effect of an item.</p> <code>item_pocket</code> <code>ItemPocketCache</code> <p>The pocket of an item.</p>"},{"location":"api_reference/cache/cache_manager/#pokelance.cache.cache_manager.Item.set_client","title":"<code>set_client(client)</code>","text":"<p>Set the client for the cache.</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>PokeLance</code> <p>The client to set.</p> required Source code in <code>pokelance/cache/cache_manager.py</code> Python<pre><code>def set_client(self, client: \"PokeLance\") -&gt; None:\n    \"\"\"Set the client for the cache.\n\n    Parameters\n    ----------\n    client: pokelance.PokeLance\n        The client to set.\n    \"\"\"\n    obj: attrs.Attribute[BaseCache[t.Any, t.Any]]\n    for obj in self.__attrs_attrs__:\n        if isinstance(obj.default, BaseCache) and obj.default is not None:\n            obj.default._client = client\n</code></pre>"},{"location":"api_reference/cache/cache_manager/#pokelance.cache.cache_manager.Item.set_size","title":"<code>set_size(max_size=100)</code>","text":"<p>Set the maximum cache size.</p> <p>Parameters:</p> Name Type Description Default <code>max_size</code> <code>int</code> <p>The maximum cache size.</p> <code>100</code> Source code in <code>pokelance/cache/cache_manager.py</code> Python<pre><code>def set_size(self, max_size: int = 100) -&gt; None:\n    \"\"\"Set the maximum cache size.\n\n    Parameters\n    ----------\n    max_size: int\n        The maximum cache size.\n    \"\"\"\n    self.max_size = max_size\n    obj: attrs.Attribute[BaseCache[t.Any, t.Any]]\n    for obj in self.__attrs_attrs__:\n        if isinstance(obj.default, BaseCache) and obj.default is not None:\n            obj.default._max_size = max_size\n</code></pre>"},{"location":"api_reference/cache/cache_manager/#pokelance.cache.cache_manager.Location","title":"<code>Location</code>","text":"<p>               Bases: <code>Base</code></p> <p>Cache for location related endpoints.</p> <p>Attributes:</p> Name Type Description <code>max_size</code> <code>int</code> <p>The maximum cache size.</p> <code>location</code> <code>LocationCache</code> <p>The location.</p> <code>location_area</code> <code>LocationAreaCache</code> <p>The location area.</p>"},{"location":"api_reference/cache/cache_manager/#pokelance.cache.cache_manager.Location.set_client","title":"<code>set_client(client)</code>","text":"<p>Set the client for the cache.</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>PokeLance</code> <p>The client to set.</p> required Source code in <code>pokelance/cache/cache_manager.py</code> Python<pre><code>def set_client(self, client: \"PokeLance\") -&gt; None:\n    \"\"\"Set the client for the cache.\n\n    Parameters\n    ----------\n    client: pokelance.PokeLance\n        The client to set.\n    \"\"\"\n    obj: attrs.Attribute[BaseCache[t.Any, t.Any]]\n    for obj in self.__attrs_attrs__:\n        if isinstance(obj.default, BaseCache) and obj.default is not None:\n            obj.default._client = client\n</code></pre>"},{"location":"api_reference/cache/cache_manager/#pokelance.cache.cache_manager.Location.set_size","title":"<code>set_size(max_size=100)</code>","text":"<p>Set the maximum cache size.</p> <p>Parameters:</p> Name Type Description Default <code>max_size</code> <code>int</code> <p>The maximum cache size.</p> <code>100</code> Source code in <code>pokelance/cache/cache_manager.py</code> Python<pre><code>def set_size(self, max_size: int = 100) -&gt; None:\n    \"\"\"Set the maximum cache size.\n\n    Parameters\n    ----------\n    max_size: int\n        The maximum cache size.\n    \"\"\"\n    self.max_size = max_size\n    obj: attrs.Attribute[BaseCache[t.Any, t.Any]]\n    for obj in self.__attrs_attrs__:\n        if isinstance(obj.default, BaseCache) and obj.default is not None:\n            obj.default._max_size = max_size\n</code></pre>"},{"location":"api_reference/cache/cache_manager/#pokelance.cache.cache_manager.Machine","title":"<code>Machine</code>","text":"<p>               Bases: <code>Base</code></p> <p>Cache for machine related endpoints.</p> <p>Attributes:</p> Name Type Description <code>max_size</code> <code>int</code> <p>The maximum cache size.</p> <code>machine</code> <code>MachineCache</code> <p>The machine that teaches a move.</p>"},{"location":"api_reference/cache/cache_manager/#pokelance.cache.cache_manager.Machine.set_client","title":"<code>set_client(client)</code>","text":"<p>Set the client for the cache.</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>PokeLance</code> <p>The client to set.</p> required Source code in <code>pokelance/cache/cache_manager.py</code> Python<pre><code>def set_client(self, client: \"PokeLance\") -&gt; None:\n    \"\"\"Set the client for the cache.\n\n    Parameters\n    ----------\n    client: pokelance.PokeLance\n        The client to set.\n    \"\"\"\n    obj: attrs.Attribute[BaseCache[t.Any, t.Any]]\n    for obj in self.__attrs_attrs__:\n        if isinstance(obj.default, BaseCache) and obj.default is not None:\n            obj.default._client = client\n</code></pre>"},{"location":"api_reference/cache/cache_manager/#pokelance.cache.cache_manager.Machine.set_size","title":"<code>set_size(max_size=100)</code>","text":"<p>Set the maximum cache size.</p> <p>Parameters:</p> Name Type Description Default <code>max_size</code> <code>int</code> <p>The maximum cache size.</p> <code>100</code> Source code in <code>pokelance/cache/cache_manager.py</code> Python<pre><code>def set_size(self, max_size: int = 100) -&gt; None:\n    \"\"\"Set the maximum cache size.\n\n    Parameters\n    ----------\n    max_size: int\n        The maximum cache size.\n    \"\"\"\n    self.max_size = max_size\n    obj: attrs.Attribute[BaseCache[t.Any, t.Any]]\n    for obj in self.__attrs_attrs__:\n        if isinstance(obj.default, BaseCache) and obj.default is not None:\n            obj.default._max_size = max_size\n</code></pre>"},{"location":"api_reference/cache/cache_manager/#pokelance.cache.cache_manager.Move","title":"<code>Move</code>","text":"<p>               Bases: <code>Base</code></p> <p>Cache for move related endpoints.</p> <p>Attributes:</p> Name Type Description <code>max_size</code> <code>int</code> <p>The maximum cache size.</p> <code>move</code> <code>MoveCache</code> <p>The move.</p> <code>move_ailment</code> <code>MoveAilmentCache</code> <p>The ailment of a move.</p> <code>move_battle_style</code> <code>MoveBattleStyleCache</code> <p>The battle style of a move.</p> <code>move_category</code> <code>MoveCategoryCache</code> <p>The category of a move.</p> <code>move_damage_class</code> <code>MoveDamageClassCache</code> <p>The damage class of a move.</p> <code>move_learn_method</code> <code>MoveLearnMethodCache</code> <p>The learn method of a move.</p> <code>move_target</code> <code>MoveTargetCache</code> <p>The target of a move.</p>"},{"location":"api_reference/cache/cache_manager/#pokelance.cache.cache_manager.Move.set_client","title":"<code>set_client(client)</code>","text":"<p>Set the client for the cache.</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>PokeLance</code> <p>The client to set.</p> required Source code in <code>pokelance/cache/cache_manager.py</code> Python<pre><code>def set_client(self, client: \"PokeLance\") -&gt; None:\n    \"\"\"Set the client for the cache.\n\n    Parameters\n    ----------\n    client: pokelance.PokeLance\n        The client to set.\n    \"\"\"\n    obj: attrs.Attribute[BaseCache[t.Any, t.Any]]\n    for obj in self.__attrs_attrs__:\n        if isinstance(obj.default, BaseCache) and obj.default is not None:\n            obj.default._client = client\n</code></pre>"},{"location":"api_reference/cache/cache_manager/#pokelance.cache.cache_manager.Move.set_size","title":"<code>set_size(max_size=100)</code>","text":"<p>Set the maximum cache size.</p> <p>Parameters:</p> Name Type Description Default <code>max_size</code> <code>int</code> <p>The maximum cache size.</p> <code>100</code> Source code in <code>pokelance/cache/cache_manager.py</code> Python<pre><code>def set_size(self, max_size: int = 100) -&gt; None:\n    \"\"\"Set the maximum cache size.\n\n    Parameters\n    ----------\n    max_size: int\n        The maximum cache size.\n    \"\"\"\n    self.max_size = max_size\n    obj: attrs.Attribute[BaseCache[t.Any, t.Any]]\n    for obj in self.__attrs_attrs__:\n        if isinstance(obj.default, BaseCache) and obj.default is not None:\n            obj.default._max_size = max_size\n</code></pre>"},{"location":"api_reference/cache/cache_manager/#pokelance.cache.cache_manager.Pokemon","title":"<code>Pokemon</code>","text":"<p>               Bases: <code>Base</code></p> <p>Cache for pokemon related endpoints.</p> <p>Attributes:</p> Name Type Description <code>max_size</code> <code>int</code> <p>The maximum cache size.</p> <code>ability</code> <code>AbilityCache</code> <p>The ability.</p> <code>characteristic</code> <code>CharacteristicCache</code> <p>The characteristic.</p> <code>egg_group</code> <code>EggGroupCache</code> <p>The egg group.</p> <code>gender</code> <code>GenderCache</code> <p>The gender cache.</p> <code>growth_rate</code> <code>GrowthRateCache</code> <p>The growth rate.</p> <code>nature</code> <code>NatureCache</code> <p>The nature.</p> <code>pokeathlon_stat</code> <code>PokeathlonStatCache</code> <p>The pokeathlon stat.</p> <code>pokemon</code> <code>PokemonCache</code> <p>The pokemon.</p> <code>pokemon_color</code> <code>PokemonColorCache</code> <p>The color of a pokemon.</p> <code>pokemon_form</code> <code>PokemonFormCache</code> <p>The form of a pokemon.</p> <code>pokemon_habitat</code> <code>PokemonHabitatCache</code> <p>The habitat of a pokemon.</p> <code>pokemon_shape</code> <code>PokemonShapeCache</code> <p>The shape of a pokemon.</p> <code>pokemon_species</code> <code>PokemonSpeciesCache</code> <p>The species of a pokemon.</p> <code>stat</code> <code>StatCache</code> <p>The stat.</p> <code>type</code> <code>TypeCache</code> <p>The type.</p>"},{"location":"api_reference/cache/cache_manager/#pokelance.cache.cache_manager.Pokemon.set_client","title":"<code>set_client(client)</code>","text":"<p>Set the client for the cache.</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>PokeLance</code> <p>The client to set.</p> required Source code in <code>pokelance/cache/cache_manager.py</code> Python<pre><code>def set_client(self, client: \"PokeLance\") -&gt; None:\n    \"\"\"Set the client for the cache.\n\n    Parameters\n    ----------\n    client: pokelance.PokeLance\n        The client to set.\n    \"\"\"\n    obj: attrs.Attribute[BaseCache[t.Any, t.Any]]\n    for obj in self.__attrs_attrs__:\n        if isinstance(obj.default, BaseCache) and obj.default is not None:\n            obj.default._client = client\n</code></pre>"},{"location":"api_reference/cache/cache_manager/#pokelance.cache.cache_manager.Pokemon.set_size","title":"<code>set_size(max_size=100)</code>","text":"<p>Set the maximum cache size.</p> <p>Parameters:</p> Name Type Description Default <code>max_size</code> <code>int</code> <p>The maximum cache size.</p> <code>100</code> Source code in <code>pokelance/cache/cache_manager.py</code> Python<pre><code>def set_size(self, max_size: int = 100) -&gt; None:\n    \"\"\"Set the maximum cache size.\n\n    Parameters\n    ----------\n    max_size: int\n        The maximum cache size.\n    \"\"\"\n    self.max_size = max_size\n    obj: attrs.Attribute[BaseCache[t.Any, t.Any]]\n    for obj in self.__attrs_attrs__:\n        if isinstance(obj.default, BaseCache) and obj.default is not None:\n            obj.default._max_size = max_size\n</code></pre>"},{"location":"api_reference/ext/_base/","title":"base","text":""},{"location":"api_reference/ext/_base/#pokelance.ext._base","title":"<code>pokelance.ext._base</code>","text":""},{"location":"api_reference/ext/_base/#pokelance.ext._base.BaseExtension","title":"<code>BaseExtension(client)</code>","text":"<p>The base extension class.</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>HttpClient</code> <p>The client to use for requests.</p> required <p>Attributes:</p> Name Type Description <code>_client</code> <code>HttpClient</code> <p>The client to use for requests.</p> <code>_cache</code> <code>Cache</code> <p>The cache to use for requests.</p> <p>Initializes the extension.</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>HttpClient</code> <p>The client to use for requests.</p> required Source code in <code>pokelance/ext/_base.py</code> Python<pre><code>def __init__(self, client: \"HttpClient\") -&gt; None:\n    \"\"\"Initializes the extension.\n\n    Parameters\n    ----------\n    client: pokelance.http.HttpClient\n        The client to use for requests.\n    \"\"\"\n    self._client = client\n    self._cache = self._client.cache\n    self.cache = getattr(self._cache, self.__class__.__name__.lower())\n</code></pre>"},{"location":"api_reference/ext/_base/#pokelance.ext._base.BaseExtension.setup","title":"<code>setup()</code>  <code>async</code>","text":"<p>Sets up the extension.</p> Source code in <code>pokelance/ext/_base.py</code> Python<pre><code>async def setup(self) -&gt; None:\n    \"\"\"Sets up the extension.\"\"\"\n    for item in dir(self):\n        if item.startswith(\"fetch_\"):\n            data = await self._client.request(\n                t.cast(t.Callable[[], \"Route\"], getattr(Endpoint, f\"get_{item[6:]}_endpoints\"))()\n            )\n            self._cache.load_documents(str(self.__class__.__name__), item[6:], data[\"results\"])\n</code></pre>"},{"location":"api_reference/ext/berry/","title":"berry","text":""},{"location":"api_reference/ext/berry/#pokelance.ext.berry","title":"<code>pokelance.ext.berry</code>","text":""},{"location":"api_reference/ext/berry/#pokelance.ext.berry.Berry","title":"<code>Berry(client)</code>","text":"<p>               Bases: <code>BaseExtension</code></p> <p>Extension for berry related endpoints.</p> <p>Attributes:</p> Name Type Description <code>cache</code> <code>Berry</code> <p>The cache for this extension.</p> <p>Initializes the extension.</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>HttpClient</code> <p>The client to use for requests.</p> required Source code in <code>pokelance/ext/_base.py</code> Python<pre><code>def __init__(self, client: \"HttpClient\") -&gt; None:\n    \"\"\"Initializes the extension.\n\n    Parameters\n    ----------\n    client: pokelance.http.HttpClient\n        The client to use for requests.\n    \"\"\"\n    self._client = client\n    self._cache = self._client.cache\n    self.cache = getattr(self._cache, self.__class__.__name__.lower())\n</code></pre>"},{"location":"api_reference/ext/berry/#pokelance.ext.berry.Berry.fetch_berry","title":"<code>fetch_berry(name)</code>  <code>async</code>","text":"<p>Fetches a berry from the API.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Union[str, int]</code> <p>The name or id of the berry.</p> required <p>Returns:</p> Type Description <code>Berry</code> <p>The berry if it exists in the API, else raises ResourceNotFound.</p> <p>Raises:</p> Type Description <code>ResourceNotFound</code> <p>The name or id of the berry is invalid.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from pokelance import PokeLance\n&gt;&gt;&gt; import asyncio\n&gt;&gt;&gt; client = PokeLance()\n&gt;&gt;&gt; async def main() -&gt; None:\n...     berry = await client.berry.fetch_berry(\"cheri\")\n...     print(berry.name)\n...     await client.close()\n&gt;&gt;&gt; asyncio.run(main())\n'cheri'\n</code></pre> Source code in <code>pokelance/ext/berry.py</code> Python<pre><code>async def fetch_berry(self, name: t.Union[str, int]) -&gt; BerryModel:\n    \"\"\"Fetches a berry from the API.\n\n    Parameters\n    ----------\n    name: typing.Union[str, int]\n        The name or id of the berry.\n\n    Returns\n    -------\n    BerryModel\n        The berry if it exists in the API, else raises ResourceNotFound.\n\n    Raises\n    ------\n    pokelance.exceptions.ResourceNotFound\n        The name or id of the berry is invalid.\n\n    Examples\n    --------\n\n    &gt;&gt;&gt; from pokelance import PokeLance\n    &gt;&gt;&gt; import asyncio\n    &gt;&gt;&gt; client = PokeLance()\n    &gt;&gt;&gt; async def main() -&gt; None:\n    ...     berry = await client.berry.fetch_berry(\"cheri\")\n    ...     print(berry.name)\n    ...     await client.close()\n    &gt;&gt;&gt; asyncio.run(main())\n    'cheri'\n    \"\"\"\n    route = Endpoint.get_berry(name)\n    self._validate_resource(self.cache.berry, name, route)\n    data = await self._client.request(route)\n    return self.cache.berry.setdefault(route, BerryModel.from_payload(data))\n</code></pre>"},{"location":"api_reference/ext/berry/#pokelance.ext.berry.Berry.fetch_berry_firmness","title":"<code>fetch_berry_firmness(name)</code>  <code>async</code>","text":"<p>Fetches a berry firmness from the API.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Union[str, int]</code> <p>The name or id of the berry firmness.</p> required <p>Returns:</p> Type Description <code>BerryFirmness</code> <p>The berry firmness if it exists in the API, else raises ResourceNotFound.</p> <p>Raises:</p> Type Description <code>ResourceNotFound</code> <p>The name or id of the berry firmness is invalid.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from pokelance import PokeLance\n&gt;&gt;&gt; import asyncio\n&gt;&gt;&gt; client = PokeLance()\n&gt;&gt;&gt; async def main() -&gt; None:\n...     berry_firmness = await client.berry.fetch_berry_firmness(\"very-soft\")\n...     print(berry_firmness.name)\n...     await client.close()\n&gt;&gt;&gt; asyncio.run(main())\n'very-soft'\n</code></pre> Source code in <code>pokelance/ext/berry.py</code> Python<pre><code>async def fetch_berry_firmness(self, name: t.Union[str, int]) -&gt; BerryFirmness:\n    \"\"\"Fetches a berry firmness from the API.\n\n    Parameters\n    ----------\n    name: typing.Union[str, int]\n        The name or id of the berry firmness.\n\n    Returns\n    -------\n    BerryFirmness\n        The berry firmness if it exists in the API, else raises ResourceNotFound.\n\n    Raises\n    ------\n    pokelance.exceptions.ResourceNotFound\n        The name or id of the berry firmness is invalid.\n\n    Examples\n    --------\n\n    &gt;&gt;&gt; from pokelance import PokeLance\n    &gt;&gt;&gt; import asyncio\n    &gt;&gt;&gt; client = PokeLance()\n    &gt;&gt;&gt; async def main() -&gt; None:\n    ...     berry_firmness = await client.berry.fetch_berry_firmness(\"very-soft\")\n    ...     print(berry_firmness.name)\n    ...     await client.close()\n    &gt;&gt;&gt; asyncio.run(main())\n    'very-soft'\n    \"\"\"\n    route = Endpoint.get_berry_firmness(name)\n    self._validate_resource(self.cache.berry_firmness, name, route)\n    data = await self._client.request(route)\n    return self.cache.berry_firmness.setdefault(route, BerryFirmness.from_payload(data))\n</code></pre>"},{"location":"api_reference/ext/berry/#pokelance.ext.berry.Berry.fetch_berry_flavor","title":"<code>fetch_berry_flavor(name)</code>  <code>async</code>","text":"<p>Fetches a berry flavor from the API.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Union[str, int]</code> <p>The name or id of the berry flavor.</p> required <p>Returns:</p> Type Description <code>BerryFlavor</code> <p>The berry flavor if it exists in the API, else raises ResourceNotFound.</p> <p>Raises:</p> Type Description <code>ResourceNotFound</code> <p>The name or id of the berry flavor is invalid.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from pokelance import PokeLance\n&gt;&gt;&gt; import asyncio\n&gt;&gt;&gt; client = PokeLance()\n&gt;&gt;&gt; async def main() -&gt; None:\n...     berry_flavor = await client.berry.fetch_berry_flavor(\"spicy\")\n...     print(berry_flavor.name)\n...     await client.close()\n&gt;&gt;&gt; asyncio.run(main())\n'spicy'\n</code></pre> Source code in <code>pokelance/ext/berry.py</code> Python<pre><code>async def fetch_berry_flavor(self, name: t.Union[str, int]) -&gt; BerryFlavor:\n    \"\"\"Fetches a berry flavor from the API.\n\n    Parameters\n    ----------\n    name: typing.Union[str, int]\n        The name or id of the berry flavor.\n\n    Returns\n    -------\n    BerryFlavor\n        The berry flavor if it exists in the API, else raises ResourceNotFound.\n\n    Raises\n    ------\n    pokelance.exceptions.ResourceNotFound\n        The name or id of the berry flavor is invalid.\n\n    Examples\n    --------\n\n    &gt;&gt;&gt; from pokelance import PokeLance\n    &gt;&gt;&gt; import asyncio\n    &gt;&gt;&gt; client = PokeLance()\n    &gt;&gt;&gt; async def main() -&gt; None:\n    ...     berry_flavor = await client.berry.fetch_berry_flavor(\"spicy\")\n    ...     print(berry_flavor.name)\n    ...     await client.close()\n    &gt;&gt;&gt; asyncio.run(main())\n    'spicy'\n    \"\"\"\n    route = Endpoint.get_berry_flavor(name)\n    self._validate_resource(self.cache.berry_flavor, name, route)\n    data = await self._client.request(route)\n    return self.cache.berry_flavor.setdefault(route, BerryFlavor.from_payload(data))\n</code></pre>"},{"location":"api_reference/ext/berry/#pokelance.ext.berry.Berry.get_berry","title":"<code>get_berry(name)</code>","text":"<p>Gets a berry from the cache.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Union[str, int]</code> <p>The name or id of the berry.</p> required <p>Returns:</p> Type Description <code>Optional[Berry]</code> <p>The berry if it exists in the cache, else None.</p> <p>Raises:</p> Type Description <code>ResourceNotFound</code> <p>The name or id of the berry is invalid.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from pokelance import PokeLance\n&gt;&gt;&gt; client = PokeLance()\n&gt;&gt;&gt; berry = client.berry.get_berry(\"cheri\")  # None if not cached\n&gt;&gt;&gt; berry.name\n'cheri'\n</code></pre> Source code in <code>pokelance/ext/berry.py</code> Python<pre><code>def get_berry(self, name: t.Union[str, int]) -&gt; t.Optional[BerryModel]:\n    \"\"\"Gets a berry from the cache.\n\n    Parameters\n    ----------\n    name: typing.Union[str, int]\n        The name or id of the berry.\n\n    Returns\n    -------\n    typing.Optional[pokelance.models.Berry]\n        The berry if it exists in the cache, else None.\n\n    Raises\n    ------\n    pokelance.exceptions.ResourceNotFound\n        The name or id of the berry is invalid.\n\n    Examples\n    --------\n\n    &gt;&gt;&gt; from pokelance import PokeLance\n    &gt;&gt;&gt; client = PokeLance()\n    &gt;&gt;&gt; berry = client.berry.get_berry(\"cheri\")  # None if not cached\n    &gt;&gt;&gt; berry.name\n    'cheri'\n    \"\"\"\n    route = Endpoint.get_berry(name)\n    self._validate_resource(self.cache.berry, name, route)\n    return self.cache.berry.get(route, None)\n</code></pre>"},{"location":"api_reference/ext/berry/#pokelance.ext.berry.Berry.get_berry_firmness","title":"<code>get_berry_firmness(name)</code>","text":"<p>Gets a berry firmness from the cache.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Union[str, int]</code> <p>The name or id of the berry firmness.</p> required <p>Returns:</p> Type Description <code>Optional[BerryFirmness]</code> <p>The berry firmness if it exists in the cache, else None.</p> <p>Raises:</p> Type Description <code>ResourceNotFound</code> <p>The name or id of the berry firmness is invalid.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from pokelance import PokeLance\n&gt;&gt;&gt; client = PokeLance()\n&gt;&gt;&gt; berry_firmness = client.berry.get_berry_firmness(\"very-soft\")  # None if not cached\n&gt;&gt;&gt; berry_firmness.name\n'very-soft'\n</code></pre> Source code in <code>pokelance/ext/berry.py</code> Python<pre><code>def get_berry_firmness(self, name: t.Union[str, int]) -&gt; t.Optional[BerryFirmness]:\n    \"\"\"Gets a berry firmness from the cache.\n\n    Parameters\n    ----------\n    name: typing.Union[str, int]\n        The name or id of the berry firmness.\n\n    Returns\n    -------\n    typing.Optional[pokelance.models.BerryFirmness]\n        The berry firmness if it exists in the cache, else None.\n\n    Raises\n    ------\n    pokelance.exceptions.ResourceNotFound\n        The name or id of the berry firmness is invalid.\n\n    Examples\n    --------\n\n    &gt;&gt;&gt; from pokelance import PokeLance\n    &gt;&gt;&gt; client = PokeLance()\n    &gt;&gt;&gt; berry_firmness = client.berry.get_berry_firmness(\"very-soft\")  # None if not cached\n    &gt;&gt;&gt; berry_firmness.name\n    'very-soft'\n    \"\"\"\n    route = Endpoint.get_berry_firmness(name)\n    self._validate_resource(self.cache.berry_firmness, name, route)\n    return self.cache.berry_firmness.get(route, None)\n</code></pre>"},{"location":"api_reference/ext/berry/#pokelance.ext.berry.Berry.get_berry_flavor","title":"<code>get_berry_flavor(name)</code>","text":"<p>Gets a berry flavor from the cache.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Union[str, int]</code> <p>The name or id of the berry flavor.</p> required <p>Returns:</p> Type Description <code>Optional[BerryFlavor]</code> <p>The berry flavor if it exists in the cache, else None.</p> <p>Raises:</p> Type Description <code>ResourceNotFound</code> <p>The name or id of the berry flavor is invalid.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from pokelance import PokeLance\n&gt;&gt;&gt; client = PokeLance()\n&gt;&gt;&gt; berry_flavor = client.berry.get_berry_flavor(\"spicy\")  # None if not cached\n&gt;&gt;&gt; berry_flavor.name\n'spicy'\n</code></pre> Source code in <code>pokelance/ext/berry.py</code> Python<pre><code>def get_berry_flavor(self, name: t.Union[str, int]) -&gt; t.Optional[BerryFlavor]:\n    \"\"\"Gets a berry flavor from the cache.\n\n    Parameters\n    ----------\n    name: typing.Union[str, int]\n        The name or id of the berry flavor.\n\n    Returns\n    -------\n    typing.Optional[pokelance.models.BerryFlavor]\n        The berry flavor if it exists in the cache, else None.\n\n    Raises\n    ------\n    pokelance.exceptions.ResourceNotFound\n        The name or id of the berry flavor is invalid.\n\n    Examples\n    --------\n\n    &gt;&gt;&gt; from pokelance import PokeLance\n    &gt;&gt;&gt; client = PokeLance()\n    &gt;&gt;&gt; berry_flavor = client.berry.get_berry_flavor(\"spicy\")  # None if not cached\n    &gt;&gt;&gt; berry_flavor.name\n    'spicy'\n    \"\"\"\n    route = Endpoint.get_berry_flavor(name)\n    self._validate_resource(self.cache.berry_flavor, name, route)\n    return self.cache.berry_flavor.get(route, None)\n</code></pre>"},{"location":"api_reference/ext/berry/#pokelance.ext.berry.Berry.setup","title":"<code>setup()</code>  <code>async</code>","text":"<p>Sets up the extension.</p> Source code in <code>pokelance/ext/_base.py</code> Python<pre><code>async def setup(self) -&gt; None:\n    \"\"\"Sets up the extension.\"\"\"\n    for item in dir(self):\n        if item.startswith(\"fetch_\"):\n            data = await self._client.request(\n                t.cast(t.Callable[[], \"Route\"], getattr(Endpoint, f\"get_{item[6:]}_endpoints\"))()\n            )\n            self._cache.load_documents(str(self.__class__.__name__), item[6:], data[\"results\"])\n</code></pre>"},{"location":"api_reference/ext/berry/#pokelance.ext.berry.setup","title":"<code>setup(lance)</code>","text":"<p>Sets up the berry cog.</p> Source code in <code>pokelance/ext/berry.py</code> Python<pre><code>def setup(lance: \"PokeLance\") -&gt; None:\n    \"\"\"Sets up the berry cog.\"\"\"\n    lance.add_extension(\"berry\", Berry(lance.http))\n</code></pre>"},{"location":"api_reference/ext/contest/","title":"contest","text":""},{"location":"api_reference/ext/contest/#pokelance.ext.contest","title":"<code>pokelance.ext.contest</code>","text":""},{"location":"api_reference/ext/contest/#pokelance.ext.contest.Contest","title":"<code>Contest(client)</code>","text":"<p>               Bases: <code>BaseExtension</code></p> <p>Extension for contest related endpoints.</p> <p>Attributes:</p> Name Type Description <code>cache</code> <code>Contest</code> <p>The cache for this extension.</p> <p>Initializes the extension.</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>HttpClient</code> <p>The client to use for requests.</p> required Source code in <code>pokelance/ext/_base.py</code> Python<pre><code>def __init__(self, client: \"HttpClient\") -&gt; None:\n    \"\"\"Initializes the extension.\n\n    Parameters\n    ----------\n    client: pokelance.http.HttpClient\n        The client to use for requests.\n    \"\"\"\n    self._client = client\n    self._cache = self._client.cache\n    self.cache = getattr(self._cache, self.__class__.__name__.lower())\n</code></pre>"},{"location":"api_reference/ext/contest/#pokelance.ext.contest.Contest.fetch_contest_effect","title":"<code>fetch_contest_effect(id_)</code>  <code>async</code>","text":"<p>Fetches a contest effect from the API.</p> <p>Parameters:</p> Name Type Description Default <code>id_</code> <code>int</code> <p>The name or id of the contest effect.</p> required <p>Returns:</p> Type Description <code>ContestEffect</code> <p>The contest effect if it exists in the API, else None.</p> <p>Raises:</p> Type Description <code>ResourceNotFound</code> <p>The name or id of the contest effect is invalid.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from pokelance import PokeLance\n&gt;&gt;&gt; import asyncio\n&gt;&gt;&gt; client = PokeLance()\n&gt;&gt;&gt; async def main() -&gt; None:\n...     effect = await client.contest.fetch_contest_effect(1)\n...     print(effect.appeal)\n...     await client.close()\n&gt;&gt;&gt; asyncio.run(main())\n4\n</code></pre> Source code in <code>pokelance/ext/contest.py</code> Python<pre><code>async def fetch_contest_effect(self, id_: int) -&gt; ContestEffect:\n    \"\"\"Fetches a contest effect from the API.\n\n    Parameters\n    ----------\n    id_: int\n        The name or id of the contest effect.\n\n    Returns\n    -------\n    ContestEffect\n        The contest effect if it exists in the API, else None.\n\n    Raises\n    ------\n    pokelance.exceptions.ResourceNotFound\n        The name or id of the contest effect is invalid.\n\n    Examples\n    --------\n\n    &gt;&gt;&gt; from pokelance import PokeLance\n    &gt;&gt;&gt; import asyncio\n    &gt;&gt;&gt; client = PokeLance()\n    &gt;&gt;&gt; async def main() -&gt; None:\n    ...     effect = await client.contest.fetch_contest_effect(1)\n    ...     print(effect.appeal)\n    ...     await client.close()\n    &gt;&gt;&gt; asyncio.run(main())\n    4\n    \"\"\"\n    route = Endpoint.get_contest_effect(id_)\n    self._validate_resource(self.cache.contest_effect, id_, route)\n    data = await self._client.request(route)\n    return self.cache.contest_effect.setdefault(route, ContestEffect.from_payload(data))\n</code></pre>"},{"location":"api_reference/ext/contest/#pokelance.ext.contest.Contest.fetch_contest_type","title":"<code>fetch_contest_type(name)</code>  <code>async</code>","text":"<p>Fetches a contest type from the API.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Union[str, int]</code> <p>The name or id of the contest type.</p> required <p>Returns:</p> Type Description <code>ContestType</code> <p>The contest type if it exists in the API, else None.</p> <p>Raises:</p> Type Description <code>ResourceNotFound</code> <p>The name or id of the contest type is invalid.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from pokelance import PokeLance\n&gt;&gt;&gt; import asyncio\n&gt;&gt;&gt; client = PokeLance()\n&gt;&gt;&gt; async def main() -&gt; None:\n...     type_ = await client.contest.fetch_contest_type(\"cool\")\n...     print(type_.name)\n...     await client.close()\n&gt;&gt;&gt; asyncio.run(main())\ncool\n</code></pre> Source code in <code>pokelance/ext/contest.py</code> Python<pre><code>async def fetch_contest_type(self, name: t.Union[str, int]) -&gt; ContestType:\n    \"\"\"Fetches a contest type from the API.\n\n    Parameters\n    ----------\n    name: typing.Union[str, int]\n        The name or id of the contest type.\n\n    Returns\n    -------\n    ContestType\n        The contest type if it exists in the API, else None.\n\n    Raises\n    ------\n    pokelance.exceptions.ResourceNotFound\n        The name or id of the contest type is invalid.\n\n    Examples\n    --------\n\n    &gt;&gt;&gt; from pokelance import PokeLance\n    &gt;&gt;&gt; import asyncio\n    &gt;&gt;&gt; client = PokeLance()\n    &gt;&gt;&gt; async def main() -&gt; None:\n    ...     type_ = await client.contest.fetch_contest_type(\"cool\")\n    ...     print(type_.name)\n    ...     await client.close()\n    &gt;&gt;&gt; asyncio.run(main())\n    cool\n    \"\"\"\n    route = Endpoint.get_contest_type(name)\n    self._validate_resource(self.cache.contest_type, name, route)\n    data = await self._client.request(route)\n    return self.cache.contest_type.setdefault(route, ContestType.from_payload(data))\n</code></pre>"},{"location":"api_reference/ext/contest/#pokelance.ext.contest.Contest.fetch_super_contest_effect","title":"<code>fetch_super_contest_effect(id_)</code>  <code>async</code>","text":"<p>Fetches a super contest effect from the API.</p> <p>Parameters:</p> Name Type Description Default <code>id_</code> <code>int</code> <p>The name or id of the super contest effect.</p> required <p>Returns:</p> Type Description <code>SuperContestEffect</code> <p>The super contest effect if it exists in the API, else None.</p> <p>Raises:</p> Type Description <code>ResourceNotFound</code> <p>The name or id of the super contest effect is invalid.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from pokelance import PokeLance\n&gt;&gt;&gt; import asyncio\n&gt;&gt;&gt; client = PokeLance()\n&gt;&gt;&gt; async def main() -&gt; None:\n...     effect = await client.contest.fetch_super_contest_effect(1)\n...     print(effect.appeal)\n...     await client.close()\n&gt;&gt;&gt; asyncio.run(main())\n2\n</code></pre> Source code in <code>pokelance/ext/contest.py</code> Python<pre><code>async def fetch_super_contest_effect(self, id_: int) -&gt; SuperContestEffect:\n    \"\"\"Fetches a super contest effect from the API.\n\n    Parameters\n    ----------\n    id_: int\n        The name or id of the super contest effect.\n\n    Returns\n    -------\n    SuperContestEffect\n        The super contest effect if it exists in the API, else None.\n\n    Raises\n    ------\n    pokelance.exceptions.ResourceNotFound\n        The name or id of the super contest effect is invalid.\n\n    Examples\n    --------\n\n    &gt;&gt;&gt; from pokelance import PokeLance\n    &gt;&gt;&gt; import asyncio\n    &gt;&gt;&gt; client = PokeLance()\n    &gt;&gt;&gt; async def main() -&gt; None:\n    ...     effect = await client.contest.fetch_super_contest_effect(1)\n    ...     print(effect.appeal)\n    ...     await client.close()\n    &gt;&gt;&gt; asyncio.run(main())\n    2\n    \"\"\"\n    route = Endpoint.get_super_contest_effect(id_)\n    self._validate_resource(self.cache.super_contest_effect, id_, route)\n    data = await self._client.request(route)\n    return self.cache.super_contest_effect.setdefault(route, SuperContestEffect.from_payload(data))\n</code></pre>"},{"location":"api_reference/ext/contest/#pokelance.ext.contest.Contest.get_contest_effect","title":"<code>get_contest_effect(id_)</code>","text":"<p>Gets a contest effect from the cache.</p> <p>Parameters:</p> Name Type Description Default <code>id_</code> <code>int</code> <p>The name or id of the contest effect.</p> required <p>Returns:</p> Type Description <code>Optional[ContestEffect]</code> <p>The contest effect if it exists in the cache, else None.</p> <p>Raises:</p> Type Description <code>ResourceNotFound</code> <p>The name or id of the contest effect is invalid.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from pokelance import PokeLance\n&gt;&gt;&gt; client = PokeLance()\n&gt;&gt;&gt; effect = client.contest.get_contest_effect(1)  # None if not cached\n&gt;&gt;&gt; effect.appeal\n4\n</code></pre> Source code in <code>pokelance/ext/contest.py</code> Python<pre><code>def get_contest_effect(self, id_: int) -&gt; t.Optional[ContestEffect]:\n    \"\"\"Gets a contest effect from the cache.\n\n    Parameters\n    ----------\n    id_: int\n        The name or id of the contest effect.\n\n    Returns\n    -------\n    typing.Optional[pokelance.models.ContestEffect]\n        The contest effect if it exists in the cache, else None.\n\n    Raises\n    ------\n    pokelance.exceptions.ResourceNotFound\n        The name or id of the contest effect is invalid.\n\n    Examples\n    --------\n\n    &gt;&gt;&gt; from pokelance import PokeLance\n    &gt;&gt;&gt; client = PokeLance()\n    &gt;&gt;&gt; effect = client.contest.get_contest_effect(1)  # None if not cached\n    &gt;&gt;&gt; effect.appeal\n    4\n    \"\"\"\n    route = Endpoint.get_contest_effect(id_)\n    self._validate_resource(self.cache.contest_effect, id_, route)\n    return self.cache.contest_effect.get(route, None)\n</code></pre>"},{"location":"api_reference/ext/contest/#pokelance.ext.contest.Contest.get_contest_type","title":"<code>get_contest_type(name)</code>","text":"<p>Gets a contest type from the cache.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Union[str, int]</code> <p>The name or id of the contest type.</p> required <p>Returns:</p> Type Description <code>Optional[ContestType]</code> <p>The contest type if it exists in the cache, else None.</p> <p>Raises:</p> Type Description <code>ResourceNotFound</code> <p>The name or id of the contest type is invalid.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from pokelance import PokeLance\n&gt;&gt;&gt; client = PokeLance()\n&gt;&gt;&gt; type_ = client.contest.get_contest_type(\"cool\")  # None if not cached\n&gt;&gt;&gt; type_.name\n'cool'\n</code></pre> Source code in <code>pokelance/ext/contest.py</code> Python<pre><code>def get_contest_type(self, name: t.Union[str, int]) -&gt; t.Optional[ContestType]:\n    \"\"\"Gets a contest type from the cache.\n\n    Parameters\n    ----------\n    name: typing.Union[str, int]\n        The name or id of the contest type.\n\n    Returns\n    -------\n    typing.Optional[pokelance.models.ContestType]\n        The contest type if it exists in the cache, else None.\n\n    Raises\n    ------\n    pokelance.exceptions.ResourceNotFound\n        The name or id of the contest type is invalid.\n\n    Examples\n    --------\n\n    &gt;&gt;&gt; from pokelance import PokeLance\n    &gt;&gt;&gt; client = PokeLance()\n    &gt;&gt;&gt; type_ = client.contest.get_contest_type(\"cool\")  # None if not cached\n    &gt;&gt;&gt; type_.name\n    'cool'\n    \"\"\"\n    route = Endpoint.get_contest_type(name)\n    self._validate_resource(self.cache.contest_type, name, route)\n    return self.cache.contest_type.get(route, None)\n</code></pre>"},{"location":"api_reference/ext/contest/#pokelance.ext.contest.Contest.get_super_contest_effect","title":"<code>get_super_contest_effect(id_)</code>","text":"<p>Gets a super contest effect from the cache.</p> <p>Parameters:</p> Name Type Description Default <code>id_</code> <code>int</code> <p>The name or id of the super contest effect.</p> required <p>Returns:</p> Type Description <code>Optional[SuperContestEffect]</code> <p>The super contest effect if it exists in the cache, else None.</p> <p>Raises:</p> Type Description <code>ResourceNotFound</code> <p>The name or id of the super contest effect is invalid.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from pokelance import PokeLance\n&gt;&gt;&gt; client = PokeLance()\n&gt;&gt;&gt; effect = client.contest.get_super_contest_effect(1)\n&gt;&gt;&gt; effect.appeal\n2\n</code></pre> Source code in <code>pokelance/ext/contest.py</code> Python<pre><code>def get_super_contest_effect(self, id_: int) -&gt; t.Optional[SuperContestEffect]:\n    \"\"\"Gets a super contest effect from the cache.\n\n    Parameters\n    ----------\n    id_: int\n        The name or id of the super contest effect.\n\n    Returns\n    -------\n    typing.Optional[pokelance.models.SuperContestEffect]\n        The super contest effect if it exists in the cache, else None.\n\n    Raises\n    ------\n    pokelance.exceptions.ResourceNotFound\n        The name or id of the super contest effect is invalid.\n\n    Examples\n    --------\n\n    &gt;&gt;&gt; from pokelance import PokeLance\n    &gt;&gt;&gt; client = PokeLance()\n    &gt;&gt;&gt; effect = client.contest.get_super_contest_effect(1)\n    &gt;&gt;&gt; effect.appeal\n    2\n    \"\"\"\n    route = Endpoint.get_super_contest_effect(id_)\n    self._validate_resource(self.cache.super_contest_effect, id_, route)\n    return self.cache.super_contest_effect.get(route, None)\n</code></pre>"},{"location":"api_reference/ext/contest/#pokelance.ext.contest.Contest.setup","title":"<code>setup()</code>  <code>async</code>","text":"<p>Sets up the extension.</p> Source code in <code>pokelance/ext/_base.py</code> Python<pre><code>async def setup(self) -&gt; None:\n    \"\"\"Sets up the extension.\"\"\"\n    for item in dir(self):\n        if item.startswith(\"fetch_\"):\n            data = await self._client.request(\n                t.cast(t.Callable[[], \"Route\"], getattr(Endpoint, f\"get_{item[6:]}_endpoints\"))()\n            )\n            self._cache.load_documents(str(self.__class__.__name__), item[6:], data[\"results\"])\n</code></pre>"},{"location":"api_reference/ext/contest/#pokelance.ext.contest.setup","title":"<code>setup(lance)</code>","text":"<p>Sets up the contest cog.</p> Source code in <code>pokelance/ext/contest.py</code> Python<pre><code>def setup(lance: \"PokeLance\") -&gt; None:\n    \"\"\"Sets up the contest cog.\"\"\"\n    lance.add_extension(\"contest\", Contest(lance.http))\n</code></pre>"},{"location":"api_reference/ext/encounter/","title":"encounter","text":""},{"location":"api_reference/ext/encounter/#pokelance.ext.encounter","title":"<code>pokelance.ext.encounter</code>","text":""},{"location":"api_reference/ext/encounter/#pokelance.ext.encounter.Encounter","title":"<code>Encounter(client)</code>","text":"<p>               Bases: <code>BaseExtension</code></p> <p>Extension for encounter related endpoints.</p> <p>Attributes:</p> Name Type Description <code>cache</code> <code>Encounter</code> <p>The cache for this extension.</p> <p>Initializes the extension.</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>HttpClient</code> <p>The client to use for requests.</p> required Source code in <code>pokelance/ext/_base.py</code> Python<pre><code>def __init__(self, client: \"HttpClient\") -&gt; None:\n    \"\"\"Initializes the extension.\n\n    Parameters\n    ----------\n    client: pokelance.http.HttpClient\n        The client to use for requests.\n    \"\"\"\n    self._client = client\n    self._cache = self._client.cache\n    self.cache = getattr(self._cache, self.__class__.__name__.lower())\n</code></pre>"},{"location":"api_reference/ext/encounter/#pokelance.ext.encounter.Encounter.fetch_encounter_condition","title":"<code>fetch_encounter_condition(name)</code>  <code>async</code>","text":"<p>Fetches an encounter condition from the API.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Union[str, int]</code> <p>The name or id of the encounter condition.</p> required <p>Returns:</p> Type Description <code>EncounterCondition</code> <p>The encounter condition if it exists in the API, else raises ResourceNotFound.</p> <p>Raises:</p> Type Description <code>ResourceNotFound</code> <p>The name or id of the encounter condition is invalid.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from pokelance import PokeLance\n&gt;&gt;&gt; import asyncio\n&gt;&gt;&gt; client = PokeLance()\n&gt;&gt;&gt; async def main() -&gt; None:\n...     condition = await client.encounter.fetch_encounter_condition(\"swarm\")\n...     print(condition.name)\n...     await client.close()\n&gt;&gt;&gt; asyncio.run(main())\nswarm\n</code></pre> Source code in <code>pokelance/ext/encounter.py</code> Python<pre><code>async def fetch_encounter_condition(self, name: t.Union[str, int]) -&gt; EncounterCondition:\n    \"\"\"Fetches an encounter condition from the API.\n\n    Parameters\n    ----------\n    name: typing.Union[str, int]\n        The name or id of the encounter condition.\n\n    Returns\n    -------\n    EncounterCondition\n        The encounter condition if it exists in the API, else raises ResourceNotFound.\n\n    Raises\n    ------\n    pokelance.exceptions.ResourceNotFound\n        The name or id of the encounter condition is invalid.\n\n    Examples\n    --------\n\n    &gt;&gt;&gt; from pokelance import PokeLance\n    &gt;&gt;&gt; import asyncio\n    &gt;&gt;&gt; client = PokeLance()\n    &gt;&gt;&gt; async def main() -&gt; None:\n    ...     condition = await client.encounter.fetch_encounter_condition(\"swarm\")\n    ...     print(condition.name)\n    ...     await client.close()\n    &gt;&gt;&gt; asyncio.run(main())\n    swarm\n    \"\"\"\n    route = Endpoint.get_encounter_condition(name)\n    self._validate_resource(self.cache.encounter_condition, name, route)\n    data = await self._client.request(route)\n    return self.cache.encounter_condition.setdefault(route, EncounterCondition.from_payload(data))\n</code></pre>"},{"location":"api_reference/ext/encounter/#pokelance.ext.encounter.Encounter.fetch_encounter_condition_value","title":"<code>fetch_encounter_condition_value(name)</code>  <code>async</code>","text":"<p>Fetches an encounter condition value from the API.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Union[str, int]</code> <p>The name or id of the encounter condition value.</p> required <p>Returns:</p> Type Description <code>EncounterConditionValue</code> <p>The encounter condition value if it exists in the API, else raises ResourceNotFound.</p> <p>Raises:</p> Type Description <code>ResourceNotFound</code> <p>The name or id of the encounter condition value is invalid.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from pokelance import PokeLance\n&gt;&gt;&gt; import asyncio\n&gt;&gt;&gt; client = PokeLance()\n&gt;&gt;&gt; async def main() -&gt; None:\n...     condition = await client.encounter.fetch_encounter_condition_value(\"swarm-yes\")\n...     print(condition.name)\n...     await client.close()\n&gt;&gt;&gt; asyncio.run(main())\nswarm-yes\n</code></pre> Source code in <code>pokelance/ext/encounter.py</code> Python<pre><code>async def fetch_encounter_condition_value(self, name: t.Union[str, int]) -&gt; EncounterConditionValue:\n    \"\"\"Fetches an encounter condition value from the API.\n\n    Parameters\n    ----------\n    name: typing.Union[str, int]\n        The name or id of the encounter condition value.\n\n    Returns\n    -------\n    EncounterConditionValue\n        The encounter condition value if it exists in the API, else raises ResourceNotFound.\n\n    Raises\n    ------\n    pokelance.exceptions.ResourceNotFound\n        The name or id of the encounter condition value is invalid.\n\n    Examples\n    --------\n\n    &gt;&gt;&gt; from pokelance import PokeLance\n    &gt;&gt;&gt; import asyncio\n    &gt;&gt;&gt; client = PokeLance()\n    &gt;&gt;&gt; async def main() -&gt; None:\n    ...     condition = await client.encounter.fetch_encounter_condition_value(\"swarm-yes\")\n    ...     print(condition.name)\n    ...     await client.close()\n    &gt;&gt;&gt; asyncio.run(main())\n    swarm-yes\n    \"\"\"\n    route = Endpoint.get_encounter_condition_value(name)\n    self._validate_resource(self.cache.encounter_condition_value, name, route)\n    data = await self._client.request(route)\n    return self.cache.encounter_condition_value.setdefault(route, EncounterConditionValue.from_payload(data))\n</code></pre>"},{"location":"api_reference/ext/encounter/#pokelance.ext.encounter.Encounter.fetch_encounter_method","title":"<code>fetch_encounter_method(name)</code>  <code>async</code>","text":"<p>Fetches an encounter method from the API.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Union[str, int]</code> <p>The name or id of the encounter method.</p> required <p>Returns:</p> Type Description <code>EncounterMethod</code> <p>The encounter method if it exists in the API, else raises ResourceNotFound.</p> <p>Raises:</p> Type Description <code>ResourceNotFound</code> <p>The name or id of the encounter method is invalid.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from pokelance import PokeLance\n&gt;&gt;&gt; import asyncio\n&gt;&gt;&gt; client = PokeLance()\n&gt;&gt;&gt; async def main() -&gt; None:\n...     method = await client.encounter.fetch_encounter_method(\"walk\")\n...     print(method.name)\n...     await client.close()\n&gt;&gt;&gt; asyncio.run(main())\nwalk\n</code></pre> Source code in <code>pokelance/ext/encounter.py</code> Python<pre><code>async def fetch_encounter_method(self, name: t.Union[str, int]) -&gt; EncounterMethod:\n    \"\"\"Fetches an encounter method from the API.\n\n    Parameters\n    ----------\n    name: typing.Union[str, int]\n        The name or id of the encounter method.\n\n    Returns\n    -------\n    EncounterMethod\n        The encounter method if it exists in the API, else raises ResourceNotFound.\n\n    Raises\n    ------\n    pokelance.exceptions.ResourceNotFound\n        The name or id of the encounter method is invalid.\n\n    Examples\n    --------\n\n    &gt;&gt;&gt; from pokelance import PokeLance\n    &gt;&gt;&gt; import asyncio\n    &gt;&gt;&gt; client = PokeLance()\n    &gt;&gt;&gt; async def main() -&gt; None:\n    ...     method = await client.encounter.fetch_encounter_method(\"walk\")\n    ...     print(method.name)\n    ...     await client.close()\n    &gt;&gt;&gt; asyncio.run(main())\n    walk\n    \"\"\"\n    route = Endpoint.get_encounter_method(name)\n    self._validate_resource(self.cache.encounter_method, name, route)\n    data = await self._client.request(route)\n    return self.cache.encounter_method.setdefault(route, EncounterMethod.from_payload(data))\n</code></pre>"},{"location":"api_reference/ext/encounter/#pokelance.ext.encounter.Encounter.get_encounter_condition","title":"<code>get_encounter_condition(name)</code>","text":"<p>Gets an encounter condition from the cache.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Union[str, int]</code> <p>The name or id of the encounter condition.</p> required <p>Returns:</p> Type Description <code>Optional[EncounterCondition]</code> <p>The encounter condition if it exists in the cache, else None.</p> <p>Raises:</p> Type Description <code>ResourceNotFound</code> <p>The name or id of the encounter condition is invalid.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from pokelance import PokeLance\n&gt;&gt;&gt; client = PokeLance()\n&gt;&gt;&gt; condition = client.encounter.get_encounter_condition(\"swarm\")\n&gt;&gt;&gt; condition.name\n'swarm'\n</code></pre> Source code in <code>pokelance/ext/encounter.py</code> Python<pre><code>def get_encounter_condition(self, name: t.Union[str, int]) -&gt; t.Optional[EncounterCondition]:\n    \"\"\"Gets an encounter condition from the cache.\n\n    Parameters\n    ----------\n    name: typing.Union[str, int]\n        The name or id of the encounter condition.\n\n    Returns\n    -------\n    typing.Optional[pokelance.models.EncounterCondition]\n        The encounter condition if it exists in the cache, else None.\n\n    Raises\n    ------\n    pokelance.exceptions.ResourceNotFound\n        The name or id of the encounter condition is invalid.\n\n    Examples\n    --------\n\n    &gt;&gt;&gt; from pokelance import PokeLance\n    &gt;&gt;&gt; client = PokeLance()\n    &gt;&gt;&gt; condition = client.encounter.get_encounter_condition(\"swarm\")\n    &gt;&gt;&gt; condition.name\n    'swarm'\n    \"\"\"\n    route = Endpoint.get_encounter_condition(name)\n    self._validate_resource(self.cache.encounter_condition, name, route)\n    return self.cache.encounter_condition.get(route, None)\n</code></pre>"},{"location":"api_reference/ext/encounter/#pokelance.ext.encounter.Encounter.get_encounter_condition_value","title":"<code>get_encounter_condition_value(name)</code>","text":"<p>Gets an encounter condition value from the cache.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Union[str, int]</code> <p>The name or id of the encounter condition value.</p> required <p>Returns:</p> Type Description <code>Optional[EncounterConditionValue]</code> <p>The encounter condition value if it exists in the cache, else None.</p> <p>Raises:</p> Type Description <code>ResourceNotFound</code> <p>The name or id of the encounter condition value is invalid.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from pokelance import PokeLance\n&gt;&gt;&gt; client = PokeLance()\n&gt;&gt;&gt; condition = client.encounter.get_encounter_condition_value(\"swarm-yes\")\n&gt;&gt;&gt; condition.name\n'swarm-yes'\n</code></pre> Source code in <code>pokelance/ext/encounter.py</code> Python<pre><code>def get_encounter_condition_value(self, name: t.Union[str, int]) -&gt; t.Optional[EncounterConditionValue]:\n    \"\"\"Gets an encounter condition value from the cache.\n\n    Parameters\n    ----------\n    name: typing.Union[str, int]\n        The name or id of the encounter condition value.\n\n    Returns\n    -------\n    typing.Optional[pokelance.models.EncounterConditionValue]\n        The encounter condition value if it exists in the cache, else None.\n\n    Raises\n    ------\n    pokelance.exceptions.ResourceNotFound\n        The name or id of the encounter condition value is invalid.\n\n    Examples\n    --------\n\n    &gt;&gt;&gt; from pokelance import PokeLance\n    &gt;&gt;&gt; client = PokeLance()\n    &gt;&gt;&gt; condition = client.encounter.get_encounter_condition_value(\"swarm-yes\")\n    &gt;&gt;&gt; condition.name\n    'swarm-yes'\n    \"\"\"\n    route = Endpoint.get_encounter_condition_value(name)\n    self._validate_resource(self.cache.encounter_condition_value, name, route)\n    return self.cache.encounter_condition_value.get(route, None)\n</code></pre>"},{"location":"api_reference/ext/encounter/#pokelance.ext.encounter.Encounter.get_encounter_method","title":"<code>get_encounter_method(name)</code>","text":"<p>Gets an encounter method from the cache.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Union[str, int]</code> <p>The name or id of the encounter method.</p> required <p>Returns:</p> Type Description <code>Optional[EncounterMethod]</code> <p>The encounter method if it exists in the cache, else None.</p> <p>Raises:</p> Type Description <code>ResourceNotFound</code> <p>The name or id of the encounter method is invalid.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from pokelance import PokeLance\n&gt;&gt;&gt; client = PokeLance()\n&gt;&gt;&gt; method = client.encounter.get_encounter_method(\"walk\")\n&gt;&gt;&gt; method.name\n'walk'\n</code></pre> Source code in <code>pokelance/ext/encounter.py</code> Python<pre><code>def get_encounter_method(self, name: t.Union[str, int]) -&gt; t.Optional[EncounterMethod]:\n    \"\"\"Gets an encounter method from the cache.\n\n    Parameters\n    ----------\n    name: typing.Union[str, int]\n        The name or id of the encounter method.\n\n    Returns\n    -------\n    typing.Optional[pokelance.models.EncounterMethod]\n        The encounter method if it exists in the cache, else None.\n\n    Raises\n    ------\n    pokelance.exceptions.ResourceNotFound\n        The name or id of the encounter method is invalid.\n\n    Examples\n    --------\n\n    &gt;&gt;&gt; from pokelance import PokeLance\n    &gt;&gt;&gt; client = PokeLance()\n    &gt;&gt;&gt; method = client.encounter.get_encounter_method(\"walk\")\n    &gt;&gt;&gt; method.name\n    'walk'\n    \"\"\"\n    route = Endpoint.get_encounter_method(name)\n    self._validate_resource(self.cache.encounter_method, name, route)\n    return self.cache.encounter_method.get(route, None)\n</code></pre>"},{"location":"api_reference/ext/encounter/#pokelance.ext.encounter.Encounter.setup","title":"<code>setup()</code>  <code>async</code>","text":"<p>Sets up the extension.</p> Source code in <code>pokelance/ext/_base.py</code> Python<pre><code>async def setup(self) -&gt; None:\n    \"\"\"Sets up the extension.\"\"\"\n    for item in dir(self):\n        if item.startswith(\"fetch_\"):\n            data = await self._client.request(\n                t.cast(t.Callable[[], \"Route\"], getattr(Endpoint, f\"get_{item[6:]}_endpoints\"))()\n            )\n            self._cache.load_documents(str(self.__class__.__name__), item[6:], data[\"results\"])\n</code></pre>"},{"location":"api_reference/ext/encounter/#pokelance.ext.encounter.setup","title":"<code>setup(lance)</code>","text":"<p>Sets up the encounter cog.</p> Source code in <code>pokelance/ext/encounter.py</code> Python<pre><code>def setup(lance: \"PokeLance\") -&gt; None:\n    \"\"\"Sets up the encounter cog.\"\"\"\n    lance.add_extension(\"encounter\", Encounter(lance.http))\n</code></pre>"},{"location":"api_reference/ext/evolution/","title":"evolution","text":""},{"location":"api_reference/ext/evolution/#pokelance.ext.evolution","title":"<code>pokelance.ext.evolution</code>","text":""},{"location":"api_reference/ext/evolution/#pokelance.ext.evolution.Evolution","title":"<code>Evolution(client)</code>","text":"<p>               Bases: <code>BaseExtension</code></p> <p>Extension for evolution related endpoints.</p> <p>Attributes:</p> Name Type Description <code>cache</code> <code>Evolution</code> <p>The cache for this extension.</p> <p>Initializes the extension.</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>HttpClient</code> <p>The client to use for requests.</p> required Source code in <code>pokelance/ext/_base.py</code> Python<pre><code>def __init__(self, client: \"HttpClient\") -&gt; None:\n    \"\"\"Initializes the extension.\n\n    Parameters\n    ----------\n    client: pokelance.http.HttpClient\n        The client to use for requests.\n    \"\"\"\n    self._client = client\n    self._cache = self._client.cache\n    self.cache = getattr(self._cache, self.__class__.__name__.lower())\n</code></pre>"},{"location":"api_reference/ext/evolution/#pokelance.ext.evolution.Evolution.fetch_evolution_chain","title":"<code>fetch_evolution_chain(id_)</code>  <code>async</code>","text":"<p>Fetches an evolution chain from the API.</p> <p>Parameters:</p> Name Type Description Default <code>id_</code> <code>int</code> <p>The name or id of the encounter method.</p> required <p>Returns:</p> Type Description <code>EvolutionChain</code> <p>The evolution chain if it exists in the cache, else raises ResourceNotFound.</p> <p>Raises:</p> Type Description <code>ResourceNotFound</code> <p>The name or id of the evolution chain is invalid.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from pokelance import PokeLance\n&gt;&gt;&gt; import asyncio\n&gt;&gt;&gt; client = PokeLance()\n&gt;&gt;&gt; async def main() -&gt; None:\n...     chain = await client.evolution.fetch_evolution_chain(1)\n...     print(chain.id)\n...     await client.close()\n&gt;&gt;&gt; asyncio.run(main())\n1\n</code></pre> Source code in <code>pokelance/ext/evolution.py</code> Python<pre><code>async def fetch_evolution_chain(self, id_: int) -&gt; EvolutionChain:\n    \"\"\"Fetches an evolution chain from the API.\n\n    Parameters\n    ----------\n    id_: int\n        The name or id of the encounter method.\n\n    Returns\n    -------\n    EvolutionChain\n        The evolution chain if it exists in the cache, else raises ResourceNotFound.\n\n    Raises\n    ------\n    pokelance.exceptions.ResourceNotFound\n        The name or id of the evolution chain is invalid.\n\n    Examples\n    --------\n\n    &gt;&gt;&gt; from pokelance import PokeLance\n    &gt;&gt;&gt; import asyncio\n    &gt;&gt;&gt; client = PokeLance()\n    &gt;&gt;&gt; async def main() -&gt; None:\n    ...     chain = await client.evolution.fetch_evolution_chain(1)\n    ...     print(chain.id)\n    ...     await client.close()\n    &gt;&gt;&gt; asyncio.run(main())\n    1\n    \"\"\"\n    route = Endpoint.get_evolution_chain(id_)\n    self._validate_resource(self.cache.evolution_chain, id_, route)\n    data = await self._client.request(route)\n    return self.cache.evolution_chain.setdefault(route, EvolutionChain.from_payload(data))\n</code></pre>"},{"location":"api_reference/ext/evolution/#pokelance.ext.evolution.Evolution.fetch_evolution_trigger","title":"<code>fetch_evolution_trigger(name)</code>  <code>async</code>","text":"<p>Fetches an evolution trigger from the API.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Union[str, int]</code> <p>The name or id of the encounter method.</p> required <p>Returns:</p> Type Description <code>EvolutionTrigger</code> <p>The evolution trigger if it exists in the API, else raises ResourceNotFound.</p> <p>Raises:</p> Type Description <code>ResourceNotFound</code> <p>The name or id of the evolution trigger is invalid.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from pokelance import PokeLance\n&gt;&gt;&gt; import asyncio\n&gt;&gt;&gt; client = PokeLance()\n&gt;&gt;&gt; async def main() -&gt; None:\n...     trigger = await client.evolution.fetch_evolution_trigger(1)\n...     print(trigger.name)\n...     await client.close()\n&gt;&gt;&gt; asyncio.run(main())\nlevel-up\n</code></pre> Source code in <code>pokelance/ext/evolution.py</code> Python<pre><code>async def fetch_evolution_trigger(self, name: t.Union[str, int]) -&gt; EvolutionTrigger:\n    \"\"\"Fetches an evolution trigger from the API.\n\n    Parameters\n    ----------\n    name: typing.Union[str, int]\n        The name or id of the encounter method.\n\n    Returns\n    -------\n    EvolutionTrigger\n        The evolution trigger if it exists in the API, else raises ResourceNotFound.\n\n    Raises\n    ------\n    pokelance.exceptions.ResourceNotFound\n        The name or id of the evolution trigger is invalid.\n\n    Examples\n    --------\n\n    &gt;&gt;&gt; from pokelance import PokeLance\n    &gt;&gt;&gt; import asyncio\n    &gt;&gt;&gt; client = PokeLance()\n    &gt;&gt;&gt; async def main() -&gt; None:\n    ...     trigger = await client.evolution.fetch_evolution_trigger(1)\n    ...     print(trigger.name)\n    ...     await client.close()\n    &gt;&gt;&gt; asyncio.run(main())\n    level-up\n    \"\"\"\n    route = Endpoint.get_evolution_trigger(name)\n    self._validate_resource(self.cache.evolution_trigger, name, route)\n    data = await self._client.request(route)\n    return self.cache.evolution_trigger.setdefault(route, EvolutionTrigger.from_payload(data))\n</code></pre>"},{"location":"api_reference/ext/evolution/#pokelance.ext.evolution.Evolution.get_evolution_chain","title":"<code>get_evolution_chain(id_)</code>","text":"<p>Gets an evolution chain from the cache.</p> <p>Parameters:</p> Name Type Description Default <code>id_</code> <code>int</code> <p>The name or id of the encounter method.</p> required <p>Returns:</p> Type Description <code>Optional[EvolutionChain]</code> <p>The evolution chain if it exists in the cache, else None.</p> <p>Raises:</p> Type Description <code>ResourceNotFound</code> <p>The name or id of the evolution chain is invalid.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from pokelance import PokeLance\n&gt;&gt;&gt; client = PokeLance()\n&gt;&gt;&gt; chain = client.evolution.get_evolution_chain(1)\n&gt;&gt;&gt; chain.id\n1\n</code></pre> Source code in <code>pokelance/ext/evolution.py</code> Python<pre><code>def get_evolution_chain(self, id_: int) -&gt; t.Optional[EvolutionChain]:\n    \"\"\"Gets an evolution chain from the cache.\n\n    Parameters\n    ----------\n    id_: int\n        The name or id of the encounter method.\n\n    Returns\n    -------\n    typing.Optional[pokelance.models.EvolutionChain]\n        The evolution chain if it exists in the cache, else None.\n\n    Raises\n    ------\n    pokelance.exceptions.ResourceNotFound\n        The name or id of the evolution chain is invalid.\n\n    Examples\n    --------\n\n    &gt;&gt;&gt; from pokelance import PokeLance\n    &gt;&gt;&gt; client = PokeLance()\n    &gt;&gt;&gt; chain = client.evolution.get_evolution_chain(1)\n    &gt;&gt;&gt; chain.id\n    1\n    \"\"\"\n    route = Endpoint.get_evolution_chain(id_)\n    self._validate_resource(self.cache.evolution_chain, id_, route)\n    return self.cache.evolution_chain.get(route, None)\n</code></pre>"},{"location":"api_reference/ext/evolution/#pokelance.ext.evolution.Evolution.get_evolution_trigger","title":"<code>get_evolution_trigger(name)</code>","text":"<p>Gets an evolution trigger from the cache.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Union[str, int]</code> <p>The name or id of the encounter method.</p> required <p>Returns:</p> Type Description <code>Optional[EvolutionTrigger]</code> <p>The evolution trigger if it exists in the cache, else None.</p> <p>Raises:</p> Type Description <code>ResourceNotFound</code> <p>The name or id of the evolution trigger is invalid.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from pokelance import PokeLance\n&gt;&gt;&gt; client = PokeLance()\n&gt;&gt;&gt; trigger = client.evolution.get_evolution_trigger(1)\n&gt;&gt;&gt; trigger.name\n'level-up'\n</code></pre> Source code in <code>pokelance/ext/evolution.py</code> Python<pre><code>def get_evolution_trigger(self, name: t.Union[str, int]) -&gt; t.Optional[EvolutionTrigger]:\n    \"\"\"Gets an evolution trigger from the cache.\n\n    Parameters\n    ----------\n    name: typing.Union[str, int]\n        The name or id of the encounter method.\n\n    Returns\n    -------\n    typing.Optional[pokelance.models.EvolutionTrigger]\n        The evolution trigger if it exists in the cache, else None.\n\n    Raises\n    ------\n    pokelance.exceptions.ResourceNotFound\n        The name or id of the evolution trigger is invalid.\n\n    Examples\n    --------\n\n    &gt;&gt;&gt; from pokelance import PokeLance\n    &gt;&gt;&gt; client = PokeLance()\n    &gt;&gt;&gt; trigger = client.evolution.get_evolution_trigger(1)\n    &gt;&gt;&gt; trigger.name\n    'level-up'\n    \"\"\"\n    route = Endpoint.get_evolution_trigger(name)\n    self._validate_resource(self.cache.evolution_trigger, name, route)\n    return self.cache.evolution_trigger.get(route, None)\n</code></pre>"},{"location":"api_reference/ext/evolution/#pokelance.ext.evolution.Evolution.setup","title":"<code>setup()</code>  <code>async</code>","text":"<p>Sets up the extension.</p> Source code in <code>pokelance/ext/_base.py</code> Python<pre><code>async def setup(self) -&gt; None:\n    \"\"\"Sets up the extension.\"\"\"\n    for item in dir(self):\n        if item.startswith(\"fetch_\"):\n            data = await self._client.request(\n                t.cast(t.Callable[[], \"Route\"], getattr(Endpoint, f\"get_{item[6:]}_endpoints\"))()\n            )\n            self._cache.load_documents(str(self.__class__.__name__), item[6:], data[\"results\"])\n</code></pre>"},{"location":"api_reference/ext/evolution/#pokelance.ext.evolution.setup","title":"<code>setup(lance)</code>","text":"<p>Sets up the evolution cog.</p> Source code in <code>pokelance/ext/evolution.py</code> Python<pre><code>def setup(lance: \"PokeLance\") -&gt; None:\n    \"\"\"Sets up the evolution cog.\"\"\"\n    lance.add_extension(\"evolution\", Evolution(lance.http))\n</code></pre>"},{"location":"api_reference/ext/game/","title":"game","text":""},{"location":"api_reference/ext/game/#pokelance.ext.game","title":"<code>pokelance.ext.game</code>","text":""},{"location":"api_reference/ext/game/#pokelance.ext.game.Game","title":"<code>Game(client)</code>","text":"<p>               Bases: <code>BaseExtension</code></p> <p>Extension for game related endpoints.</p> <p>Attributes:</p> Name Type Description <code>cache</code> <code>Game</code> <p>The cache to use for caching resources.</p> <p>Initializes the extension.</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>HttpClient</code> <p>The client to use for requests.</p> required Source code in <code>pokelance/ext/_base.py</code> Python<pre><code>def __init__(self, client: \"HttpClient\") -&gt; None:\n    \"\"\"Initializes the extension.\n\n    Parameters\n    ----------\n    client: pokelance.http.HttpClient\n        The client to use for requests.\n    \"\"\"\n    self._client = client\n    self._cache = self._client.cache\n    self.cache = getattr(self._cache, self.__class__.__name__.lower())\n</code></pre>"},{"location":"api_reference/ext/game/#pokelance.ext.game.Game.fetch_generation","title":"<code>fetch_generation(name)</code>  <code>async</code>","text":"<p>Fetches a generation from the API.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Union[str, int]</code> <p>The name or id of the generation.</p> required <p>Returns:</p> Type Description <code>Generation</code> <p>The generation if it exists in the API, else raises ResourceNotFound.</p> <p>Raises:</p> Type Description <code>ResourceNotFound</code> <p>The name or id of the generation is invalid.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from pokelance import PokeLance\n&gt;&gt;&gt; import asyncio\n&gt;&gt;&gt; client = PokeLance()\n&gt;&gt;&gt; async def main() -&gt; None:\n...     generation = await client.game.fetch_generation(1)\n...     print(generation.id)\n...     await client.close()\n&gt;&gt;&gt; asyncio.run(main())\n1\n</code></pre> Source code in <code>pokelance/ext/game.py</code> Python<pre><code>async def fetch_generation(self, name: t.Union[str, int]) -&gt; Generation:\n    \"\"\"Fetches a generation from the API.\n\n    Parameters\n    ----------\n    name: typing.Union[str, int]\n        The name or id of the generation.\n\n    Returns\n    -------\n    pokelance.models.Generation\n        The generation if it exists in the API, else raises ResourceNotFound.\n\n    Raises\n    ------\n    pokelance.exceptions.ResourceNotFound\n        The name or id of the generation is invalid.\n\n    Examples\n    --------\n\n    &gt;&gt;&gt; from pokelance import PokeLance\n    &gt;&gt;&gt; import asyncio\n    &gt;&gt;&gt; client = PokeLance()\n    &gt;&gt;&gt; async def main() -&gt; None:\n    ...     generation = await client.game.fetch_generation(1)\n    ...     print(generation.id)\n    ...     await client.close()\n    &gt;&gt;&gt; asyncio.run(main())\n    1\n    \"\"\"\n    route = Endpoint.get_generation(name)\n    self._validate_resource(self.cache.generation, name, route)\n    data = await self._client.request(route)\n    return self.cache.generation.setdefault(route, Generation.from_payload(data))\n</code></pre>"},{"location":"api_reference/ext/game/#pokelance.ext.game.Game.fetch_pokedex","title":"<code>fetch_pokedex(name)</code>  <code>async</code>","text":"<p>Fetches a pokedex from the API.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Union[str, int]</code> <p>The name or id of the pokedex.</p> required <p>Returns:</p> Type Description <code>Pokedex</code> <p>The pokedex if it exists in the API, else raises ResourceNotFound.</p> <p>Raises:</p> Type Description <code>ResourceNotFound</code> <p>The name or id of the pokedex is invalid.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from pokelance import PokeLance\n&gt;&gt;&gt; import asyncio\n&gt;&gt;&gt; client = PokeLance()\n&gt;&gt;&gt; async def main() -&gt; None:\n...     pokedex = await client.game.fetch_pokedex(1)\n...     print(pokedex.region)\n...     await client.close()\n&gt;&gt;&gt; asyncio.run(main())\nNone\n</code></pre> Source code in <code>pokelance/ext/game.py</code> Python<pre><code>async def fetch_pokedex(self, name: t.Union[str, int]) -&gt; Pokedex:\n    \"\"\"Fetches a pokedex from the API.\n\n    Parameters\n    ----------\n    name: typing.Union[str, int]\n        The name or id of the pokedex.\n\n    Returns\n    -------\n    pokelance.models.Pokedex\n        The pokedex if it exists in the API, else raises ResourceNotFound.\n\n    Raises\n    ------\n    pokelance.exceptions.ResourceNotFound\n        The name or id of the pokedex is invalid.\n\n    Examples\n    --------\n\n    &gt;&gt;&gt; from pokelance import PokeLance\n    &gt;&gt;&gt; import asyncio\n    &gt;&gt;&gt; client = PokeLance()\n    &gt;&gt;&gt; async def main() -&gt; None:\n    ...     pokedex = await client.game.fetch_pokedex(1)\n    ...     print(pokedex.region)\n    ...     await client.close()\n    &gt;&gt;&gt; asyncio.run(main())\n    None\n    \"\"\"\n    route = Endpoint.get_pokedex(name)\n    self._validate_resource(self.cache.pokedex, name, route)\n    data = await self._client.request(route)\n    return self.cache.pokedex.setdefault(route, Pokedex.from_payload(data))\n</code></pre>"},{"location":"api_reference/ext/game/#pokelance.ext.game.Game.fetch_version","title":"<code>fetch_version(name)</code>  <code>async</code>","text":"<p>Fetches a version from the API.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Union[str, int]</code> <p>The name or id of the version.</p> required <p>Returns:</p> Type Description <code>Version</code> <p>The version if it exists in the API, else raises ResourceNotFound.</p> <p>Raises:</p> Type Description <code>ResourceNotFound</code> <p>The name or id of the version is invalid.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from pokelance import PokeLance\n&gt;&gt;&gt; import asyncio\n&gt;&gt;&gt; client = PokeLance()\n&gt;&gt;&gt; async def main() -&gt; None:\n...     version = await client.game.fetch_version(1)\n...     print(version.name)\n...     await client.close()\n&gt;&gt;&gt; asyncio.run(main())\nred\n</code></pre> Source code in <code>pokelance/ext/game.py</code> Python<pre><code>async def fetch_version(self, name: t.Union[str, int]) -&gt; Version:\n    \"\"\"Fetches a version from the API.\n\n    Parameters\n    ----------\n    name: typing.Union[str, int]\n        The name or id of the version.\n\n    Returns\n    -------\n    pokelance.models.Version\n        The version if it exists in the API, else raises ResourceNotFound.\n\n    Raises\n    ------\n    pokelance.exceptions.ResourceNotFound\n        The name or id of the version is invalid.\n\n    Examples\n    --------\n\n    &gt;&gt;&gt; from pokelance import PokeLance\n    &gt;&gt;&gt; import asyncio\n    &gt;&gt;&gt; client = PokeLance()\n    &gt;&gt;&gt; async def main() -&gt; None:\n    ...     version = await client.game.fetch_version(1)\n    ...     print(version.name)\n    ...     await client.close()\n    &gt;&gt;&gt; asyncio.run(main())\n    red\n    \"\"\"\n    route = Endpoint.get_version(name)\n    self._validate_resource(self.cache.version, name, route)\n    data = await self._client.request(route)\n    return self.cache.version.setdefault(route, Version.from_payload(data))\n</code></pre>"},{"location":"api_reference/ext/game/#pokelance.ext.game.Game.fetch_version_group","title":"<code>fetch_version_group(name)</code>  <code>async</code>","text":"<p>Fetches a version group from the API.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Union[str, int]</code> <p>The name or id of the version group.</p> required <p>Returns:</p> Type Description <code>VersionGroup</code> <p>The version group if it exists in the API, else raises ResourceNotFound.</p> <p>Raises:</p> Type Description <code>ResourceNotFound</code> <p>The name or id of the version group is invalid.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from pokelance import PokeLance\n&gt;&gt;&gt; import asyncio\n&gt;&gt;&gt; client = PokeLance()\n&gt;&gt;&gt; async def main() -&gt; None:\n...     version_group = await client.game.fetch_version_group(1)\n...     print(version_group.id)\n...     await client.close()\n&gt;&gt;&gt; asyncio.run(main())\n1\n</code></pre> Source code in <code>pokelance/ext/game.py</code> Python<pre><code>async def fetch_version_group(self, name: t.Union[str, int]) -&gt; VersionGroup:\n    \"\"\"Fetches a version group from the API.\n\n    Parameters\n    ----------\n    name: typing.Union[str, int]\n        The name or id of the version group.\n\n    Returns\n    -------\n    pokelance.models.VersionGroup\n        The version group if it exists in the API, else raises ResourceNotFound.\n\n    Raises\n    ------\n    pokelance.exceptions.ResourceNotFound\n        The name or id of the version group is invalid.\n\n    Examples\n    --------\n\n    &gt;&gt;&gt; from pokelance import PokeLance\n    &gt;&gt;&gt; import asyncio\n    &gt;&gt;&gt; client = PokeLance()\n    &gt;&gt;&gt; async def main() -&gt; None:\n    ...     version_group = await client.game.fetch_version_group(1)\n    ...     print(version_group.id)\n    ...     await client.close()\n    &gt;&gt;&gt; asyncio.run(main())\n    1\n    \"\"\"\n    route = Endpoint.get_version_group(name)\n    self._validate_resource(self.cache.version_group, name, route)\n    data = await self._client.request(route)\n    return self.cache.version_group.setdefault(route, VersionGroup.from_payload(data))\n</code></pre>"},{"location":"api_reference/ext/game/#pokelance.ext.game.Game.get_generation","title":"<code>get_generation(name)</code>","text":"<p>Gets a generation from the cache.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Union[str, int]</code> <p>The name or id of the generation.</p> required <p>Returns:</p> Type Description <code>Optional[Generation]</code> <p>The generation if it exists in the cache, else None.</p> <p>Raises:</p> Type Description <code>ResourceNotFound</code> <p>The name or id of the generation is invalid.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from pokelance import PokeLance\n&gt;&gt;&gt; client = PokeLance()\n&gt;&gt;&gt; generation = client.game.get_generation(1)\n&gt;&gt;&gt; generation.id\n1\n</code></pre> Source code in <code>pokelance/ext/game.py</code> Python<pre><code>def get_generation(self, name: t.Union[str, int]) -&gt; t.Optional[Generation]:\n    \"\"\"Gets a generation from the cache.\n\n    Parameters\n    ----------\n    name: typing.Union[str, int]\n        The name or id of the generation.\n\n    Returns\n    -------\n    typing.Optional[pokelance.models.Generation]\n        The generation if it exists in the cache, else None.\n\n    Raises\n    ------\n    pokelance.exceptions.ResourceNotFound\n        The name or id of the generation is invalid.\n\n    Examples\n    --------\n\n    &gt;&gt;&gt; from pokelance import PokeLance\n    &gt;&gt;&gt; client = PokeLance()\n    &gt;&gt;&gt; generation = client.game.get_generation(1)\n    &gt;&gt;&gt; generation.id\n    1\n    \"\"\"\n    route = Endpoint.get_generation(name)\n    self._validate_resource(self.cache.generation, name, route)\n    return self.cache.generation.get(route, None)\n</code></pre>"},{"location":"api_reference/ext/game/#pokelance.ext.game.Game.get_pokedex","title":"<code>get_pokedex(name)</code>","text":"<p>Gets a pokedex from the cache.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Union[str, int]</code> <p>The name or id of the pokedex.</p> required <p>Returns:</p> Type Description <code>Optional[Pokedex]</code> <p>The pokedex if it exists in the cache, else None.</p> <p>Raises:</p> Type Description <code>ResourceNotFound</code> <p>The name or id of the pokedex is invalid.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from pokelance import PokeLance\n&gt;&gt;&gt; client = PokeLance()\n&gt;&gt;&gt; pokedex = client.game.get_pokedex(1)\n&gt;&gt;&gt; pokedex.region\nNone\n</code></pre> Source code in <code>pokelance/ext/game.py</code> Python<pre><code>def get_pokedex(self, name: t.Union[str, int]) -&gt; t.Optional[Pokedex]:\n    \"\"\"Gets a pokedex from the cache.\n\n    Parameters\n    ----------\n    name: typing.Union[str, int]\n        The name or id of the pokedex.\n\n    Returns\n    -------\n    typing.Optional[pokelance.models.Pokedex]\n        The pokedex if it exists in the cache, else None.\n\n    Raises\n    ------\n    pokelance.exceptions.ResourceNotFound\n        The name or id of the pokedex is invalid.\n\n    Examples\n    --------\n\n    &gt;&gt;&gt; from pokelance import PokeLance\n    &gt;&gt;&gt; client = PokeLance()\n    &gt;&gt;&gt; pokedex = client.game.get_pokedex(1)\n    &gt;&gt;&gt; pokedex.region\n    None\n    \"\"\"\n    route = Endpoint.get_pokedex(name)\n    self._validate_resource(self.cache.pokedex, name, route)\n    return self.cache.pokedex.get(route, None)\n</code></pre>"},{"location":"api_reference/ext/game/#pokelance.ext.game.Game.get_version","title":"<code>get_version(name)</code>","text":"<p>Gets a version from the cache.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Union[str, int]</code> <p>The name or id of the version.</p> required <p>Returns:</p> Type Description <code>Optional[Version]</code> <p>The version if it exists in the cache, else None.</p> <p>Raises:</p> Type Description <code>ResourceNotFound</code> <p>The name or id of the version is invalid.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from pokelance import PokeLance\n&gt;&gt;&gt; client = PokeLance()\n&gt;&gt;&gt; version = client.game.get_version(1)\n&gt;&gt;&gt; version.name\n'red'\n</code></pre> Source code in <code>pokelance/ext/game.py</code> Python<pre><code>def get_version(self, name: t.Union[str, int]) -&gt; t.Optional[Version]:\n    \"\"\"Gets a version from the cache.\n\n    Parameters\n    ----------\n    name: typing.Union[str, int]\n        The name or id of the version.\n\n    Returns\n    -------\n    typing.Optional[pokelance.models.Version]\n        The version if it exists in the cache, else None.\n\n    Raises\n    ------\n    pokelance.exceptions.ResourceNotFound\n        The name or id of the version is invalid.\n\n    Examples\n    --------\n\n    &gt;&gt;&gt; from pokelance import PokeLance\n    &gt;&gt;&gt; client = PokeLance()\n    &gt;&gt;&gt; version = client.game.get_version(1)\n    &gt;&gt;&gt; version.name\n    'red'\n    \"\"\"\n    route = Endpoint.get_version(name)\n    self._validate_resource(self.cache.version, name, route)\n    return self.cache.version.get(route, None)\n</code></pre>"},{"location":"api_reference/ext/game/#pokelance.ext.game.Game.get_version_group","title":"<code>get_version_group(name)</code>","text":"<p>Gets a version group from the cache.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Union[str, int]</code> <p>The name or id of the version group.</p> required <p>Returns:</p> Type Description <code>Optional[VersionGroup]</code> <p>The version group if it exists in the cache, else None.</p> <p>Raises:</p> Type Description <code>ResourceNotFound</code> <p>The name or id of the version group is invalid.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from pokelance import PokeLance\n&gt;&gt;&gt; client = PokeLance()\n&gt;&gt;&gt; version_group = client.game.get_version_group(1)\n&gt;&gt;&gt; version_group.id\n1\n</code></pre> Source code in <code>pokelance/ext/game.py</code> Python<pre><code>def get_version_group(self, name: t.Union[str, int]) -&gt; t.Optional[VersionGroup]:\n    \"\"\"Gets a version group from the cache.\n\n    Parameters\n    ----------\n    name: typing.Union[str, int]\n        The name or id of the version group.\n\n    Returns\n    -------\n    typing.Optional[pokelance.models.VersionGroup]\n        The version group if it exists in the cache, else None.\n\n    Raises\n    ------\n    pokelance.exceptions.ResourceNotFound\n        The name or id of the version group is invalid.\n\n    Examples\n    --------\n\n    &gt;&gt;&gt; from pokelance import PokeLance\n    &gt;&gt;&gt; client = PokeLance()\n    &gt;&gt;&gt; version_group = client.game.get_version_group(1)\n    &gt;&gt;&gt; version_group.id\n    1\n    \"\"\"\n    route = Endpoint.get_version_group(name)\n    self._validate_resource(self.cache.version_group, name, route)\n    return self.cache.version_group.get(route, None)\n</code></pre>"},{"location":"api_reference/ext/game/#pokelance.ext.game.Game.setup","title":"<code>setup()</code>  <code>async</code>","text":"<p>Sets up the extension.</p> Source code in <code>pokelance/ext/_base.py</code> Python<pre><code>async def setup(self) -&gt; None:\n    \"\"\"Sets up the extension.\"\"\"\n    for item in dir(self):\n        if item.startswith(\"fetch_\"):\n            data = await self._client.request(\n                t.cast(t.Callable[[], \"Route\"], getattr(Endpoint, f\"get_{item[6:]}_endpoints\"))()\n            )\n            self._cache.load_documents(str(self.__class__.__name__), item[6:], data[\"results\"])\n</code></pre>"},{"location":"api_reference/ext/game/#pokelance.ext.game.setup","title":"<code>setup(lance)</code>","text":"<p>Sets up the game cog.</p> Source code in <code>pokelance/ext/game.py</code> Python<pre><code>def setup(lance: \"PokeLance\") -&gt; None:\n    \"\"\"Sets up the game cog.\"\"\"\n    lance.add_extension(\"game\", Game(lance.http))\n</code></pre>"},{"location":"api_reference/ext/item/","title":"item","text":""},{"location":"api_reference/ext/item/#pokelance.ext.item","title":"<code>pokelance.ext.item</code>","text":""},{"location":"api_reference/ext/item/#pokelance.ext.item.Item","title":"<code>Item(client)</code>","text":"<p>               Bases: <code>BaseExtension</code></p> <p>Extension for item related endpoints.</p> <p>Attributes:</p> Name Type Description <code>cache</code> <code>Item</code> <p>The cache for this extension.</p> <p>Initializes the extension.</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>HttpClient</code> <p>The client to use for requests.</p> required Source code in <code>pokelance/ext/_base.py</code> Python<pre><code>def __init__(self, client: \"HttpClient\") -&gt; None:\n    \"\"\"Initializes the extension.\n\n    Parameters\n    ----------\n    client: pokelance.http.HttpClient\n        The client to use for requests.\n    \"\"\"\n    self._client = client\n    self._cache = self._client.cache\n    self.cache = getattr(self._cache, self.__class__.__name__.lower())\n</code></pre>"},{"location":"api_reference/ext/item/#pokelance.ext.item.Item.fetch_item","title":"<code>fetch_item(name)</code>  <code>async</code>","text":"<p>Fetches an item from the API.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Union[str, int]</code> <p>The name or id of the item.</p> required <p>Returns:</p> Type Description <code>Item</code> <p>The item if it exists in the API, else raises ResourceNotFound.</p> <p>Raises:</p> Type Description <code>ResourceNotFound</code> <p>The name or id of the item is invalid.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from pokelance import PokeLance\n&gt;&gt;&gt; import asyncio\n&gt;&gt;&gt; client = PokeLance()\n&gt;&gt;&gt; async def main() -&gt; None:\n...     item = await client.item.fetch_item(\"potion\")\n...     print(item.id)\n...     await client.close()\n&gt;&gt;&gt; asyncio.run(main())\n17\n</code></pre> Source code in <code>pokelance/ext/item.py</code> Python<pre><code>async def fetch_item(self, name: t.Union[str, int]) -&gt; ItemModel:\n    \"\"\"Fetches an item from the API.\n\n    Parameters\n    ----------\n    name: typing.Union[str, int]\n        The name or id of the item.\n\n    Returns\n    -------\n    ItemModel\n        The item if it exists in the API, else raises ResourceNotFound.\n\n    Raises\n    ------\n    pokelance.exceptions.ResourceNotFound\n        The name or id of the item is invalid.\n\n    Examples\n    --------\n\n    &gt;&gt;&gt; from pokelance import PokeLance\n    &gt;&gt;&gt; import asyncio\n    &gt;&gt;&gt; client = PokeLance()\n    &gt;&gt;&gt; async def main() -&gt; None:\n    ...     item = await client.item.fetch_item(\"potion\")\n    ...     print(item.id)\n    ...     await client.close()\n    &gt;&gt;&gt; asyncio.run(main())\n    17\n    \"\"\"\n    route = Endpoint.get_item(name)\n    self._validate_resource(self.cache.item, name, route)\n    data = await self._client.request(route)\n    return self.cache.item.setdefault(route, ItemModel.from_payload(data))\n</code></pre>"},{"location":"api_reference/ext/item/#pokelance.ext.item.Item.fetch_item_attribute","title":"<code>fetch_item_attribute(name)</code>  <code>async</code>","text":"<p>Fetches an item attribute from the API.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Union[str, int]</code> <p>The name or id of the item attribute.</p> required <p>Returns:</p> Type Description <code>ItemAttribute</code> <p>The item attribute if it exists in the API, else raises ResourceNotFound.</p> <p>Raises:</p> Type Description <code>ResourceNotFound</code> <p>The name or id of the item attribute is invalid.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from pokelance import PokeLance\n&gt;&gt;&gt; import asyncio\n&gt;&gt;&gt; client = PokeLance()\n&gt;&gt;&gt; async def main() -&gt; None:\n...     item_attribute = await client.item.fetch_item_attribute(\"holdable\")\n...     print(item_attribute.id)\n...     await client.close()\n&gt;&gt;&gt; asyncio.run(main())\n5\n</code></pre> Source code in <code>pokelance/ext/item.py</code> Python<pre><code>async def fetch_item_attribute(self, name: t.Union[str, int]) -&gt; ItemAttribute:\n    \"\"\"Fetches an item attribute from the API.\n\n    Parameters\n    ----------\n    name: typing.Union[str, int]\n        The name or id of the item attribute.\n\n    Returns\n    -------\n    ItemAttribute\n        The item attribute if it exists in the API, else raises ResourceNotFound.\n\n    Raises\n    ------\n    pokelance.exceptions.ResourceNotFound\n        The name or id of the item attribute is invalid.\n\n    Examples\n    --------\n\n    &gt;&gt;&gt; from pokelance import PokeLance\n    &gt;&gt;&gt; import asyncio\n    &gt;&gt;&gt; client = PokeLance()\n    &gt;&gt;&gt; async def main() -&gt; None:\n    ...     item_attribute = await client.item.fetch_item_attribute(\"holdable\")\n    ...     print(item_attribute.id)\n    ...     await client.close()\n    &gt;&gt;&gt; asyncio.run(main())\n    5\n    \"\"\"\n    route = Endpoint.get_item_attribute(name)\n    self._validate_resource(self.cache.item_attribute, name, route)\n    data = await self._client.request(route)\n    return self.cache.item_attribute.setdefault(route, ItemAttribute.from_payload(data))\n</code></pre>"},{"location":"api_reference/ext/item/#pokelance.ext.item.Item.fetch_item_category","title":"<code>fetch_item_category(name)</code>  <code>async</code>","text":"<p>Fetches an item category from the API.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Union[str, int]</code> <p>The name or id of the item category.</p> required <p>Returns:</p> Type Description <code>ItemCategory</code> <p>The item category if it exists in the API, else raises ResourceNotFound.</p> <p>Raises:</p> Type Description <code>ResourceNotFound</code> <p>The name or id of the item category is invalid.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from pokelance import PokeLance\n&gt;&gt;&gt; import asyncio\n&gt;&gt;&gt; client = PokeLance()\n&gt;&gt;&gt; async def main() -&gt; None:\n...     item_category = await client.item.fetch_item_category(1)\n...     print(item_category.name)\n...     await client.close()\n&gt;&gt;&gt; asyncio.run(main())\nstat-boosts\n</code></pre> Source code in <code>pokelance/ext/item.py</code> Python<pre><code>async def fetch_item_category(self, name: t.Union[str, int]) -&gt; ItemCategory:\n    \"\"\"Fetches an item category from the API.\n\n    Parameters\n    ----------\n    name: typing.Union[str, int]\n        The name or id of the item category.\n\n    Returns\n    -------\n    ItemCategory\n        The item category if it exists in the API, else raises ResourceNotFound.\n\n    Raises\n    ------\n    pokelance.exceptions.ResourceNotFound\n        The name or id of the item category is invalid.\n\n    Examples\n    --------\n\n    &gt;&gt;&gt; from pokelance import PokeLance\n    &gt;&gt;&gt; import asyncio\n    &gt;&gt;&gt; client = PokeLance()\n    &gt;&gt;&gt; async def main() -&gt; None:\n    ...     item_category = await client.item.fetch_item_category(1)\n    ...     print(item_category.name)\n    ...     await client.close()\n    &gt;&gt;&gt; asyncio.run(main())\n    stat-boosts\n    \"\"\"\n    route = Endpoint.get_item_category(name)\n    self._validate_resource(self.cache.item_category, name, route)\n    data = await self._client.request(route)\n    return self.cache.item_category.setdefault(route, ItemCategory.from_payload(data))\n</code></pre>"},{"location":"api_reference/ext/item/#pokelance.ext.item.Item.fetch_item_fling_effect","title":"<code>fetch_item_fling_effect(name)</code>  <code>async</code>","text":"<p>Fetches an item fling effect from the API.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Union[str, int]</code> <p>The name or id of the item fling effect.</p> required <p>Returns:</p> Type Description <code>ItemFlingEffect</code> <p>The item fling effect if it exists in the API, else raises ResourceNotFound.</p> <p>Raises:</p> Type Description <code>ResourceNotFound</code> <p>The name or id of the item fling effect is invalid.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from pokelance import PokeLance\n&gt;&gt;&gt; import asyncio\n&gt;&gt;&gt; client = PokeLance()\n&gt;&gt;&gt; async def main() -&gt; None:\n...     item_fling_effect = await client.item.fetch_item_fling_effect(1)\n...     print(item_fling_effect.name)\n...     await client.close()\n&gt;&gt;&gt; asyncio.run(main())\nbadly-poison\n</code></pre> Source code in <code>pokelance/ext/item.py</code> Python<pre><code>async def fetch_item_fling_effect(self, name: t.Union[str, int]) -&gt; ItemFlingEffect:\n    \"\"\"Fetches an item fling effect from the API.\n\n    Parameters\n    ----------\n    name: typing.Union[str, int]\n        The name or id of the item fling effect.\n\n    Returns\n    -------\n    ItemFlingEffect\n        The item fling effect if it exists in the API, else raises ResourceNotFound.\n\n    Raises\n    ------\n    pokelance.exceptions.ResourceNotFound\n        The name or id of the item fling effect is invalid.\n\n    Examples\n    --------\n\n    &gt;&gt;&gt; from pokelance import PokeLance\n    &gt;&gt;&gt; import asyncio\n    &gt;&gt;&gt; client = PokeLance()\n    &gt;&gt;&gt; async def main() -&gt; None:\n    ...     item_fling_effect = await client.item.fetch_item_fling_effect(1)\n    ...     print(item_fling_effect.name)\n    ...     await client.close()\n    &gt;&gt;&gt; asyncio.run(main())\n    badly-poison\n    \"\"\"\n    route = Endpoint.get_item_fling_effect(name)\n    self._validate_resource(self.cache.item_fling_effect, name, route)\n    data = await self._client.request(route)\n    return self.cache.item_fling_effect.setdefault(route, ItemFlingEffect.from_payload(data))\n</code></pre>"},{"location":"api_reference/ext/item/#pokelance.ext.item.Item.fetch_item_pocket","title":"<code>fetch_item_pocket(name)</code>  <code>async</code>","text":"<p>Fetches an item pocket from the API.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Union[str, int]</code> <p>The name or id of the item pocket.</p> required <p>Returns:</p> Type Description <code>ItemPocket</code> <p>The item pocket if it exists in the API, else raises ResourceNotFound.</p> <p>Raises:</p> Type Description <code>ResourceNotFound</code> <p>The name or id of the item pocket is invalid.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from pokelance import PokeLance\n&gt;&gt;&gt; import asyncio\n&gt;&gt;&gt; client = PokeLance()\n&gt;&gt;&gt; async def main() -&gt; None:\n...     item_pocket = await client.item.fetch_item_pocket(1)\n...     print(item_pocket.name)\n...     await client.close()\n&gt;&gt;&gt; asyncio.run(main())\nmisc\n</code></pre> Source code in <code>pokelance/ext/item.py</code> Python<pre><code>async def fetch_item_pocket(self, name: t.Union[str, int]) -&gt; ItemPocket:\n    \"\"\"Fetches an item pocket from the API.\n\n    Parameters\n    ----------\n    name: typing.Union[str, int]\n        The name or id of the item pocket.\n\n    Returns\n    -------\n    ItemPocket\n        The item pocket if it exists in the API, else raises ResourceNotFound.\n\n    Raises\n    ------\n    pokelance.exceptions.ResourceNotFound\n        The name or id of the item pocket is invalid.\n\n    Examples\n    --------\n\n    &gt;&gt;&gt; from pokelance import PokeLance\n    &gt;&gt;&gt; import asyncio\n    &gt;&gt;&gt; client = PokeLance()\n    &gt;&gt;&gt; async def main() -&gt; None:\n    ...     item_pocket = await client.item.fetch_item_pocket(1)\n    ...     print(item_pocket.name)\n    ...     await client.close()\n    &gt;&gt;&gt; asyncio.run(main())\n    misc\n    \"\"\"\n    route = Endpoint.get_item_pocket(name)\n    self._validate_resource(self.cache.item_pocket, name, route)\n    data = await self._client.request(route)\n    return self.cache.item_pocket.setdefault(route, ItemPocket.from_payload(data))\n</code></pre>"},{"location":"api_reference/ext/item/#pokelance.ext.item.Item.get_item","title":"<code>get_item(name)</code>","text":"<p>Gets an item from the cache.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Union[str, int]</code> <p>The name or id of the item.</p> required <p>Returns:</p> Type Description <code>Optional[Item]</code> <p>The item if it exists in the cache, else None.</p> <p>Raises:</p> Type Description <code>ResourceNotFound</code> <p>The name or id of the item is invalid.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from pokelance import PokeLance\n&gt;&gt;&gt; client = PokeLance()\n&gt;&gt;&gt; item = client.item.get_item(\"potion\")\n&gt;&gt;&gt; item.id\n17\n</code></pre> Source code in <code>pokelance/ext/item.py</code> Python<pre><code>def get_item(self, name: t.Union[str, int]) -&gt; t.Optional[ItemModel]:\n    \"\"\"Gets an item from the cache.\n\n    Parameters\n    ----------\n    name: typing.Union[str, int]\n        The name or id of the item.\n\n    Returns\n    -------\n    typing.Optional[pokelance.models.Item]\n        The item if it exists in the cache, else None.\n\n    Raises\n    ------\n    pokelance.exceptions.ResourceNotFound\n        The name or id of the item is invalid.\n\n    Examples\n    --------\n\n    &gt;&gt;&gt; from pokelance import PokeLance\n    &gt;&gt;&gt; client = PokeLance()\n    &gt;&gt;&gt; item = client.item.get_item(\"potion\")\n    &gt;&gt;&gt; item.id\n    17\n    \"\"\"\n    route = Endpoint.get_item(name)\n    self._validate_resource(self.cache.item, name, route)\n    return self.cache.item.get(route, None)\n</code></pre>"},{"location":"api_reference/ext/item/#pokelance.ext.item.Item.get_item_attribute","title":"<code>get_item_attribute(name)</code>","text":"<p>Gets an item attribute from the cache.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Union[str, int]</code> <p>The name or id of the item attribute.</p> required <p>Returns:</p> Type Description <code>Optional[ItemAttribute]</code> <p>The item attribute if it exists in the cache, else None.</p> <p>Raises:</p> Type Description <code>ResourceNotFound</code> <p>The name or id of the item attribute is invalid.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from pokelance import PokeLance\n&gt;&gt;&gt; client = PokeLance()\n&gt;&gt;&gt; item_attribute = client.item.get_item_attribute(\"holdable\")\n&gt;&gt;&gt; item_attribute.id\n5\n</code></pre> Source code in <code>pokelance/ext/item.py</code> Python<pre><code>def get_item_attribute(self, name: t.Union[str, int]) -&gt; t.Optional[ItemAttribute]:\n    \"\"\"Gets an item attribute from the cache.\n\n    Parameters\n    ----------\n    name: typing.Union[str, int]\n        The name or id of the item attribute.\n\n    Returns\n    -------\n    typing.Optional[pokelance.models.ItemAttribute]\n        The item attribute if it exists in the cache, else None.\n\n    Raises\n    ------\n    pokelance.exceptions.ResourceNotFound\n        The name or id of the item attribute is invalid.\n\n    Examples\n    --------\n\n    &gt;&gt;&gt; from pokelance import PokeLance\n    &gt;&gt;&gt; client = PokeLance()\n    &gt;&gt;&gt; item_attribute = client.item.get_item_attribute(\"holdable\")\n    &gt;&gt;&gt; item_attribute.id\n    5\n    \"\"\"\n    route = Endpoint.get_item_attribute(name)\n    self._validate_resource(self.cache.item_attribute, name, route)\n    return self.cache.item_attribute.get(route, None)\n</code></pre>"},{"location":"api_reference/ext/item/#pokelance.ext.item.Item.get_item_category","title":"<code>get_item_category(name)</code>","text":"<p>Gets an item category from the cache.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Union[str, int]</code> <p>The name or id of the item category.</p> required <p>Returns:</p> Type Description <code>Optional[ItemCategory]</code> <p>The item category if it exists in the cache, else None.</p> <p>Raises:</p> Type Description <code>ResourceNotFound</code> <p>The name or id of the item category is invalid.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from pokelance import PokeLance\n&gt;&gt;&gt; client = PokeLance()\n&gt;&gt;&gt; item_category = client.item.get_item_category(1)\n&gt;&gt;&gt; item_category.name\n'stat-boosts'\n</code></pre> Source code in <code>pokelance/ext/item.py</code> Python<pre><code>def get_item_category(self, name: t.Union[str, int]) -&gt; t.Optional[ItemCategory]:\n    \"\"\"Gets an item category from the cache.\n\n    Parameters\n    ----------\n    name: typing.Union[str, int]\n        The name or id of the item category.\n\n    Returns\n    -------\n    typing.Optional[pokelance.models.ItemCategory]\n        The item category if it exists in the cache, else None.\n\n    Raises\n    ------\n    pokelance.exceptions.ResourceNotFound\n        The name or id of the item category is invalid.\n\n    Examples\n    --------\n\n    &gt;&gt;&gt; from pokelance import PokeLance\n    &gt;&gt;&gt; client = PokeLance()\n    &gt;&gt;&gt; item_category = client.item.get_item_category(1)\n    &gt;&gt;&gt; item_category.name\n    'stat-boosts'\n    \"\"\"\n    route = Endpoint.get_item_category(name)\n    self._validate_resource(self.cache.item_category, name, route)\n    return self.cache.item_category.get(route, None)\n</code></pre>"},{"location":"api_reference/ext/item/#pokelance.ext.item.Item.get_item_fling_effect","title":"<code>get_item_fling_effect(name)</code>","text":"<p>Gets an item fling effect from the cache.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Union[str, int]</code> <p>The name or id of the item fling effect.</p> required <p>Returns:</p> Type Description <code>Optional[ItemFlingEffect]</code> <p>The item fling effect if it exists in the cache, else None.</p> <p>Raises:</p> Type Description <code>ResourceNotFound</code> <p>The name or id of the item fling effect is invalid.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from pokelance import PokeLance\n&gt;&gt;&gt; client = PokeLance()\n&gt;&gt;&gt; item_fling_effect = client.item.get_item_fling_effect(1)\n&gt;&gt;&gt; item_fling_effect.name\n'badly-poison'\n</code></pre> Source code in <code>pokelance/ext/item.py</code> Python<pre><code>def get_item_fling_effect(self, name: t.Union[str, int]) -&gt; t.Optional[ItemFlingEffect]:\n    \"\"\"Gets an item fling effect from the cache.\n\n    Parameters\n    ----------\n    name: typing.Union[str, int]\n        The name or id of the item fling effect.\n\n    Returns\n    -------\n    typing.Optional[pokelance.models.ItemFlingEffect]\n        The item fling effect if it exists in the cache, else None.\n\n    Raises\n    ------\n    pokelance.exceptions.ResourceNotFound\n        The name or id of the item fling effect is invalid.\n\n    Examples\n    --------\n\n    &gt;&gt;&gt; from pokelance import PokeLance\n    &gt;&gt;&gt; client = PokeLance()\n    &gt;&gt;&gt; item_fling_effect = client.item.get_item_fling_effect(1)\n    &gt;&gt;&gt; item_fling_effect.name\n    'badly-poison'\n    \"\"\"\n    route = Endpoint.get_item_fling_effect(name)\n    self._validate_resource(self.cache.item_fling_effect, name, route)\n    return self.cache.item_fling_effect.get(route, None)\n</code></pre>"},{"location":"api_reference/ext/item/#pokelance.ext.item.Item.get_item_pocket","title":"<code>get_item_pocket(name)</code>","text":"<p>Gets an item pocket from the cache.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Union[str, int]</code> <p>The name or id of the item pocket.</p> required <p>Returns:</p> Type Description <code>Optional[ItemPocket]</code> <p>The item pocket if it exists in the cache, else None.</p> <p>Raises:</p> Type Description <code>ResourceNotFound</code> <p>The name or id of the item pocket is invalid.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from pokelance import PokeLance\n&gt;&gt;&gt; client = PokeLance()\n&gt;&gt;&gt; item_pocket = client.item.get_item_pocket(1)\n&gt;&gt;&gt; item_pocket.name\n'misc'\n</code></pre> Source code in <code>pokelance/ext/item.py</code> Python<pre><code>def get_item_pocket(self, name: t.Union[str, int]) -&gt; t.Optional[ItemPocket]:\n    \"\"\"Gets an item pocket from the cache.\n\n    Parameters\n    ----------\n    name: typing.Union[str, int]\n        The name or id of the item pocket.\n\n    Returns\n    -------\n    typing.Optional[pokelance.models.ItemPocket]\n        The item pocket if it exists in the cache, else None.\n\n    Raises\n    ------\n    pokelance.exceptions.ResourceNotFound\n        The name or id of the item pocket is invalid.\n\n    Examples\n    --------\n\n    &gt;&gt;&gt; from pokelance import PokeLance\n    &gt;&gt;&gt; client = PokeLance()\n    &gt;&gt;&gt; item_pocket = client.item.get_item_pocket(1)\n    &gt;&gt;&gt; item_pocket.name\n    'misc'\n    \"\"\"\n    route = Endpoint.get_item_pocket(name)\n    self._validate_resource(self.cache.item_pocket, name, route)\n    return self.cache.item_pocket.get(route, None)\n</code></pre>"},{"location":"api_reference/ext/item/#pokelance.ext.item.Item.setup","title":"<code>setup()</code>  <code>async</code>","text":"<p>Sets up the extension.</p> Source code in <code>pokelance/ext/_base.py</code> Python<pre><code>async def setup(self) -&gt; None:\n    \"\"\"Sets up the extension.\"\"\"\n    for item in dir(self):\n        if item.startswith(\"fetch_\"):\n            data = await self._client.request(\n                t.cast(t.Callable[[], \"Route\"], getattr(Endpoint, f\"get_{item[6:]}_endpoints\"))()\n            )\n            self._cache.load_documents(str(self.__class__.__name__), item[6:], data[\"results\"])\n</code></pre>"},{"location":"api_reference/ext/item/#pokelance.ext.item.setup","title":"<code>setup(lance)</code>","text":"<p>Sets up the item cog.</p> Source code in <code>pokelance/ext/item.py</code> Python<pre><code>def setup(lance: \"PokeLance\") -&gt; None:\n    \"\"\"Sets up the item cog.\"\"\"\n    lance.add_extension(\"item\", Item(lance.http))\n</code></pre>"},{"location":"api_reference/ext/location/","title":"location","text":""},{"location":"api_reference/ext/location/#pokelance.ext.location","title":"<code>pokelance.ext.location</code>","text":""},{"location":"api_reference/ext/location/#pokelance.ext.location.Location","title":"<code>Location(client)</code>","text":"<p>               Bases: <code>BaseExtension</code></p> <p>Extension for location related endpoints.</p> <p>Attributes:</p> Name Type Description <code>cache</code> <code>Location</code> <p>The cache for this extension.</p> <p>Initializes the extension.</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>HttpClient</code> <p>The client to use for requests.</p> required Source code in <code>pokelance/ext/_base.py</code> Python<pre><code>def __init__(self, client: \"HttpClient\") -&gt; None:\n    \"\"\"Initializes the extension.\n\n    Parameters\n    ----------\n    client: pokelance.http.HttpClient\n        The client to use for requests.\n    \"\"\"\n    self._client = client\n    self._cache = self._client.cache\n    self.cache = getattr(self._cache, self.__class__.__name__.lower())\n</code></pre>"},{"location":"api_reference/ext/location/#pokelance.ext.location.Location.fetch_location","title":"<code>fetch_location(name)</code>  <code>async</code>","text":"<p>Fetches a location from the API.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Union[str, int]</code> <p>The name or id of the location.</p> required <p>Returns:</p> Type Description <code>Location</code> <p>The location if it exists in the API, else raises ResourceNotFound.</p> <p>Raises:</p> Type Description <code>ResourceNotFound</code> <p>The name or id of the location is invalid.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from pokelance import PokeLance\n&gt;&gt;&gt; import asyncio\n&gt;&gt;&gt; client = PokeLance()\n&gt;&gt;&gt; async def main() -&gt; None:\n...     location = await client.location.fetch_location(1)\n...     print(location.name)\n...     await client.close()\n&gt;&gt;&gt; asyncio.run(main())\ncanalave-city\n</code></pre> Source code in <code>pokelance/ext/location.py</code> Python<pre><code>async def fetch_location(self, name: t.Union[str, int]) -&gt; LocationModel:\n    \"\"\"Fetches a location from the API.\n\n    Parameters\n    ----------\n    name: typing.Union[str, int]\n        The name or id of the location.\n\n    Returns\n    -------\n    LocationModel\n        The location if it exists in the API, else raises ResourceNotFound.\n\n    Raises\n    ------\n    pokelance.exceptions.ResourceNotFound\n        The name or id of the location is invalid.\n\n    Examples\n    --------\n\n    &gt;&gt;&gt; from pokelance import PokeLance\n    &gt;&gt;&gt; import asyncio\n    &gt;&gt;&gt; client = PokeLance()\n    &gt;&gt;&gt; async def main() -&gt; None:\n    ...     location = await client.location.fetch_location(1)\n    ...     print(location.name)\n    ...     await client.close()\n    &gt;&gt;&gt; asyncio.run(main())\n    canalave-city\n    \"\"\"\n    route = Endpoint.get_location(name)\n    self._validate_resource(self.cache.location, name, route)\n    data = await self._client.request(route)\n    return self.cache.location.setdefault(route, LocationModel.from_payload(data))\n</code></pre>"},{"location":"api_reference/ext/location/#pokelance.ext.location.Location.fetch_location_area","title":"<code>fetch_location_area(name)</code>  <code>async</code>","text":"<p>Fetches a location area from the API.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Union[str, int]</code> <p>The name or id of the location area.</p> required <p>Returns:</p> Type Description <code>LocationArea</code> <p>The location area if it exists in the API, else raises ResourceNotFound.</p> <p>Raises:</p> Type Description <code>ResourceNotFound</code> <p>The name or id of the location area is invalid.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from pokelance import PokeLance\n&gt;&gt;&gt; import asyncio\n&gt;&gt;&gt; client = PokeLance()\n&gt;&gt;&gt; async def main() -&gt; None:\n...     location_area = await client.location.fetch_location_area(1)\n...     print(location_area.name)\n...     await client.close()\n&gt;&gt;&gt; asyncio.run(main())\ncanalave-city-area\n</code></pre> Source code in <code>pokelance/ext/location.py</code> Python<pre><code>async def fetch_location_area(self, name: t.Union[str, int]) -&gt; LocationArea:\n    \"\"\"Fetches a location area from the API.\n\n    Parameters\n    ----------\n    name: typing.Union[str, int]\n        The name or id of the location area.\n\n    Returns\n    -------\n    LocationArea\n        The location area if it exists in the API, else raises ResourceNotFound.\n\n    Raises\n    ------\n    pokelance.exceptions.ResourceNotFound\n        The name or id of the location area is invalid.\n\n    Examples\n    --------\n\n    &gt;&gt;&gt; from pokelance import PokeLance\n    &gt;&gt;&gt; import asyncio\n    &gt;&gt;&gt; client = PokeLance()\n    &gt;&gt;&gt; async def main() -&gt; None:\n    ...     location_area = await client.location.fetch_location_area(1)\n    ...     print(location_area.name)\n    ...     await client.close()\n    &gt;&gt;&gt; asyncio.run(main())\n    canalave-city-area\n    \"\"\"\n    route = Endpoint.get_location_area(name)\n    self._validate_resource(self.cache.location_area, name, route)\n    data = await self._client.request(route)\n    return self.cache.location_area.setdefault(route, LocationArea.from_payload(data))\n</code></pre>"},{"location":"api_reference/ext/location/#pokelance.ext.location.Location.fetch_pal_park_area","title":"<code>fetch_pal_park_area(name)</code>  <code>async</code>","text":"<p>Fetches a pal park area from the API.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Union[str, int]</code> <p>The name or id of the pal park area.</p> required <p>Returns:</p> Type Description <code>PalParkArea</code> <p>The pal park area if it exists in the API, else raises ResourceNotFound.</p> <p>Raises:</p> Type Description <code>ResourceNotFound</code> <p>The name or id of the pal park area is invalid.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from pokelance import PokeLance\n&gt;&gt;&gt; import asyncio\n&gt;&gt;&gt; client = PokeLance()\n&gt;&gt;&gt; async def main() -&gt; None:\n...     pal_park_area = await client.location.fetch_pal_park_area(1)\n...     print(pal_park_area.name)\n...     await client.close()\n&gt;&gt;&gt; asyncio.run(main())\nforest\n</code></pre> Source code in <code>pokelance/ext/location.py</code> Python<pre><code>async def fetch_pal_park_area(self, name: t.Union[str, int]) -&gt; PalParkArea:\n    \"\"\"Fetches a pal park area from the API.\n\n    Parameters\n    ----------\n    name: typing.Union[str, int]\n        The name or id of the pal park area.\n\n    Returns\n    -------\n    PalParkArea\n        The pal park area if it exists in the API, else raises ResourceNotFound.\n\n    Raises\n    ------\n    pokelance.exceptions.ResourceNotFound\n        The name or id of the pal park area is invalid.\n\n    Examples\n    --------\n\n    &gt;&gt;&gt; from pokelance import PokeLance\n    &gt;&gt;&gt; import asyncio\n    &gt;&gt;&gt; client = PokeLance()\n    &gt;&gt;&gt; async def main() -&gt; None:\n    ...     pal_park_area = await client.location.fetch_pal_park_area(1)\n    ...     print(pal_park_area.name)\n    ...     await client.close()\n    &gt;&gt;&gt; asyncio.run(main())\n    forest\n    \"\"\"\n    route = Endpoint.get_pal_park_area(name)\n    self._validate_resource(self.cache.pal_park_area, name, route)\n    data = await self._client.request(route)\n    return self.cache.pal_park_area.setdefault(route, PalParkArea.from_payload(data))\n</code></pre>"},{"location":"api_reference/ext/location/#pokelance.ext.location.Location.fetch_region","title":"<code>fetch_region(name)</code>  <code>async</code>","text":"<p>Fetches a region from the API.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Union[str, int]</code> <p>The name or id of the region.</p> required <p>Returns:</p> Type Description <code>Region</code> <p>The region if it exists in the API, else raises ResourceNotFound.</p> <p>Raises:</p> Type Description <code>ResourceNotFound</code> <p>The name or id of the region is invalid.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from pokelance import PokeLance\n&gt;&gt;&gt; import asyncio\n&gt;&gt;&gt; client = PokeLance()\n&gt;&gt;&gt; async def main() -&gt; None:\n...     region = await client.location.fetch_region(1)\n...     print(region.name)\n...     await client.close()\n&gt;&gt;&gt; asyncio.run(main())\nkanto\n</code></pre> Source code in <code>pokelance/ext/location.py</code> Python<pre><code>async def fetch_region(self, name: t.Union[str, int]) -&gt; Region:\n    \"\"\"Fetches a region from the API.\n\n    Parameters\n    ----------\n    name: typing.Union[str, int]\n        The name or id of the region.\n\n    Returns\n    -------\n    Region\n        The region if it exists in the API, else raises ResourceNotFound.\n\n    Raises\n    ------\n    pokelance.exceptions.ResourceNotFound\n        The name or id of the region is invalid.\n\n    Examples\n    --------\n\n    &gt;&gt;&gt; from pokelance import PokeLance\n    &gt;&gt;&gt; import asyncio\n    &gt;&gt;&gt; client = PokeLance()\n    &gt;&gt;&gt; async def main() -&gt; None:\n    ...     region = await client.location.fetch_region(1)\n    ...     print(region.name)\n    ...     await client.close()\n    &gt;&gt;&gt; asyncio.run(main())\n    kanto\n    \"\"\"\n    route = Endpoint.get_region(name)\n    self._validate_resource(self.cache.region, name, route)\n    data = await self._client.request(route)\n    return self.cache.region.setdefault(route, Region.from_payload(data))\n</code></pre>"},{"location":"api_reference/ext/location/#pokelance.ext.location.Location.get_location","title":"<code>get_location(name)</code>","text":"<p>Gets a location from the cache.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Union[str, int]</code> <p>The name or id of the location.</p> required <p>Returns:</p> Type Description <code>Optional[Location]</code> <p>The location if it exists in the cache, else None.</p> <p>Raises:</p> Type Description <code>ResourceNotFound</code> <p>The name or id of the item pocket is invalid.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from pokelance import PokeLance\n&gt;&gt;&gt; client = PokeLance()\n&gt;&gt;&gt; location = client.location.get_location(1)\n&gt;&gt;&gt; location.name\n'canalave-city'\n</code></pre> Source code in <code>pokelance/ext/location.py</code> Python<pre><code>def get_location(self, name: t.Union[str, int]) -&gt; t.Optional[LocationModel]:\n    \"\"\"Gets a location from the cache.\n\n    Parameters\n    ----------\n    name: typing.Union[str, int]\n        The name or id of the location.\n\n    Returns\n    -------\n    typing.Optional[pokelance.models.Location]\n        The location if it exists in the cache, else None.\n\n    Raises\n    ------\n    pokelance.exceptions.ResourceNotFound\n        The name or id of the item pocket is invalid.\n\n    Examples\n    --------\n\n    &gt;&gt;&gt; from pokelance import PokeLance\n    &gt;&gt;&gt; client = PokeLance()\n    &gt;&gt;&gt; location = client.location.get_location(1)\n    &gt;&gt;&gt; location.name\n    'canalave-city'\n    \"\"\"\n    route = Endpoint.get_location(name)\n    self._validate_resource(self.cache.location, name, route)\n    return self.cache.location.get(route, None)\n</code></pre>"},{"location":"api_reference/ext/location/#pokelance.ext.location.Location.get_location_area","title":"<code>get_location_area(name)</code>","text":"<p>Gets a location area from the cache.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Union[str, int]</code> <p>The name or id of the location area.</p> required <p>Returns:</p> Type Description <code>Optional[LocationArea]</code> <p>The location area if it exists in the cache, else None.</p> <p>Raises:</p> Type Description <code>ResourceNotFound</code> <p>The name or id of the location area is invalid.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from pokelance import PokeLance\n&gt;&gt;&gt; client = PokeLance()\n&gt;&gt;&gt; location_area = client.location.get_location_area(1)\n&gt;&gt;&gt; location_area.name\n'canalave-city-area'\n</code></pre> Source code in <code>pokelance/ext/location.py</code> Python<pre><code>def get_location_area(self, name: t.Union[str, int]) -&gt; t.Optional[LocationArea]:\n    \"\"\"Gets a location area from the cache.\n\n    Parameters\n    ----------\n    name: typing.Union[str, int]\n        The name or id of the location area.\n\n    Returns\n    -------\n    typing.Optional[pokelance.models.LocationArea]\n        The location area if it exists in the cache, else None.\n\n    Raises\n    ------\n    pokelance.exceptions.ResourceNotFound\n        The name or id of the location area is invalid.\n\n    Examples\n    --------\n\n    &gt;&gt;&gt; from pokelance import PokeLance\n    &gt;&gt;&gt; client = PokeLance()\n    &gt;&gt;&gt; location_area = client.location.get_location_area(1)\n    &gt;&gt;&gt; location_area.name\n    'canalave-city-area'\n    \"\"\"\n    route = Endpoint.get_location_area(name)\n    self._validate_resource(self.cache.location_area, name, route)\n    return self.cache.location_area.get(route, None)\n</code></pre>"},{"location":"api_reference/ext/location/#pokelance.ext.location.Location.get_pal_park_area","title":"<code>get_pal_park_area(name)</code>","text":"<p>Gets a pal park area from the cache.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Union[str, int]</code> <p>The name or id of the pal park area.</p> required <p>Returns:</p> Type Description <code>Optional[PalParkArea]</code> <p>The pal park area if it exists in the cache, else None.</p> <p>Raises:</p> Type Description <code>ResourceNotFound</code> <p>The name or id of the pal park area is invalid.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from pokelance import PokeLance\n&gt;&gt;&gt; client = PokeLance()\n&gt;&gt;&gt; pal_park_area = client.location.get_pal_park_area(1)\n&gt;&gt;&gt; pal_park_area.name\n'forest'\n</code></pre> Source code in <code>pokelance/ext/location.py</code> Python<pre><code>def get_pal_park_area(self, name: t.Union[str, int]) -&gt; t.Optional[PalParkArea]:\n    \"\"\"Gets a pal park area from the cache.\n\n    Parameters\n    ----------\n    name: typing.Union[str, int]\n        The name or id of the pal park area.\n\n    Returns\n    -------\n    typing.Optional[pokelance.models.PalParkArea]\n        The pal park area if it exists in the cache, else None.\n\n    Raises\n    ------\n    pokelance.exceptions.ResourceNotFound\n        The name or id of the pal park area is invalid.\n\n    Examples\n    --------\n\n    &gt;&gt;&gt; from pokelance import PokeLance\n    &gt;&gt;&gt; client = PokeLance()\n    &gt;&gt;&gt; pal_park_area = client.location.get_pal_park_area(1)\n    &gt;&gt;&gt; pal_park_area.name\n    'forest'\n    \"\"\"\n    route = Endpoint.get_pal_park_area(name)\n    self._validate_resource(self.cache.pal_park_area, name, route)\n    return self.cache.pal_park_area.get(route, None)\n</code></pre>"},{"location":"api_reference/ext/location/#pokelance.ext.location.Location.get_region","title":"<code>get_region(name)</code>","text":"<p>Gets a region from the cache.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Union[str, int]</code> <p>The name or id of the region.</p> required <p>Returns:</p> Type Description <code>Optional[Region]</code> <p>The region if it exists in the cache, else None.</p> <p>Raises:</p> Type Description <code>ResourceNotFound</code> <p>The name or id of the region is invalid.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from pokelance import PokeLance\n&gt;&gt;&gt; client = PokeLance()\n&gt;&gt;&gt; region = client.location.get_region(1)\n&gt;&gt;&gt; region.name\n'kanto'\n</code></pre> Source code in <code>pokelance/ext/location.py</code> Python<pre><code>def get_region(self, name: t.Union[str, int]) -&gt; t.Optional[Region]:\n    \"\"\"Gets a region from the cache.\n\n    Parameters\n    ----------\n    name: typing.Union[str, int]\n        The name or id of the region.\n\n    Returns\n    -------\n    typing.Optional[pokelance.models.Region]\n        The region if it exists in the cache, else None.\n\n    Raises\n    ------\n    pokelance.exceptions.ResourceNotFound\n        The name or id of the region is invalid.\n\n    Examples\n    --------\n\n    &gt;&gt;&gt; from pokelance import PokeLance\n    &gt;&gt;&gt; client = PokeLance()\n    &gt;&gt;&gt; region = client.location.get_region(1)\n    &gt;&gt;&gt; region.name\n    'kanto'\n    \"\"\"\n    route = Endpoint.get_region(name)\n    self._validate_resource(self.cache.region, name, route)\n    return self.cache.region.get(route, None)\n</code></pre>"},{"location":"api_reference/ext/location/#pokelance.ext.location.Location.setup","title":"<code>setup()</code>  <code>async</code>","text":"<p>Sets up the extension.</p> Source code in <code>pokelance/ext/_base.py</code> Python<pre><code>async def setup(self) -&gt; None:\n    \"\"\"Sets up the extension.\"\"\"\n    for item in dir(self):\n        if item.startswith(\"fetch_\"):\n            data = await self._client.request(\n                t.cast(t.Callable[[], \"Route\"], getattr(Endpoint, f\"get_{item[6:]}_endpoints\"))()\n            )\n            self._cache.load_documents(str(self.__class__.__name__), item[6:], data[\"results\"])\n</code></pre>"},{"location":"api_reference/ext/location/#pokelance.ext.location.setup","title":"<code>setup(lance)</code>","text":"<p>Sets up the location cog.</p> Source code in <code>pokelance/ext/location.py</code> Python<pre><code>def setup(lance: \"PokeLance\") -&gt; None:\n    \"\"\"Sets up the location cog.\"\"\"\n    lance.add_extension(\"location\", Location(lance.http))\n</code></pre>"},{"location":"api_reference/ext/machine/","title":"machine","text":""},{"location":"api_reference/ext/machine/#pokelance.ext.machine","title":"<code>pokelance.ext.machine</code>","text":""},{"location":"api_reference/ext/machine/#pokelance.ext.machine.Machine","title":"<code>Machine(client)</code>","text":"<p>               Bases: <code>BaseExtension</code></p> <p>Extension for machine related endpoints.</p> <p>Attributes:</p> Name Type Description <code>cache</code> <code>Machine</code> <p>The cache for this extension.</p> <p>Initializes the extension.</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>HttpClient</code> <p>The client to use for requests.</p> required Source code in <code>pokelance/ext/_base.py</code> Python<pre><code>def __init__(self, client: \"HttpClient\") -&gt; None:\n    \"\"\"Initializes the extension.\n\n    Parameters\n    ----------\n    client: pokelance.http.HttpClient\n        The client to use for requests.\n    \"\"\"\n    self._client = client\n    self._cache = self._client.cache\n    self.cache = getattr(self._cache, self.__class__.__name__.lower())\n</code></pre>"},{"location":"api_reference/ext/machine/#pokelance.ext.machine.Machine.fetch_machine","title":"<code>fetch_machine(id_)</code>  <code>async</code>","text":"<p>Fetches a machine from the API.</p> <p>Parameters:</p> Name Type Description Default <code>id_</code> <code>int</code> <p>The id of the machine.</p> required <p>Returns:</p> Type Description <code>Machine</code> <p>The machine if it exists in the API, else raises ResourceNotFound.</p> <p>Raises:</p> Type Description <code>ResourceNotFound</code> <p>If the machine does not exist in the API.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from pokelance import PokeLance\n&gt;&gt;&gt; import asyncio\n&gt;&gt;&gt; client = PokeLance()\n&gt;&gt;&gt; async def main() -&gt; None:\n...     machine = await client.machine.fetch_machine(1)\n...     print(machine.item.name)\n...     await client.close()\n&gt;&gt;&gt; asyncio.run(main())\ntm00\n</code></pre> Source code in <code>pokelance/ext/machine.py</code> Python<pre><code>async def fetch_machine(self, id_: int) -&gt; MachineModel:\n    \"\"\"Fetches a machine from the API.\n\n    Parameters\n    ----------\n    id_: int\n        The id of the machine.\n\n    Returns\n    -------\n    MachineModel\n        The machine if it exists in the API, else raises ResourceNotFound.\n\n    Raises\n    ------\n    pokelance.exceptions.ResourceNotFound\n        If the machine does not exist in the API.\n\n    Examples\n    --------\n\n    &gt;&gt;&gt; from pokelance import PokeLance\n    &gt;&gt;&gt; import asyncio\n    &gt;&gt;&gt; client = PokeLance()\n    &gt;&gt;&gt; async def main() -&gt; None:\n    ...     machine = await client.machine.fetch_machine(1)\n    ...     print(machine.item.name)\n    ...     await client.close()\n    &gt;&gt;&gt; asyncio.run(main())\n    tm00\n    \"\"\"\n    route = Endpoint.get_machine(id_)\n    self._validate_resource(self.cache.machine, id_, route)\n    data = await self._client.request(route)\n    return self.cache.machine.setdefault(route, MachineModel.from_payload(data))\n</code></pre>"},{"location":"api_reference/ext/machine/#pokelance.ext.machine.Machine.get_machine","title":"<code>get_machine(id_)</code>","text":"<p>Gets a machine from the cache.</p> <p>Parameters:</p> Name Type Description Default <code>id_</code> <code>int</code> <p>The id of the machine.</p> required <p>Returns:</p> Type Description <code>Optional[Machine]</code> <p>The machine if it exists in the cache, else None.</p> <p>Raises:</p> Type Description <code>ResourceNotFound</code> <p>If the machine does not exist in the cache.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from pokelance import PokeLance\n&gt;&gt;&gt; client = PokeLance()\n&gt;&gt;&gt; machine = client.machine.get_machine(1)\n&gt;&gt;&gt; machine.item.name\n'tm00'\n</code></pre> Source code in <code>pokelance/ext/machine.py</code> Python<pre><code>def get_machine(self, id_: int) -&gt; t.Optional[MachineModel]:\n    \"\"\"Gets a machine from the cache.\n\n    Parameters\n    ----------\n    id_: int\n        The id of the machine.\n\n    Returns\n    -------\n    typing.Optional[pokelance.models.Machine]\n        The machine if it exists in the cache, else None.\n\n    Raises\n    ------\n    pokelance.exceptions.ResourceNotFound\n        If the machine does not exist in the cache.\n\n    Examples\n    --------\n\n    &gt;&gt;&gt; from pokelance import PokeLance\n    &gt;&gt;&gt; client = PokeLance()\n    &gt;&gt;&gt; machine = client.machine.get_machine(1)\n    &gt;&gt;&gt; machine.item.name\n    'tm00'\n    \"\"\"\n    route = Endpoint.get_machine(id_)\n    self._validate_resource(self.cache.machine, id_, route)\n    return self.cache.machine.get(route, None)\n</code></pre>"},{"location":"api_reference/ext/machine/#pokelance.ext.machine.Machine.setup","title":"<code>setup()</code>  <code>async</code>","text":"<p>Sets up the extension.</p> Source code in <code>pokelance/ext/_base.py</code> Python<pre><code>async def setup(self) -&gt; None:\n    \"\"\"Sets up the extension.\"\"\"\n    for item in dir(self):\n        if item.startswith(\"fetch_\"):\n            data = await self._client.request(\n                t.cast(t.Callable[[], \"Route\"], getattr(Endpoint, f\"get_{item[6:]}_endpoints\"))()\n            )\n            self._cache.load_documents(str(self.__class__.__name__), item[6:], data[\"results\"])\n</code></pre>"},{"location":"api_reference/ext/machine/#pokelance.ext.machine.setup","title":"<code>setup(lance)</code>","text":"<p>Sets up the machine cog.</p> Source code in <code>pokelance/ext/machine.py</code> Python<pre><code>def setup(lance: \"PokeLance\") -&gt; None:\n    \"\"\"Sets up the machine cog.\"\"\"\n    lance.add_extension(\"machine\", Machine(lance.http))\n</code></pre>"},{"location":"api_reference/ext/move/","title":"move","text":""},{"location":"api_reference/ext/move/#pokelance.ext.move","title":"<code>pokelance.ext.move</code>","text":""},{"location":"api_reference/ext/move/#pokelance.ext.move.Move","title":"<code>Move(client)</code>","text":"<p>               Bases: <code>BaseExtension</code></p> <p>Extension for move related endpoints.</p> <p>Attributes:</p> Name Type Description <code>cache</code> <code>Move</code> <p>The cache for this extension.</p> <p>Initializes the extension.</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>HttpClient</code> <p>The client to use for requests.</p> required Source code in <code>pokelance/ext/_base.py</code> Python<pre><code>def __init__(self, client: \"HttpClient\") -&gt; None:\n    \"\"\"Initializes the extension.\n\n    Parameters\n    ----------\n    client: pokelance.http.HttpClient\n        The client to use for requests.\n    \"\"\"\n    self._client = client\n    self._cache = self._client.cache\n    self.cache = getattr(self._cache, self.__class__.__name__.lower())\n</code></pre>"},{"location":"api_reference/ext/move/#pokelance.ext.move.Move.fetch_move","title":"<code>fetch_move(name)</code>  <code>async</code>","text":"<p>Fetches a move from the API.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Union[str, int]</code> <p>The id of the move.</p> required <p>Returns:</p> Type Description <code>Move</code> <p>The move if it exists in the API, else raises ResourceNotFound.</p> <p>Raises:</p> Type Description <code>ResourceNotFound</code> <p>If the move does not exist in the API.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from pokelance import PokeLance\n&gt;&gt;&gt; import asyncio\n&gt;&gt;&gt; client = PokeLance()\n&gt;&gt;&gt; async def main() -&gt; None:\n...     move = await client.move.fetch_move(1)\n...     print(move.name)\n...     await client.close()\n&gt;&gt;&gt; asyncio.run(main())\npound\n</code></pre> Source code in <code>pokelance/ext/move.py</code> Python<pre><code>async def fetch_move(self, name: t.Union[str, int]) -&gt; MoveModel:\n    \"\"\"Fetches a move from the API.\n\n    Parameters\n    ----------\n    name: t.Union[str, int]\n        The id of the move.\n\n    Returns\n    -------\n    MoveModel\n        The move if it exists in the API, else raises ResourceNotFound.\n\n    Raises\n    ------\n    pokelance.exceptions.ResourceNotFound\n        If the move does not exist in the API.\n\n    Examples\n    --------\n\n    &gt;&gt;&gt; from pokelance import PokeLance\n    &gt;&gt;&gt; import asyncio\n    &gt;&gt;&gt; client = PokeLance()\n    &gt;&gt;&gt; async def main() -&gt; None:\n    ...     move = await client.move.fetch_move(1)\n    ...     print(move.name)\n    ...     await client.close()\n    &gt;&gt;&gt; asyncio.run(main())\n    pound\n    \"\"\"\n    route = Endpoint.get_move(name)\n    self._validate_resource(self.cache.move, name, route)\n    data = await self._client.request(route)\n    return self.cache.move.setdefault(route, MoveModel.from_payload(data))\n</code></pre>"},{"location":"api_reference/ext/move/#pokelance.ext.move.Move.fetch_move_ailment","title":"<code>fetch_move_ailment(name)</code>  <code>async</code>","text":"<p>Fetches a move ailment from the API.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Union[str, int]</code> <p>The id of the move ailment.</p> required <p>Returns:</p> Type Description <code>MoveAilment</code> <p>The move ailment if it exists in the API, else raises ResourceNotFound.</p> <p>Raises:</p> Type Description <code>ResourceNotFound</code> <p>If the move ailment does not exist in the API.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from pokelance import PokeLance\n&gt;&gt;&gt; import asyncio\n&gt;&gt;&gt; client = PokeLance()\n&gt;&gt;&gt; async def main() -&gt; None:\n...     ailment = await client.move.fetch_move_ailment(1)\n...     print(ailment.name)\n...     await client.close()\n&gt;&gt;&gt; asyncio.run(main())\nparalysis\n</code></pre> Source code in <code>pokelance/ext/move.py</code> Python<pre><code>async def fetch_move_ailment(self, name: t.Union[str, int]) -&gt; MoveAilment:\n    \"\"\"Fetches a move ailment from the API.\n\n    Parameters\n    ----------\n    name: t.Union[str, int]\n        The id of the move ailment.\n\n    Returns\n    -------\n    MoveAilment\n        The move ailment if it exists in the API, else raises ResourceNotFound.\n\n    Raises\n    ------\n    pokelance.exceptions.ResourceNotFound\n        If the move ailment does not exist in the API.\n\n    Examples\n    --------\n\n    &gt;&gt;&gt; from pokelance import PokeLance\n    &gt;&gt;&gt; import asyncio\n    &gt;&gt;&gt; client = PokeLance()\n    &gt;&gt;&gt; async def main() -&gt; None:\n    ...     ailment = await client.move.fetch_move_ailment(1)\n    ...     print(ailment.name)\n    ...     await client.close()\n    &gt;&gt;&gt; asyncio.run(main())\n    paralysis\n    \"\"\"\n    route = Endpoint.get_move_ailment(name)\n    self._validate_resource(self.cache.move_ailment, name, route)\n    data = await self._client.request(route)\n    return self.cache.move_ailment.setdefault(route, MoveAilment.from_payload(data))\n</code></pre>"},{"location":"api_reference/ext/move/#pokelance.ext.move.Move.fetch_move_battle_style","title":"<code>fetch_move_battle_style(name)</code>  <code>async</code>","text":"<p>Fetches a move battle style from the API.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Union[str, int]</code> <p>The id of the move battle style.</p> required <p>Returns:</p> Type Description <code>MoveBattleStyle</code> <p>The move battle style if it exists in the API, else raises ResourceNotFound.</p> <p>Raises:</p> Type Description <code>ResourceNotFound</code> <p>If the move battle style does not exist in the API.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from pokelance import PokeLance\n&gt;&gt;&gt; import asyncio\n&gt;&gt;&gt; client = PokeLance()\n&gt;&gt;&gt; async def main() -&gt; None:\n...     style = await client.move.fetch_move_battle_style(1)\n...     print(style.name)\n...     await client.close()\n&gt;&gt;&gt; asyncio.run(main())\nattack\n</code></pre> Source code in <code>pokelance/ext/move.py</code> Python<pre><code>async def fetch_move_battle_style(self, name: t.Union[str, int]) -&gt; MoveBattleStyle:\n    \"\"\"Fetches a move battle style from the API.\n\n    Parameters\n    ----------\n    name: t.Union[str, int]\n        The id of the move battle style.\n\n    Returns\n    -------\n    MoveBattleStyle\n        The move battle style if it exists in the API, else raises ResourceNotFound.\n\n    Raises\n    ------\n    pokelance.exceptions.ResourceNotFound\n        If the move battle style does not exist in the API.\n\n    Examples\n    --------\n\n    &gt;&gt;&gt; from pokelance import PokeLance\n    &gt;&gt;&gt; import asyncio\n    &gt;&gt;&gt; client = PokeLance()\n    &gt;&gt;&gt; async def main() -&gt; None:\n    ...     style = await client.move.fetch_move_battle_style(1)\n    ...     print(style.name)\n    ...     await client.close()\n    &gt;&gt;&gt; asyncio.run(main())\n    attack\n    \"\"\"\n    route = Endpoint.get_move_battle_style(name)\n    self._validate_resource(self.cache.move_battle_style, name, route)\n    data = await self._client.request(route)\n    return self.cache.move_battle_style.setdefault(route, MoveBattleStyle.from_payload(data))\n</code></pre>"},{"location":"api_reference/ext/move/#pokelance.ext.move.Move.fetch_move_category","title":"<code>fetch_move_category(name)</code>  <code>async</code>","text":"<p>Fetches a move category from the API.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Union[str, int]</code> <p>The id of the move category.</p> required <p>Returns:</p> Type Description <code>MoveCategory</code> <p>The move category if it exists in the API, else raises ResourceNotFound.</p> <p>Raises:</p> Type Description <code>ResourceNotFound</code> <p>If the move category does not exist in the API.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from pokelance import PokeLance\n&gt;&gt;&gt; import asyncio\n&gt;&gt;&gt; client = PokeLance()\n&gt;&gt;&gt; async def main() -&gt; None:\n...     category = await client.move.fetch_move_category(1)\n...     print(category.name)\n...     await client.close()\n&gt;&gt;&gt; asyncio.run(main())\nailment\n</code></pre> Source code in <code>pokelance/ext/move.py</code> Python<pre><code>async def fetch_move_category(self, name: t.Union[str, int]) -&gt; MoveCategory:\n    \"\"\"Fetches a move category from the API.\n\n    Parameters\n    ----------\n    name: t.Union[str, int]\n        The id of the move category.\n\n    Returns\n    -------\n    MoveCategory\n        The move category if it exists in the API, else raises ResourceNotFound.\n\n    Raises\n    ------\n    pokelance.exceptions.ResourceNotFound\n        If the move category does not exist in the API.\n\n    Examples\n    --------\n\n    &gt;&gt;&gt; from pokelance import PokeLance\n    &gt;&gt;&gt; import asyncio\n    &gt;&gt;&gt; client = PokeLance()\n    &gt;&gt;&gt; async def main() -&gt; None:\n    ...     category = await client.move.fetch_move_category(1)\n    ...     print(category.name)\n    ...     await client.close()\n    &gt;&gt;&gt; asyncio.run(main())\n    ailment\n    \"\"\"\n    route = Endpoint.get_move_category(name)\n    self._validate_resource(self.cache.move_category, name, route)\n    data = await self._client.request(route)\n    return self.cache.move_category.setdefault(route, MoveCategory.from_payload(data))\n</code></pre>"},{"location":"api_reference/ext/move/#pokelance.ext.move.Move.fetch_move_damage_class","title":"<code>fetch_move_damage_class(name)</code>  <code>async</code>","text":"<p>Fetches a move damage class from the API.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Union[str, int]</code> <p>The id of the move damage class.</p> required <p>Returns:</p> Type Description <code>MoveDamageClass</code> <p>The move damage class if it exists in the API, else raises ResourceNotFound.</p> <p>Raises:</p> Type Description <code>ResourceNotFound</code> <p>If the move damage class does not exist in the API.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from pokelance import PokeLance\n&gt;&gt;&gt; import asyncio\n&gt;&gt;&gt; client = PokeLance()\n&gt;&gt;&gt; async def main() -&gt; None:\n...     damage_class = await client.move.fetch_move_damage_class(1)\n...     print(damage_class.name)\n...     await client.close()\n&gt;&gt;&gt; asyncio.run(main())\nstatus\n</code></pre> Source code in <code>pokelance/ext/move.py</code> Python<pre><code>async def fetch_move_damage_class(self, name: t.Union[str, int]) -&gt; MoveDamageClass:\n    \"\"\"Fetches a move damage class from the API.\n\n    Parameters\n    ----------\n    name: t.Union[str, int]\n        The id of the move damage class.\n\n    Returns\n    -------\n    MoveDamageClass\n        The move damage class if it exists in the API, else raises ResourceNotFound.\n\n    Raises\n    ------\n    pokelance.exceptions.ResourceNotFound\n        If the move damage class does not exist in the API.\n\n    Examples\n    --------\n\n    &gt;&gt;&gt; from pokelance import PokeLance\n    &gt;&gt;&gt; import asyncio\n    &gt;&gt;&gt; client = PokeLance()\n    &gt;&gt;&gt; async def main() -&gt; None:\n    ...     damage_class = await client.move.fetch_move_damage_class(1)\n    ...     print(damage_class.name)\n    ...     await client.close()\n    &gt;&gt;&gt; asyncio.run(main())\n    status\n    \"\"\"\n    route = Endpoint.get_move_damage_class(name)\n    self._validate_resource(self.cache.move_damage_class, name, route)\n    data = await self._client.request(route)\n    return self.cache.move_damage_class.setdefault(route, MoveDamageClass.from_payload(data))\n</code></pre>"},{"location":"api_reference/ext/move/#pokelance.ext.move.Move.fetch_move_learn_method","title":"<code>fetch_move_learn_method(name)</code>  <code>async</code>","text":"<p>Fetches a move learn method from the API.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Union[str, int]</code> <p>The id of the move learn method.</p> required <p>Returns:</p> Type Description <code>MoveLearnMethod</code> <p>The move learn method if it exists in the API, else raises ResourceNotFound.</p> <p>Raises:</p> Type Description <code>ResourceNotFound</code> <p>If the move learn method does not exist in the API.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from pokelance import PokeLance\n&gt;&gt;&gt; import asyncio\n&gt;&gt;&gt; client = PokeLance()\n&gt;&gt;&gt; async def main() -&gt; None:\n...     learn_method = await client.move.fetch_move_learn_method(1)\n...     print(learn_method.name)\n...     await client.close()\n&gt;&gt;&gt; asyncio.run(main())\nlevel-up\n</code></pre> Source code in <code>pokelance/ext/move.py</code> Python<pre><code>async def fetch_move_learn_method(self, name: t.Union[str, int]) -&gt; MoveLearnMethod:\n    \"\"\"Fetches a move learn method from the API.\n\n    Parameters\n    ----------\n    name: t.Union[str, int]\n        The id of the move learn method.\n\n    Returns\n    -------\n    MoveLearnMethod\n        The move learn method if it exists in the API, else raises ResourceNotFound.\n\n    Raises\n    ------\n    pokelance.exceptions.ResourceNotFound\n        If the move learn method does not exist in the API.\n\n    Examples\n    --------\n\n    &gt;&gt;&gt; from pokelance import PokeLance\n    &gt;&gt;&gt; import asyncio\n    &gt;&gt;&gt; client = PokeLance()\n    &gt;&gt;&gt; async def main() -&gt; None:\n    ...     learn_method = await client.move.fetch_move_learn_method(1)\n    ...     print(learn_method.name)\n    ...     await client.close()\n    &gt;&gt;&gt; asyncio.run(main())\n    level-up\n    \"\"\"\n    route = Endpoint.get_move_learn_method(name)\n    self._validate_resource(self.cache.move_learn_method, name, route)\n    data = await self._client.request(route)\n    return self.cache.move_learn_method.setdefault(route, MoveLearnMethod.from_payload(data))\n</code></pre>"},{"location":"api_reference/ext/move/#pokelance.ext.move.Move.fetch_move_target","title":"<code>fetch_move_target(name)</code>  <code>async</code>","text":"<p>Fetches a move target from the API.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Union[str, int]</code> <p>The id of the move target.</p> required <p>Returns:</p> Type Description <code>MoveTarget</code> <p>The move target if it exists in the API, else raises ResourceNotFound.</p> <p>Raises:</p> Type Description <code>ResourceNotFound</code> <p>If the move target does not exist in the API.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from pokelance import PokeLance\n&gt;&gt;&gt; import asyncio\n&gt;&gt;&gt; client = PokeLance()\n&gt;&gt;&gt; async def main() -&gt; None:\n...     target = await client.move.fetch_move_target(1)\n...     print(target.name)\n...     await client.close()\n&gt;&gt;&gt; asyncio.run(main())\nspecific-pokemon\n</code></pre> Source code in <code>pokelance/ext/move.py</code> Python<pre><code>async def fetch_move_target(self, name: t.Union[str, int]) -&gt; MoveTarget:\n    \"\"\"Fetches a move target from the API.\n\n    Parameters\n    ----------\n    name: t.Union[str, int]\n        The id of the move target.\n\n    Returns\n    -------\n    MoveTarget\n        The move target if it exists in the API, else raises ResourceNotFound.\n\n    Raises\n    ------\n    pokelance.exceptions.ResourceNotFound\n        If the move target does not exist in the API.\n\n    Examples\n    --------\n\n    &gt;&gt;&gt; from pokelance import PokeLance\n    &gt;&gt;&gt; import asyncio\n    &gt;&gt;&gt; client = PokeLance()\n    &gt;&gt;&gt; async def main() -&gt; None:\n    ...     target = await client.move.fetch_move_target(1)\n    ...     print(target.name)\n    ...     await client.close()\n    &gt;&gt;&gt; asyncio.run(main())\n    specific-pokemon\n    \"\"\"\n    route = Endpoint.get_move_target(name)\n    self._validate_resource(self.cache.move_target, name, route)\n    data = await self._client.request(route)\n    return self.cache.move_target.setdefault(route, MoveTarget.from_payload(data))\n</code></pre>"},{"location":"api_reference/ext/move/#pokelance.ext.move.Move.get_move","title":"<code>get_move(name)</code>","text":"<p>Gets a move from the cache.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Union[str, int]</code> <p>The id of the move.</p> required <p>Returns:</p> Type Description <code>Optional[Move]</code> <p>The move if it exists in the cache, else None.</p> <p>Raises:</p> Type Description <code>ResourceNotFound</code> <p>If the move does not exist in the cache.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from pokelance import PokeLance\n&gt;&gt;&gt; client = PokeLance()\n&gt;&gt;&gt; move = client.move.get_move(1)\n&gt;&gt;&gt; move.name\n'pound'\n</code></pre> Source code in <code>pokelance/ext/move.py</code> Python<pre><code>def get_move(self, name: t.Union[str, int]) -&gt; t.Optional[MoveModel]:\n    \"\"\"Gets a move from the cache.\n\n    Parameters\n    ----------\n    name: t.Union[str, int]\n        The id of the move.\n\n    Returns\n    -------\n    typing.Optional[pokelance.models.Move]\n        The move if it exists in the cache, else None.\n\n    Raises\n    ------\n    pokelance.exceptions.ResourceNotFound\n        If the move does not exist in the cache.\n\n    Examples\n    --------\n\n    &gt;&gt;&gt; from pokelance import PokeLance\n    &gt;&gt;&gt; client = PokeLance()\n    &gt;&gt;&gt; move = client.move.get_move(1)\n    &gt;&gt;&gt; move.name\n    'pound'\n    \"\"\"\n    route = Endpoint.get_move(name)\n    self._validate_resource(self.cache.move, name, route)\n    return self.cache.move.get(route, None)\n</code></pre>"},{"location":"api_reference/ext/move/#pokelance.ext.move.Move.get_move_ailment","title":"<code>get_move_ailment(name)</code>","text":"<p>Gets a move ailment from the cache.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Union[str, int]</code> <p>The id of the move ailment.</p> required <p>Returns:</p> Type Description <code>Optional[MoveAilment]</code> <p>The move ailment if it exists in the cache, else None.</p> <p>Raises:</p> Type Description <code>ResourceNotFound</code> <p>If the move ailment does not exist in the cache.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from pokelance import PokeLance\n&gt;&gt;&gt; client = PokeLance()\n&gt;&gt;&gt; ailment = client.move.get_move_ailment(1)\n&gt;&gt;&gt; ailment.name\n'paralysis'\n</code></pre> Source code in <code>pokelance/ext/move.py</code> Python<pre><code>def get_move_ailment(self, name: t.Union[str, int]) -&gt; t.Optional[MoveAilment]:\n    \"\"\"Gets a move ailment from the cache.\n\n    Parameters\n    ----------\n    name: t.Union[str, int]\n        The id of the move ailment.\n\n    Returns\n    -------\n    typing.Optional[pokelance.models.MoveAilment]\n        The move ailment if it exists in the cache, else None.\n\n    Raises\n    ------\n    pokelance.exceptions.ResourceNotFound\n        If the move ailment does not exist in the cache.\n\n    Examples\n    --------\n\n    &gt;&gt;&gt; from pokelance import PokeLance\n    &gt;&gt;&gt; client = PokeLance()\n    &gt;&gt;&gt; ailment = client.move.get_move_ailment(1)\n    &gt;&gt;&gt; ailment.name\n    'paralysis'\n    \"\"\"\n    route = Endpoint.get_move_ailment(name)\n    self._validate_resource(self.cache.move_ailment, name, route)\n    return self.cache.move_ailment.get(route, None)\n</code></pre>"},{"location":"api_reference/ext/move/#pokelance.ext.move.Move.get_move_battle_style","title":"<code>get_move_battle_style(name)</code>","text":"<p>Gets a move battle style from the cache.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Union[str, int]</code> <p>The id of the move battle style.</p> required <p>Returns:</p> Type Description <code>Optional[MoveBattleStyle]</code> <p>The move battle style if it exists in the cache, else None.</p> <p>Raises:</p> Type Description <code>ResourceNotFound</code> <p>If the move battle style does not exist in the cache.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from pokelance import PokeLance\n&gt;&gt;&gt; client = PokeLance()\n&gt;&gt;&gt; style = client.move.get_move_battle_style(1)\n&gt;&gt;&gt; style.name\n'attack'\n</code></pre> Source code in <code>pokelance/ext/move.py</code> Python<pre><code>def get_move_battle_style(self, name: t.Union[str, int]) -&gt; t.Optional[MoveBattleStyle]:\n    \"\"\"Gets a move battle style from the cache.\n\n    Parameters\n    ----------\n    name: t.Union[str, int]\n        The id of the move battle style.\n\n    Returns\n    -------\n    typing.Optional[pokelance.models.MoveBattleStyle]\n        The move battle style if it exists in the cache, else None.\n\n    Raises\n    ------\n    pokelance.exceptions.ResourceNotFound\n        If the move battle style does not exist in the cache.\n\n    Examples\n    --------\n\n    &gt;&gt;&gt; from pokelance import PokeLance\n    &gt;&gt;&gt; client = PokeLance()\n    &gt;&gt;&gt; style = client.move.get_move_battle_style(1)\n    &gt;&gt;&gt; style.name\n    'attack'\n    \"\"\"\n    route = Endpoint.get_move_battle_style(name)\n    self._validate_resource(self.cache.move_battle_style, name, route)\n    return self.cache.move_battle_style.get(route, None)\n</code></pre>"},{"location":"api_reference/ext/move/#pokelance.ext.move.Move.get_move_category","title":"<code>get_move_category(name)</code>","text":"<p>Gets a move category from the cache.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Union[str, int]</code> <p>The id of the move category.</p> required <p>Returns:</p> Type Description <code>Optional[MoveCategory]</code> <p>The move category if it exists in the cache, else None.</p> <p>Raises:</p> Type Description <code>ResourceNotFound</code> <p>If the move category does not exist in the cache.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from pokelance import PokeLance\n&gt;&gt;&gt; client = PokeLance()\n&gt;&gt;&gt; category = client.move.get_move_category(1)\n&gt;&gt;&gt; category.name\n'ailment'\n</code></pre> Source code in <code>pokelance/ext/move.py</code> Python<pre><code>def get_move_category(self, name: t.Union[str, int]) -&gt; t.Optional[MoveCategory]:\n    \"\"\"Gets a move category from the cache.\n\n    Parameters\n    ----------\n    name: t.Union[str, int]\n        The id of the move category.\n\n    Returns\n    -------\n    typing.Optional[pokelance.models.MoveCategory]\n        The move category if it exists in the cache, else None.\n\n    Raises\n    ------\n    pokelance.exceptions.ResourceNotFound\n        If the move category does not exist in the cache.\n\n    Examples\n    --------\n\n    &gt;&gt;&gt; from pokelance import PokeLance\n    &gt;&gt;&gt; client = PokeLance()\n    &gt;&gt;&gt; category = client.move.get_move_category(1)\n    &gt;&gt;&gt; category.name\n    'ailment'\n    \"\"\"\n    route = Endpoint.get_move_category(name)\n    self._validate_resource(self.cache.move_category, name, route)\n    return self.cache.move_category.get(route, None)\n</code></pre>"},{"location":"api_reference/ext/move/#pokelance.ext.move.Move.get_move_damage_class","title":"<code>get_move_damage_class(name)</code>","text":"<p>Gets a move damage class from the cache.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Union[str, int]</code> <p>The id of the move damage class.</p> required <p>Returns:</p> Type Description <code>Optional[MoveDamageClass]</code> <p>The move damage class if it exists in the cache, else None.</p> <p>Raises:</p> Type Description <code>ResourceNotFound</code> <p>If the move damage class does not exist in the cache.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from pokelance import PokeLance\n&gt;&gt;&gt; client = PokeLance()\n&gt;&gt;&gt; damage_class = client.move.get_move_damage_class(1)\n&gt;&gt;&gt; damage_class.name\n'status'\n</code></pre> Source code in <code>pokelance/ext/move.py</code> Python<pre><code>def get_move_damage_class(self, name: t.Union[str, int]) -&gt; t.Optional[MoveDamageClass]:\n    \"\"\"Gets a move damage class from the cache.\n\n    Parameters\n    ----------\n    name: t.Union[str, int]\n        The id of the move damage class.\n\n    Returns\n    -------\n    typing.Optional[pokelance.models.MoveDamageClass]\n        The move damage class if it exists in the cache, else None.\n\n    Raises\n    ------\n    pokelance.exceptions.ResourceNotFound\n        If the move damage class does not exist in the cache.\n\n    Examples\n    --------\n\n    &gt;&gt;&gt; from pokelance import PokeLance\n    &gt;&gt;&gt; client = PokeLance()\n    &gt;&gt;&gt; damage_class = client.move.get_move_damage_class(1)\n    &gt;&gt;&gt; damage_class.name\n    'status'\n    \"\"\"\n    route = Endpoint.get_move_damage_class(name)\n    self._validate_resource(self.cache.move_damage_class, name, route)\n    return self.cache.move_damage_class.get(route, None)\n</code></pre>"},{"location":"api_reference/ext/move/#pokelance.ext.move.Move.get_move_learn_method","title":"<code>get_move_learn_method(name)</code>","text":"<p>Gets a move learn method from the cache.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Union[str, int]</code> <p>The id of the move learn method.</p> required <p>Returns:</p> Type Description <code>Optional[MoveLearnMethod]</code> <p>The move learn method if it exists in the cache, else None.</p> <p>Raises:</p> Type Description <code>ResourceNotFound</code> <p>If the move learn method does not exist in the cache.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from pokelance import PokeLance\n&gt;&gt;&gt; client = PokeLance()\n&gt;&gt;&gt; learn_method = client.move.get_move_learn_method(1)\n&gt;&gt;&gt; learn_method.name\n'level-up'\n</code></pre> Source code in <code>pokelance/ext/move.py</code> Python<pre><code>def get_move_learn_method(self, name: t.Union[str, int]) -&gt; t.Optional[MoveLearnMethod]:\n    \"\"\"Gets a move learn method from the cache.\n\n    Parameters\n    ----------\n    name: t.Union[str, int]\n        The id of the move learn method.\n\n    Returns\n    -------\n    typing.Optional[pokelance.models.MoveLearnMethod]\n        The move learn method if it exists in the cache, else None.\n\n    Raises\n    ------\n    pokelance.exceptions.ResourceNotFound\n        If the move learn method does not exist in the cache.\n\n    Examples\n    --------\n\n    &gt;&gt;&gt; from pokelance import PokeLance\n    &gt;&gt;&gt; client = PokeLance()\n    &gt;&gt;&gt; learn_method = client.move.get_move_learn_method(1)\n    &gt;&gt;&gt; learn_method.name\n    'level-up'\n    \"\"\"\n    route = Endpoint.get_move_learn_method(name)\n    self._validate_resource(self.cache.move_learn_method, name, route)\n    return self.cache.move_learn_method.get(route, None)\n</code></pre>"},{"location":"api_reference/ext/move/#pokelance.ext.move.Move.get_move_target","title":"<code>get_move_target(name)</code>","text":"<p>Gets a move target from the cache.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Union[str, int]</code> <p>The id of the move target.</p> required <p>Returns:</p> Type Description <code>Optional[MoveTarget]</code> <p>The move target if it exists in the cache, else None.</p> <p>Raises:</p> Type Description <code>ResourceNotFound</code> <p>If the move target does not exist in the cache.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from pokelance import PokeLance\n&gt;&gt;&gt; client = PokeLance()\n&gt;&gt;&gt; target = client.move.get_move_target(1)\n&gt;&gt;&gt; target.name\n'specific-pokemon'\n</code></pre> Source code in <code>pokelance/ext/move.py</code> Python<pre><code>def get_move_target(self, name: t.Union[str, int]) -&gt; t.Optional[MoveTarget]:\n    \"\"\"Gets a move target from the cache.\n\n    Parameters\n    ----------\n    name: t.Union[str, int]\n        The id of the move target.\n\n    Returns\n    -------\n    typing.Optional[pokelance.models.MoveTarget]\n        The move target if it exists in the cache, else None.\n\n    Raises\n    ------\n    pokelance.exceptions.ResourceNotFound\n        If the move target does not exist in the cache.\n\n    Examples\n    --------\n\n    &gt;&gt;&gt; from pokelance import PokeLance\n    &gt;&gt;&gt; client = PokeLance()\n    &gt;&gt;&gt; target = client.move.get_move_target(1)\n    &gt;&gt;&gt; target.name\n    'specific-pokemon'\n    \"\"\"\n    route = Endpoint.get_move_target(name)\n    self._validate_resource(self.cache.move_target, name, route)\n    return self.cache.move_target.get(route, None)\n</code></pre>"},{"location":"api_reference/ext/move/#pokelance.ext.move.Move.setup","title":"<code>setup()</code>  <code>async</code>","text":"<p>Sets up the extension.</p> Source code in <code>pokelance/ext/_base.py</code> Python<pre><code>async def setup(self) -&gt; None:\n    \"\"\"Sets up the extension.\"\"\"\n    for item in dir(self):\n        if item.startswith(\"fetch_\"):\n            data = await self._client.request(\n                t.cast(t.Callable[[], \"Route\"], getattr(Endpoint, f\"get_{item[6:]}_endpoints\"))()\n            )\n            self._cache.load_documents(str(self.__class__.__name__), item[6:], data[\"results\"])\n</code></pre>"},{"location":"api_reference/ext/move/#pokelance.ext.move.setup","title":"<code>setup(lance)</code>","text":"<p>Sets up the move cog.</p> Source code in <code>pokelance/ext/move.py</code> Python<pre><code>def setup(lance: \"PokeLance\") -&gt; None:\n    \"\"\"Sets up the move cog.\"\"\"\n    lance.add_extension(\"move\", Move(lance.http))\n</code></pre>"},{"location":"api_reference/ext/pokemon/","title":"pokemon","text":""},{"location":"api_reference/ext/pokemon/#pokelance.ext.pokemon","title":"<code>pokelance.ext.pokemon</code>","text":""},{"location":"api_reference/ext/pokemon/#pokelance.ext.pokemon.Pokemon","title":"<code>Pokemon(client)</code>","text":"<p>               Bases: <code>BaseExtension</code></p> <p>Extension for pokemon related endpoints.</p> <p>Attributes:</p> Name Type Description <code>cache</code> <code>Pokemon</code> <p>The cache for this extension.</p> <p>Initializes the extension.</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>HttpClient</code> <p>The client to use for requests.</p> required Source code in <code>pokelance/ext/_base.py</code> Python<pre><code>def __init__(self, client: \"HttpClient\") -&gt; None:\n    \"\"\"Initializes the extension.\n\n    Parameters\n    ----------\n    client: pokelance.http.HttpClient\n        The client to use for requests.\n    \"\"\"\n    self._client = client\n    self._cache = self._client.cache\n    self.cache = getattr(self._cache, self.__class__.__name__.lower())\n</code></pre>"},{"location":"api_reference/ext/pokemon/#pokelance.ext.pokemon.Pokemon.all_pokemons","title":"<code>all_pokemons: t.Optional[t.List[str]]</code>  <code>property</code>","text":"<p>Returns a list of all pokemon names.</p> <p>Returns:</p> Type Description <code>Optional[List[str]]</code> <p>List of all pokemon names. None if not cached yet.</p>"},{"location":"api_reference/ext/pokemon/#pokelance.ext.pokemon.Pokemon.fetch_ability","title":"<code>fetch_ability(name)</code>  <code>async</code>","text":"<p>Fetch an ability by name or id.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Union[str, int]</code> <p>The name or id of the ability.</p> required <p>Returns:</p> Type Description <code>Ability</code> <p>The ability if found, else raises ResourceNotFound.</p> <p>Raises:</p> Type Description <code>ResourceNotFound</code> <p>If the ability was not found.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from pokelance import PokeLance\n&gt;&gt;&gt; import asyncio\n&gt;&gt;&gt; client = PokeLance()\n&gt;&gt;&gt; async def main() -&gt; None:\n...     ability = await client.pokemon.fetch_ability(\"stench\")\n...     print(ability.id)\n...     await client.close()\n&gt;&gt;&gt; asyncio.run(main())\n1\n</code></pre> Source code in <code>pokelance/ext/pokemon.py</code> Python<pre><code>async def fetch_ability(self, name: t.Union[str, int]) -&gt; Ability:\n    \"\"\"Fetch an ability by name or id.\n\n    Parameters\n    ----------\n    name: Union[str, int]\n        The name or id of the ability.\n\n    Returns\n    -------\n    Ability\n        The ability if found, else raises ResourceNotFound.\n\n    Raises\n    ------\n    pokelance.exceptions.ResourceNotFound\n        If the ability was not found.\n\n    Examples\n    --------\n\n    &gt;&gt;&gt; from pokelance import PokeLance\n    &gt;&gt;&gt; import asyncio\n    &gt;&gt;&gt; client = PokeLance()\n    &gt;&gt;&gt; async def main() -&gt; None:\n    ...     ability = await client.pokemon.fetch_ability(\"stench\")\n    ...     print(ability.id)\n    ...     await client.close()\n    &gt;&gt;&gt; asyncio.run(main())\n    1\n    \"\"\"\n    route = Endpoint.get_ability(name)\n    self._validate_resource(self.cache.ability, name, route)\n    data = await self._client.request(route)\n    return self.cache.ability.setdefault(route, Ability.from_payload(data))\n</code></pre>"},{"location":"api_reference/ext/pokemon/#pokelance.ext.pokemon.Pokemon.fetch_characteristic","title":"<code>fetch_characteristic(id_)</code>  <code>async</code>","text":"<p>Fetch a characteristic by id.</p> <p>Parameters:</p> Name Type Description Default <code>id_</code> <code>int</code> <p>The id of the characteristic.</p> required <p>Returns:</p> Type Description <code>Characteristic</code> <p>The characteristic if found, else raises ResourceNotFound.</p> <p>Raises:</p> Type Description <code>ResourceNotFound</code> <p>If the characteristic was not found.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from pokelance import PokeLance\n&gt;&gt;&gt; import asyncio\n&gt;&gt;&gt; client = PokeLance()\n&gt;&gt;&gt; async def main() -&gt; None:\n...     characteristic = await client.pokemon.fetch_characteristic(1)\n...     print(characteristic.gene_modulo)\n...     await client.close()\n&gt;&gt;&gt; asyncio.run(main())\n0\n</code></pre> Source code in <code>pokelance/ext/pokemon.py</code> Python<pre><code>async def fetch_characteristic(self, id_: int) -&gt; Characteristic:\n    \"\"\"Fetch a characteristic by id.\n\n    Parameters\n    ----------\n    id_: int\n        The id of the characteristic.\n\n    Returns\n    -------\n    Characteristic\n        The characteristic if found, else raises ResourceNotFound.\n\n    Raises\n    ------\n    pokelance.exceptions.ResourceNotFound\n        If the characteristic was not found.\n\n    Examples\n    --------\n\n    &gt;&gt;&gt; from pokelance import PokeLance\n    &gt;&gt;&gt; import asyncio\n    &gt;&gt;&gt; client = PokeLance()\n    &gt;&gt;&gt; async def main() -&gt; None:\n    ...     characteristic = await client.pokemon.fetch_characteristic(1)\n    ...     print(characteristic.gene_modulo)\n    ...     await client.close()\n    &gt;&gt;&gt; asyncio.run(main())\n    0\n    \"\"\"\n    route = Endpoint.get_characteristic(id_)\n    self._validate_resource(self.cache.characteristic, id_, route)\n    data = await self._client.request(route)\n    return self.cache.characteristic.setdefault(route, Characteristic.from_payload(data))\n</code></pre>"},{"location":"api_reference/ext/pokemon/#pokelance.ext.pokemon.Pokemon.fetch_egg_group","title":"<code>fetch_egg_group(name)</code>  <code>async</code>","text":"<p>Fetch an egg group by name or id.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Union[str, int]</code> <p>The name or id of the egg group.</p> required <p>Returns:</p> Type Description <code>EggGroup</code> <p>The egg group if found, else raises ResourceNotFound.</p> <p>Raises:</p> Type Description <code>ResourceNotFound</code> <p>If the egg group was not found.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from pokelance import PokeLance\n&gt;&gt;&gt; import asyncio\n&gt;&gt;&gt; client = PokeLance()\n&gt;&gt;&gt; async def main() -&gt; None:\n...     egg_group = await client.pokemon.fetch_egg_group(\"monster\")\n...     print(egg_group.id)\n...     await client.close()\n&gt;&gt;&gt; asyncio.run(main())\n1\n</code></pre> Source code in <code>pokelance/ext/pokemon.py</code> Python<pre><code>async def fetch_egg_group(self, name: t.Union[str, int]) -&gt; EggGroup:\n    \"\"\"Fetch an egg group by name or id.\n\n    Parameters\n    ----------\n    name: Union[str, int]\n        The name or id of the egg group.\n\n    Returns\n    -------\n    EggGroup\n        The egg group if found, else raises ResourceNotFound.\n\n    Raises\n    ------\n    pokelance.exceptions.ResourceNotFound\n        If the egg group was not found.\n\n    Examples\n    --------\n\n    &gt;&gt;&gt; from pokelance import PokeLance\n    &gt;&gt;&gt; import asyncio\n    &gt;&gt;&gt; client = PokeLance()\n    &gt;&gt;&gt; async def main() -&gt; None:\n    ...     egg_group = await client.pokemon.fetch_egg_group(\"monster\")\n    ...     print(egg_group.id)\n    ...     await client.close()\n    &gt;&gt;&gt; asyncio.run(main())\n    1\n    \"\"\"\n    route = Endpoint.get_egg_group(name)\n    self._validate_resource(self.cache.egg_group, name, route)\n    data = await self._client.request(route)\n    return self.cache.egg_group.setdefault(route, EggGroup.from_payload(data))\n</code></pre>"},{"location":"api_reference/ext/pokemon/#pokelance.ext.pokemon.Pokemon.fetch_gender","title":"<code>fetch_gender(name)</code>  <code>async</code>","text":"<p>Fetches a gender model by name or id.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Union[str, int]</code> <p>The name or id of the</p> required <p>Returns:</p> Type Description <code>Gender</code> <p>Gender model if found, else raises ResourceNotFound.</p> <p>Raises:</p> Type Description <code>ResourceNotFound</code> <p>if gender was not found.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from pokelance import PokeLance\n&gt;&gt;&gt; import asyncio\n&gt;&gt;&gt; client = PokeLance()\n&gt;&gt;&gt; async def main() -&gt; None:\n...    gender = await client.pokemon.fetch_gender(1)\n...    print(gender.name)\n...    await client.close()\n&gt;&gt;&gt; asyncio.run(main())\nfemale\n</code></pre> Source code in <code>pokelance/ext/pokemon.py</code> Python<pre><code>async def fetch_gender(self, name: t.Union[str, int]) -&gt; Gender:\n    \"\"\"\n    Fetches a gender model by name or id.\n\n    Parameters\n    ----------\n    name: Union[str, int]\n        The name or id of the\n\n    Returns\n    -------\n    Gender\n        Gender model if found, else raises ResourceNotFound.\n\n    Raises\n    ------\n    pokelance.exceptions.ResourceNotFound\n        if gender was not found.\n\n    Examples\n    --------\n\n    &gt;&gt;&gt; from pokelance import PokeLance\n    &gt;&gt;&gt; import asyncio\n    &gt;&gt;&gt; client = PokeLance()\n    &gt;&gt;&gt; async def main() -&gt; None:\n    ...    gender = await client.pokemon.fetch_gender(1)\n    ...    print(gender.name)\n    ...    await client.close()\n    &gt;&gt;&gt; asyncio.run(main())\n    female\n    \"\"\"\n    route = Endpoint.get_gender(name)\n    self._validate_resource(self.cache.gender, name, route)\n    data = await self._client.request(route)\n    return self.cache.gender.setdefault(route, Gender.from_payload(data))\n</code></pre>"},{"location":"api_reference/ext/pokemon/#pokelance.ext.pokemon.Pokemon.fetch_growth_rate","title":"<code>fetch_growth_rate(name)</code>  <code>async</code>","text":"<p>Fetches a growth rate model by name or id.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Union[str, int]</code> <p>The name or id of the</p> required <p>Returns:</p> Type Description <code>GrowthRate</code> <p>Growth rate model if found, else raises ResourceNotFound.</p> <p>Raises:</p> Type Description <code>ResourceNotFound</code> <p>if growth rate was not found.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from pokelance import PokeLance\n&gt;&gt;&gt; import asyncio\n&gt;&gt;&gt; client = PokeLance()\n&gt;&gt;&gt; async def main() -&gt; None:\n...    growth_rate = await client.pokemon.fetch_growth_rate(1)\n...    print(growth_rate.name)\n...    await client.close()\n&gt;&gt;&gt; asyncio.run(main())\nslow\n</code></pre> Source code in <code>pokelance/ext/pokemon.py</code> Python<pre><code>async def fetch_growth_rate(self, name: t.Union[str, int]) -&gt; GrowthRate:\n    \"\"\"\n    Fetches a growth rate model by name or id.\n\n    Parameters\n    ----------\n    name: Union[str, int]\n        The name or id of the\n\n    Returns\n    -------\n    GrowthRate\n        Growth rate model if found, else raises ResourceNotFound.\n\n    Raises\n    ------\n    pokelance.exceptions.ResourceNotFound\n        if growth rate was not found.\n\n    Examples\n    --------\n\n    &gt;&gt;&gt; from pokelance import PokeLance\n    &gt;&gt;&gt; import asyncio\n    &gt;&gt;&gt; client = PokeLance()\n    &gt;&gt;&gt; async def main() -&gt; None:\n    ...    growth_rate = await client.pokemon.fetch_growth_rate(1)\n    ...    print(growth_rate.name)\n    ...    await client.close()\n    &gt;&gt;&gt; asyncio.run(main())\n    slow\n    \"\"\"\n    route = Endpoint.get_growth_rate(name)\n    self._validate_resource(self.cache.growth_rate, name, route)\n    data = await self._client.request(route)\n    return self.cache.growth_rate.setdefault(route, GrowthRate.from_payload(data))\n</code></pre>"},{"location":"api_reference/ext/pokemon/#pokelance.ext.pokemon.Pokemon.fetch_location_area_encounter","title":"<code>fetch_location_area_encounter(name)</code>  <code>async</code>","text":"<p>Fetches a location area encounter model by name or id.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Union[str, int]</code> <p>The name or id of the</p> required <p>Returns:</p> Type Description <code>LocationAreaEncounter</code> <p>Location area encounter model if found, else raises ResourceNotFound.</p> <p>Raises:</p> Type Description <code>ResourceNotFound</code> <p>if location area encounter was not found.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from pokelance import PokeLance\n&gt;&gt;&gt; import asyncio\n&gt;&gt;&gt; client = PokeLance()\n&gt;&gt;&gt; async def main() -&gt; None:\n...    location_area_encounter = await client.pokemon.fetch_location_area_encounter(1)\n...    print(location_area_encounter.location_area.name)\n...    await client.close()\n&gt;&gt;&gt; asyncio.run(main())\ncerulean-city-area\n</code></pre> Source code in <code>pokelance/ext/pokemon.py</code> Python<pre><code>async def fetch_location_area_encounter(self, name: t.Union[str, int]) -&gt; LocationAreaEncounter:\n    \"\"\"\n    Fetches a location area encounter model by name or id.\n\n    Parameters\n    ----------\n    name: Union[str, int]\n        The name or id of the\n\n    Returns\n    -------\n    LocationAreaEncounter\n        Location area encounter model if found, else raises ResourceNotFound.\n\n    Raises\n    ------\n    pokelance.exceptions.ResourceNotFound\n        if location area encounter was not found.\n\n    Examples\n    --------\n\n    &gt;&gt;&gt; from pokelance import PokeLance\n    &gt;&gt;&gt; import asyncio\n    &gt;&gt;&gt; client = PokeLance()\n    &gt;&gt;&gt; async def main() -&gt; None:\n    ...    location_area_encounter = await client.pokemon.fetch_location_area_encounter(1)\n    ...    print(location_area_encounter.location_area.name)\n    ...    await client.close()\n    &gt;&gt;&gt; asyncio.run(main())\n    cerulean-city-area\n    \"\"\"\n    route = Endpoint.get_location_area_encounter(name)\n    self._validate_resource(self.cache.location_area_encounter, name, route)\n    data = await self._client.request(route)\n    return self.cache.location_area_encounter.setdefault(route, LocationAreaEncounter.from_payload(data[0]))\n</code></pre>"},{"location":"api_reference/ext/pokemon/#pokelance.ext.pokemon.Pokemon.fetch_nature","title":"<code>fetch_nature(name)</code>  <code>async</code>","text":"<p>Fetches a nature model by name or id.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Union[str, int]</code> <p>The name or id of the</p> required <p>Returns:</p> Type Description <code>Nature</code> <p>Nature model if found, else raises ResourceNotFound.</p> <p>Raises:</p> Type Description <code>ResourceNotFound</code> <p>if nature was not found.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from pokelance import PokeLance\n&gt;&gt;&gt; import asyncio\n&gt;&gt;&gt; client = PokeLance()\n&gt;&gt;&gt; async def main() -&gt; None:\n...    nature = await client.pokemon.fetch_nature(1)\n...    print(nature.name)\n...    await client.close()\n&gt;&gt;&gt; asyncio.run(main())\nhardy\n</code></pre> Source code in <code>pokelance/ext/pokemon.py</code> Python<pre><code>async def fetch_nature(self, name: t.Union[str, int]) -&gt; Nature:\n    \"\"\"\n    Fetches a nature model by name or id.\n\n    Parameters\n    ----------\n    name: Union[str, int]\n        The name or id of the\n\n    Returns\n    -------\n    Nature\n        Nature model if found, else raises ResourceNotFound.\n\n    Raises\n    ------\n    pokelance.exceptions.ResourceNotFound\n        if nature was not found.\n\n    Examples\n    --------\n\n    &gt;&gt;&gt; from pokelance import PokeLance\n    &gt;&gt;&gt; import asyncio\n    &gt;&gt;&gt; client = PokeLance()\n    &gt;&gt;&gt; async def main() -&gt; None:\n    ...    nature = await client.pokemon.fetch_nature(1)\n    ...    print(nature.name)\n    ...    await client.close()\n    &gt;&gt;&gt; asyncio.run(main())\n    hardy\n    \"\"\"\n    route = Endpoint.get_nature(name)\n    self._validate_resource(self.cache.nature, name, route)\n    data = await self._client.request(route)\n    return self.cache.nature.setdefault(route, Nature.from_payload(data))\n</code></pre>"},{"location":"api_reference/ext/pokemon/#pokelance.ext.pokemon.Pokemon.fetch_pokeathlon_stat","title":"<code>fetch_pokeathlon_stat(name)</code>  <code>async</code>","text":"<p>Fetches a pokeathlon stat model by name or id.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Union[str, int]</code> <p>The name or id of the</p> required <p>Returns:</p> Type Description <code>PokeathlonStat</code> <p>Pokeathlon stat model if found, else raises ResourceNotFound.</p> <p>Raises:</p> Type Description <code>ResourceNotFound</code> <p>if pokeathlon stat was not found.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from pokelance import PokeLance\n&gt;&gt;&gt; import asyncio\n&gt;&gt;&gt; client = PokeLance()\n&gt;&gt;&gt; async def main() -&gt; None:\n...    pokeathlon_stat = await client.pokemon.fetch_pokeathlon_stat(1)\n...    print(pokeathlon_stat.name)\n...    await client.close()\n&gt;&gt;&gt; asyncio.run(main())\nspeed\n</code></pre> Source code in <code>pokelance/ext/pokemon.py</code> Python<pre><code>async def fetch_pokeathlon_stat(self, name: t.Union[str, int]) -&gt; PokeathlonStat:\n    \"\"\"\n    Fetches a pokeathlon stat model by name or id.\n\n    Parameters\n    ----------\n    name: Union[str, int]\n        The name or id of the\n\n    Returns\n    -------\n    PokeathlonStat\n        Pokeathlon stat model if found, else raises ResourceNotFound.\n\n    Raises\n    ------\n    pokelance.exceptions.ResourceNotFound\n        if pokeathlon stat was not found.\n\n    Examples\n    --------\n\n    &gt;&gt;&gt; from pokelance import PokeLance\n    &gt;&gt;&gt; import asyncio\n    &gt;&gt;&gt; client = PokeLance()\n    &gt;&gt;&gt; async def main() -&gt; None:\n    ...    pokeathlon_stat = await client.pokemon.fetch_pokeathlon_stat(1)\n    ...    print(pokeathlon_stat.name)\n    ...    await client.close()\n    &gt;&gt;&gt; asyncio.run(main())\n    speed\n    \"\"\"\n    route = Endpoint.get_pokeathlon_stat(name)\n    self._validate_resource(self.cache.pokeathlon_stat, name, route)\n    data = await self._client.request(route)\n    return self.cache.pokeathlon_stat.setdefault(route, PokeathlonStat.from_payload(data))\n</code></pre>"},{"location":"api_reference/ext/pokemon/#pokelance.ext.pokemon.Pokemon.fetch_pokemon","title":"<code>fetch_pokemon(name)</code>  <code>async</code>","text":"<p>Fetches a pokemon model by name or id.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Union[str, int]</code> <p>The name or id of the</p> required <p>Returns:</p> Type Description <code>Pokemon</code> <p>Pokemon model if found, else raises ResourceNotFound.</p> <p>Raises:</p> Type Description <code>ResourceNotFound</code> <p>if pokemon was not found.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from pokelance import PokeLance\n&gt;&gt;&gt; import asyncio\n&gt;&gt;&gt; client = PokeLance()\n&gt;&gt;&gt; async def main() -&gt; None:\n...    pokemon = await client.pokemon.fetch_pokemon(1)\n...    print(pokemon.name)\n...    await client.close()\n&gt;&gt;&gt; asyncio.run(main())\nbulbasaur\n</code></pre> Source code in <code>pokelance/ext/pokemon.py</code> Python<pre><code>async def fetch_pokemon(self, name: t.Union[str, int]) -&gt; PokemonModel:\n    \"\"\"\n    Fetches a pokemon model by name or id.\n\n    Parameters\n    ----------\n    name: Union[str, int]\n        The name or id of the\n\n    Returns\n    -------\n    PokemonModel\n        Pokemon model if found, else raises ResourceNotFound.\n\n    Raises\n    ------\n    pokelance.exceptions.ResourceNotFound\n        if pokemon was not found.\n\n    Examples\n    --------\n\n    &gt;&gt;&gt; from pokelance import PokeLance\n    &gt;&gt;&gt; import asyncio\n    &gt;&gt;&gt; client = PokeLance()\n    &gt;&gt;&gt; async def main() -&gt; None:\n    ...    pokemon = await client.pokemon.fetch_pokemon(1)\n    ...    print(pokemon.name)\n    ...    await client.close()\n    &gt;&gt;&gt; asyncio.run(main())\n    bulbasaur\n    \"\"\"\n    route = Endpoint.get_pokemon(name)\n    self._validate_resource(self.cache.pokemon, name, route)\n    data = await self._client.request(route)\n    return self.cache.pokemon.setdefault(route, PokemonModel.from_payload(data))\n</code></pre>"},{"location":"api_reference/ext/pokemon/#pokelance.ext.pokemon.Pokemon.fetch_pokemon_color","title":"<code>fetch_pokemon_color(name)</code>  <code>async</code>","text":"<p>Fetches a pokemon color model by name or id.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Union[str, int]</code> <p>The name or id of the</p> required <p>Returns:</p> Type Description <code>PokemonColor</code> <p>Pokemon color model if found, else raises ResourceNotFound.</p> <p>Raises:</p> Type Description <code>ResourceNotFound</code> <p>if pokemon color was not found.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from pokelance import PokeLance\n&gt;&gt;&gt; import asyncio\n&gt;&gt;&gt; client = PokeLance()\n&gt;&gt;&gt; async def main() -&gt; None:\n...    pokemon_color = await client.pokemon.fetch_pokemon_color(1)\n...    print(pokemon_color.name)\n...    await client.close()\n&gt;&gt;&gt; asyncio.run(main())\nblack\n</code></pre> Source code in <code>pokelance/ext/pokemon.py</code> Python<pre><code>async def fetch_pokemon_color(self, name: t.Union[str, int]) -&gt; PokemonColor:\n    \"\"\"\n    Fetches a pokemon color model by name or id.\n\n    Parameters\n    ----------\n    name: Union[str, int]\n        The name or id of the\n\n    Returns\n    -------\n    PokemonColor\n        Pokemon color model if found, else raises ResourceNotFound.\n\n    Raises\n    ------\n    pokelance.exceptions.ResourceNotFound\n        if pokemon color was not found.\n\n    Examples\n    --------\n\n    &gt;&gt;&gt; from pokelance import PokeLance\n    &gt;&gt;&gt; import asyncio\n    &gt;&gt;&gt; client = PokeLance()\n    &gt;&gt;&gt; async def main() -&gt; None:\n    ...    pokemon_color = await client.pokemon.fetch_pokemon_color(1)\n    ...    print(pokemon_color.name)\n    ...    await client.close()\n    &gt;&gt;&gt; asyncio.run(main())\n    black\n    \"\"\"\n    route = Endpoint.get_pokemon_color(name)\n    self._validate_resource(self.cache.pokemon_color, name, route)\n    data = await self._client.request(route)\n    return self.cache.pokemon_color.setdefault(route, PokemonColor.from_payload(data))\n</code></pre>"},{"location":"api_reference/ext/pokemon/#pokelance.ext.pokemon.Pokemon.fetch_pokemon_form","title":"<code>fetch_pokemon_form(name)</code>  <code>async</code>","text":"<p>Fetches a pokemon form model by name or id.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Union[str, int]</code> <p>The name or id of the</p> required <p>Returns:</p> Type Description <code>PokemonForm</code> <p>Pokemon form model if found, else raises ResourceNotFound.</p> <p>Raises:</p> Type Description <code>ResourceNotFound</code> <p>if pokemon form was not found.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from pokelance import PokeLance\n&gt;&gt;&gt; import asyncio\n&gt;&gt;&gt; client = PokeLance()\n&gt;&gt;&gt; async def main() -&gt; None:\n...    pokemon_form = await client.pokemon.fetch_pokemon_form(1)\n...    print(pokemon_form.name)\n...    await client.close()\n&gt;&gt;&gt; asyncio.run(main())\nbulbasaur\n</code></pre> Source code in <code>pokelance/ext/pokemon.py</code> Python<pre><code>async def fetch_pokemon_form(self, name: t.Union[str, int]) -&gt; PokemonForm:\n    \"\"\"\n    Fetches a pokemon form model by name or id.\n\n    Parameters\n    ----------\n    name: Union[str, int]\n        The name or id of the\n\n    Returns\n    -------\n    PokemonForm\n        Pokemon form model if found, else raises ResourceNotFound.\n\n    Raises\n    ------\n    pokelance.exceptions.ResourceNotFound\n        if pokemon form was not found.\n\n    Examples\n    --------\n\n    &gt;&gt;&gt; from pokelance import PokeLance\n    &gt;&gt;&gt; import asyncio\n    &gt;&gt;&gt; client = PokeLance()\n    &gt;&gt;&gt; async def main() -&gt; None:\n    ...    pokemon_form = await client.pokemon.fetch_pokemon_form(1)\n    ...    print(pokemon_form.name)\n    ...    await client.close()\n    &gt;&gt;&gt; asyncio.run(main())\n    bulbasaur\n    \"\"\"\n    route = Endpoint.get_pokemon_form(name)\n    self._validate_resource(self.cache.pokemon_form, name, route)\n    data = await self._client.request(route)\n    return self.cache.pokemon_form.setdefault(route, PokemonForm.from_payload(data))\n</code></pre>"},{"location":"api_reference/ext/pokemon/#pokelance.ext.pokemon.Pokemon.fetch_pokemon_habitat","title":"<code>fetch_pokemon_habitat(name)</code>  <code>async</code>","text":"<p>Fetches a pokemon habitat model by name or id.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Union[str, int]</code> <p>The name or id of the</p> required <p>Returns:</p> Type Description <code>PokemonHabitats</code> <p>Pokemon habitat model if found, else raises ResourceNotFound.</p> <p>Raises:</p> Type Description <code>ResourceNotFound</code> <p>if pokemon habitat was not found.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from pokelance import PokeLance\n&gt;&gt;&gt; import asyncio\n&gt;&gt;&gt; client = PokeLance()\n&gt;&gt;&gt; async def main() -&gt; None:\n...    pokemon_habitat = await client.pokemon.fetch_pokemon_habitat(1)\n...    print(pokemon_habitat.name)\n...    await client.close()\n&gt;&gt;&gt; asyncio.run(main())\ncave\n</code></pre> Source code in <code>pokelance/ext/pokemon.py</code> Python<pre><code>async def fetch_pokemon_habitat(self, name: t.Union[str, int]) -&gt; PokemonHabitats:\n    \"\"\"\n    Fetches a pokemon habitat model by name or id.\n\n    Parameters\n    ----------\n    name: Union[str, int]\n        The name or id of the\n\n    Returns\n    -------\n    PokemonHabitats\n        Pokemon habitat model if found, else raises ResourceNotFound.\n\n    Raises\n    ------\n    pokelance.exceptions.ResourceNotFound\n        if pokemon habitat was not found.\n\n    Examples\n    --------\n\n    &gt;&gt;&gt; from pokelance import PokeLance\n    &gt;&gt;&gt; import asyncio\n    &gt;&gt;&gt; client = PokeLance()\n    &gt;&gt;&gt; async def main() -&gt; None:\n    ...    pokemon_habitat = await client.pokemon.fetch_pokemon_habitat(1)\n    ...    print(pokemon_habitat.name)\n    ...    await client.close()\n    &gt;&gt;&gt; asyncio.run(main())\n    cave\n    \"\"\"\n    route = Endpoint.get_pokemon_habitat(name)\n    self._validate_resource(self.cache.pokemon_habitat, name, route)\n    data = await self._client.request(route)\n    return self.cache.pokemon_habitat.setdefault(route, PokemonHabitats.from_payload(data))\n</code></pre>"},{"location":"api_reference/ext/pokemon/#pokelance.ext.pokemon.Pokemon.fetch_pokemon_shape","title":"<code>fetch_pokemon_shape(name)</code>  <code>async</code>","text":"<p>Fetches a pokemon shape model by name or id.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Union[str, int]</code> <p>The name or id of the</p> required <p>Returns:</p> Type Description <code>PokemonShape</code> <p>Pokemon shape model if found, else raises ResourceNotFound.</p> <p>Raises:</p> Type Description <code>ResourceNotFound</code> <p>if pokemon shape was not found.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from pokelance import PokeLance\n&gt;&gt;&gt; import asyncio\n&gt;&gt;&gt; client = PokeLance()\n&gt;&gt;&gt; async def main() -&gt; None:\n...    pokemon_shape = await client.pokemon.fetch_pokemon_shape(1)\n...    print(pokemon_shape.name)\n...    await client.close()\n&gt;&gt;&gt; asyncio.run(main())\nball\n</code></pre> Source code in <code>pokelance/ext/pokemon.py</code> Python<pre><code>async def fetch_pokemon_shape(self, name: t.Union[str, int]) -&gt; PokemonShape:\n    \"\"\"\n    Fetches a pokemon shape model by name or id.\n\n    Parameters\n    ----------\n    name: Union[str, int]\n        The name or id of the\n\n    Returns\n    -------\n    PokemonShape\n        Pokemon shape model if found, else raises ResourceNotFound.\n\n    Raises\n    ------\n    pokelance.exceptions.ResourceNotFound\n        if pokemon shape was not found.\n\n    Examples\n    --------\n\n    &gt;&gt;&gt; from pokelance import PokeLance\n    &gt;&gt;&gt; import asyncio\n    &gt;&gt;&gt; client = PokeLance()\n    &gt;&gt;&gt; async def main() -&gt; None:\n    ...    pokemon_shape = await client.pokemon.fetch_pokemon_shape(1)\n    ...    print(pokemon_shape.name)\n    ...    await client.close()\n    &gt;&gt;&gt; asyncio.run(main())\n    ball\n    \"\"\"\n    route = Endpoint.get_pokemon_shape(name)\n    self._validate_resource(self.cache.pokemon_shape, name, route)\n    data = await self._client.request(route)\n    return self.cache.pokemon_shape.setdefault(route, PokemonShape.from_payload(data))\n</code></pre>"},{"location":"api_reference/ext/pokemon/#pokelance.ext.pokemon.Pokemon.fetch_pokemon_species","title":"<code>fetch_pokemon_species(name)</code>  <code>async</code>","text":"<p>Fetches a pokemon species model by name or id.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Union[str, int]</code> <p>The name or id of the</p> required <p>Returns:</p> Type Description <code>PokemonSpecies</code> <p>Pokemon species model if found, else raises ResourceNotFound.</p> <p>Raises:</p> Type Description <code>ResourceNotFound</code> <p>if pokemon species was not found.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from pokelance import PokeLance\n&gt;&gt;&gt; import asyncio\n&gt;&gt;&gt; client = PokeLance()\n&gt;&gt;&gt; async def main() -&gt; None:\n...    pokemon_species = await client.pokemon.fetch_pokemon_species(1)\n...    print(pokemon_species.name)\n...    await client.close()\n&gt;&gt;&gt; asyncio.run(main())\nbulbasaur\n</code></pre> Source code in <code>pokelance/ext/pokemon.py</code> Python<pre><code>async def fetch_pokemon_species(self, name: t.Union[str, int]) -&gt; PokemonSpecies:\n    \"\"\"\n    Fetches a pokemon species model by name or id.\n\n    Parameters\n    ----------\n    name: Union[str, int]\n        The name or id of the\n\n    Returns\n    -------\n    PokemonSpecies\n        Pokemon species model if found, else raises ResourceNotFound.\n\n    Raises\n    ------\n    pokelance.exceptions.ResourceNotFound\n        if pokemon species was not found.\n\n    Examples\n    --------\n\n    &gt;&gt;&gt; from pokelance import PokeLance\n    &gt;&gt;&gt; import asyncio\n    &gt;&gt;&gt; client = PokeLance()\n    &gt;&gt;&gt; async def main() -&gt; None:\n    ...    pokemon_species = await client.pokemon.fetch_pokemon_species(1)\n    ...    print(pokemon_species.name)\n    ...    await client.close()\n    &gt;&gt;&gt; asyncio.run(main())\n    bulbasaur\n    \"\"\"\n    route = Endpoint.get_pokemon_species(name)\n    self._validate_resource(self.cache.pokemon_species, name, route)\n    data = await self._client.request(route)\n    return self.cache.pokemon_species.setdefault(route, PokemonSpecies.from_payload(data))\n</code></pre>"},{"location":"api_reference/ext/pokemon/#pokelance.ext.pokemon.Pokemon.fetch_stat","title":"<code>fetch_stat(name)</code>  <code>async</code>","text":"<p>Fetches a stat model by name or id.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Union[str, int]</code> <p>The name or id of the</p> required <p>Returns:</p> Type Description <code>Stat</code> <p>Stat model if found, else raises ResourceNotFound.</p> <p>Raises:</p> Type Description <code>ResourceNotFound</code> <p>if stat was not found.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from pokelance import PokeLance\n&gt;&gt;&gt; import asyncio\n&gt;&gt;&gt; client = PokeLance()\n&gt;&gt;&gt; async def main() -&gt; None:\n...    stat = await client.pokemon.fetch_stat(1)\n...    print(stat.name)\n...    await client.close()\n&gt;&gt;&gt; asyncio.run(main())\nhp\n</code></pre> Source code in <code>pokelance/ext/pokemon.py</code> Python<pre><code>async def fetch_stat(self, name: t.Union[str, int]) -&gt; Stat:\n    \"\"\"\n    Fetches a stat model by name or id.\n\n    Parameters\n    ----------\n    name: Union[str, int]\n        The name or id of the\n\n    Returns\n    -------\n    Stat\n        Stat model if found, else raises ResourceNotFound.\n\n    Raises\n    ------\n    pokelance.exceptions.ResourceNotFound\n        if stat was not found.\n\n    Examples\n    --------\n\n    &gt;&gt;&gt; from pokelance import PokeLance\n    &gt;&gt;&gt; import asyncio\n    &gt;&gt;&gt; client = PokeLance()\n    &gt;&gt;&gt; async def main() -&gt; None:\n    ...    stat = await client.pokemon.fetch_stat(1)\n    ...    print(stat.name)\n    ...    await client.close()\n    &gt;&gt;&gt; asyncio.run(main())\n    hp\n    \"\"\"\n    route = Endpoint.get_stat(name)\n    self._validate_resource(self.cache.stat, name, route)\n    data = await self._client.request(route)\n    return self.cache.stat.setdefault(route, Stat.from_payload(data))\n</code></pre>"},{"location":"api_reference/ext/pokemon/#pokelance.ext.pokemon.Pokemon.fetch_type","title":"<code>fetch_type(name)</code>  <code>async</code>","text":"<p>Fetches a type model by name or id.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Union[str, int]</code> <p>The name or id of the</p> required <p>Returns:</p> Type Description <code>Type</code> <p>Type model if found, else raises ResourceNotFound.</p> <p>Raises:</p> Type Description <code>ResourceNotFound</code> <p>if type was not found.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from pokelance import PokeLance\n&gt;&gt;&gt; import asyncio\n&gt;&gt;&gt; client = PokeLance()\n&gt;&gt;&gt; async def main() -&gt; None:\n...    type_ = await client.pokemon.fetch_type(1)\n...    print(type_.name)\n...    await client.close()\n&gt;&gt;&gt; asyncio.run(main())\nnormal\n</code></pre> Source code in <code>pokelance/ext/pokemon.py</code> Python<pre><code>async def fetch_type(self, name: t.Union[str, int]) -&gt; Type:\n    \"\"\"\n    Fetches a type model by name or id.\n\n    Parameters\n    ----------\n    name: Union[str, int]\n        The name or id of the\n\n    Returns\n    -------\n    Type\n        Type model if found, else raises ResourceNotFound.\n\n    Raises\n    ------\n    pokelance.exceptions.ResourceNotFound\n        if type was not found.\n\n    Examples\n    --------\n\n    &gt;&gt;&gt; from pokelance import PokeLance\n    &gt;&gt;&gt; import asyncio\n    &gt;&gt;&gt; client = PokeLance()\n    &gt;&gt;&gt; async def main() -&gt; None:\n    ...    type_ = await client.pokemon.fetch_type(1)\n    ...    print(type_.name)\n    ...    await client.close()\n    &gt;&gt;&gt; asyncio.run(main())\n    normal\n    \"\"\"\n    route = Endpoint.get_type(name)\n    self._validate_resource(self.cache.type, name, route)\n    data = await self._client.request(route)\n    return self.cache.type.setdefault(route, Type.from_payload(data))\n</code></pre>"},{"location":"api_reference/ext/pokemon/#pokelance.ext.pokemon.Pokemon.get_ability","title":"<code>get_ability(name)</code>","text":"<p>Get an ability by name or id.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Union[str, int]</code> <p>The name or id of the ability.</p> required <p>Returns:</p> Type Description <code>Optional[Ability]</code> <p>The ability if found, else None.</p> <p>Raises:</p> Type Description <code>ResourceNotFound</code> <p>If the ability was not found.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from pokelance import PokeLance\n&gt;&gt;&gt; client = PokeLance()\n&gt;&gt;&gt; ability = client.pokemon.get_ability(\"stench\")\n&gt;&gt;&gt; ability.id\n1\n</code></pre> Source code in <code>pokelance/ext/pokemon.py</code> Python<pre><code>def get_ability(self, name: t.Union[str, int]) -&gt; t.Optional[Ability]:\n    \"\"\"Get an ability by name or id.\n\n    Parameters\n    ----------\n    name: Union[str, int]\n        The name or id of the ability.\n\n    Returns\n    -------\n    t.Optional[Ability]\n        The ability if found, else None.\n\n    Raises\n    ------\n    pokelance.exceptions.ResourceNotFound\n        If the ability was not found.\n\n    Examples\n    --------\n\n    &gt;&gt;&gt; from pokelance import PokeLance\n    &gt;&gt;&gt; client = PokeLance()\n    &gt;&gt;&gt; ability = client.pokemon.get_ability(\"stench\")\n    &gt;&gt;&gt; ability.id\n    1\n    \"\"\"\n    route = Endpoint.get_ability(name)\n    self._validate_resource(self.cache.ability, name, route)\n    return self.cache.ability.get(route, None)\n</code></pre>"},{"location":"api_reference/ext/pokemon/#pokelance.ext.pokemon.Pokemon.get_characteristic","title":"<code>get_characteristic(id_)</code>","text":"<p>Get a characteristic by id.</p> <p>Parameters:</p> Name Type Description Default <code>id_</code> <code>int</code> <p>The id of the characteristic.</p> required <p>Returns:</p> Type Description <code>Optional[Characteristic]</code> <p>The characteristic if found, else None.</p> <p>Raises:</p> Type Description <code>ResourceNotFound</code> <p>If the characteristic was not found.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from pokelance import PokeLance\n&gt;&gt;&gt; client = PokeLance()\n&gt;&gt;&gt; characteristic = client.pokemon.get_characteristic(1)\n&gt;&gt;&gt; characteristic.gene_modulo\n0\n</code></pre> Source code in <code>pokelance/ext/pokemon.py</code> Python<pre><code>def get_characteristic(self, id_: int) -&gt; t.Optional[Characteristic]:\n    \"\"\"Get a characteristic by id.\n\n    Parameters\n    ----------\n    id_: int\n        The id of the characteristic.\n\n    Returns\n    -------\n    t.Optional[Characteristic]\n        The characteristic if found, else None.\n\n    Raises\n    ------\n    pokelance.exceptions.ResourceNotFound\n        If the characteristic was not found.\n\n    Examples\n    --------\n\n    &gt;&gt;&gt; from pokelance import PokeLance\n    &gt;&gt;&gt; client = PokeLance()\n    &gt;&gt;&gt; characteristic = client.pokemon.get_characteristic(1)\n    &gt;&gt;&gt; characteristic.gene_modulo\n    0\n    \"\"\"\n    route = Endpoint.get_characteristic(id_)\n    self._validate_resource(self.cache.characteristic, id_, route)\n    return self.cache.characteristic.get(route, None)\n</code></pre>"},{"location":"api_reference/ext/pokemon/#pokelance.ext.pokemon.Pokemon.get_egg_group","title":"<code>get_egg_group(name)</code>","text":"<p>Get an egg group by name or id.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Union[str, int]</code> <p>The name or id of the egg group.</p> required <p>Returns:</p> Type Description <code>Optional[EggGroup]</code> <p>The egg group if found, else None.</p> <p>Raises:</p> Type Description <code>ResourceNotFound</code> <p>If the egg group was not found.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from pokelance import PokeLance\n&gt;&gt;&gt; client = PokeLance()\n&gt;&gt;&gt; egg_group = client.pokemon.get_egg_group(\"monster\")\n&gt;&gt;&gt; egg_group.id\n1\n</code></pre> Source code in <code>pokelance/ext/pokemon.py</code> Python<pre><code>def get_egg_group(self, name: t.Union[str, int]) -&gt; t.Optional[EggGroup]:\n    \"\"\"Get an egg group by name or id.\n\n    Parameters\n    ----------\n    name: Union[str, int]\n        The name or id of the egg group.\n\n    Returns\n    -------\n    t.Optional[EggGroup]\n        The egg group if found, else None.\n\n    Raises\n    ------\n    pokelance.exceptions.ResourceNotFound\n        If the egg group was not found.\n\n    Examples\n    --------\n\n    &gt;&gt;&gt; from pokelance import PokeLance\n    &gt;&gt;&gt; client = PokeLance()\n    &gt;&gt;&gt; egg_group = client.pokemon.get_egg_group(\"monster\")\n    &gt;&gt;&gt; egg_group.id\n    1\n    \"\"\"\n    route = Endpoint.get_egg_group(name)\n    self._validate_resource(self.cache.egg_group, name, route)\n    return self.cache.egg_group.get(route, None)\n</code></pre>"},{"location":"api_reference/ext/pokemon/#pokelance.ext.pokemon.Pokemon.get_gender","title":"<code>get_gender(name)</code>","text":"<p>Get gender from cache.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Union[str, int]</code> <p>The name or id of the gender.</p> required <p>Returns:</p> Type Description <code>Optional[Gender]</code> <p>Gender model if found, else None.</p> <p>Raises:</p> Type Description <code>ResourceNotFound</code> <p>if gender was not found.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from pokelance import PokeLance\n&gt;&gt;&gt; client = PokeLance()\n&gt;&gt;&gt; gender = client.pokemon.get_gender(1)\n&gt;&gt;&gt; gender.name\n'female'\n</code></pre> Source code in <code>pokelance/ext/pokemon.py</code> Python<pre><code>def get_gender(self, name: t.Union[str, int]) -&gt; t.Optional[Gender]:\n    \"\"\"\n    Get gender from cache.\n\n    Parameters\n    ----------\n    name: Union[str, int]\n        The name or id of the gender.\n\n    Returns\n    -------\n    t.Optional[Gender]\n        Gender model if found, else None.\n\n    Raises\n    ------\n    pokelance.exceptions.ResourceNotFound\n        if gender was not found.\n\n    Examples\n    --------\n\n    &gt;&gt;&gt; from pokelance import PokeLance\n    &gt;&gt;&gt; client = PokeLance()\n    &gt;&gt;&gt; gender = client.pokemon.get_gender(1)\n    &gt;&gt;&gt; gender.name\n    'female'\n    \"\"\"\n    route = Endpoint.get_gender(name)\n    self._validate_resource(self.cache.gender, name, route)\n    return self.cache.gender.get(route, None)\n</code></pre>"},{"location":"api_reference/ext/pokemon/#pokelance.ext.pokemon.Pokemon.get_growth_rate","title":"<code>get_growth_rate(name)</code>","text":"<p>Get growth rate from cache.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Union[str, int]</code> <p>The name or id of the growth rate.</p> required <p>Returns:</p> Type Description <code>Optional[GrowthRate]</code> <p>Growth rate model if found, else None.</p> <p>Raises:</p> Type Description <code>ResourceNotFound</code> <p>if growth rate was not found.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from pokelance import PokeLance\n&gt;&gt;&gt; client = PokeLance()\n&gt;&gt;&gt; growth_rate = client.pokemon.get_growth_rate(1)\n&gt;&gt;&gt; growth_rate.name\n'slow'\n</code></pre> Source code in <code>pokelance/ext/pokemon.py</code> Python<pre><code>def get_growth_rate(self, name: t.Union[str, int]) -&gt; t.Optional[GrowthRate]:\n    \"\"\"\n    Get growth rate from cache.\n\n    Parameters\n    ----------\n    name: Union[str, int]\n        The name or id of the growth rate.\n\n    Returns\n    -------\n    t.Optional[GrowthRate]\n        Growth rate model if found, else None.\n\n    Raises\n    ------\n    pokelance.exceptions.ResourceNotFound\n        if growth rate was not found.\n\n    Examples\n    --------\n\n    &gt;&gt;&gt; from pokelance import PokeLance\n    &gt;&gt;&gt; client = PokeLance()\n    &gt;&gt;&gt; growth_rate = client.pokemon.get_growth_rate(1)\n    &gt;&gt;&gt; growth_rate.name\n    'slow'\n    \"\"\"\n    route = Endpoint.get_growth_rate(name)\n    self._validate_resource(self.cache.growth_rate, name, route)\n    return self.cache.growth_rate.get(route, None)\n</code></pre>"},{"location":"api_reference/ext/pokemon/#pokelance.ext.pokemon.Pokemon.get_location_area_encounter","title":"<code>get_location_area_encounter(name)</code>","text":"<p>Get location area encounter from cache. It gets areas where a pokemon can be found.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Union[str, int]</code> <p>The name or id of the location area encounter.</p> required <p>Returns:</p> Type Description <code>Optional[LocationAreaEncounter]</code> <p>Location area encounter model if found, else None.</p> <p>Raises:</p> Type Description <code>ResourceNotFound</code> <p>if location area encounter was not found.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from pokelance import PokeLance\n&gt;&gt;&gt; client = PokeLance()\n&gt;&gt;&gt; location_area_encounter = client.pokemon.get_location_area_encounter(1)\n&gt;&gt;&gt; location_area_encounter.location_area.name\n'cerulean-city-area'\n</code></pre> Source code in <code>pokelance/ext/pokemon.py</code> Python<pre><code>def get_location_area_encounter(self, name: t.Union[str, int]) -&gt; t.Optional[LocationAreaEncounter]:\n    \"\"\"\n    Get location area encounter from cache.\n    It gets areas where a pokemon can be found.\n\n    Parameters\n    ----------\n    name: Union[str, int]\n        The name or id of the location area encounter.\n\n    Returns\n    -------\n    t.Optional[LocationAreaEncounter]\n        Location area encounter model if found, else None.\n\n    Raises\n    ------\n    pokelance.exceptions.ResourceNotFound\n        if location area encounter was not found.\n\n    Examples\n    --------\n\n    &gt;&gt;&gt; from pokelance import PokeLance\n    &gt;&gt;&gt; client = PokeLance()\n    &gt;&gt;&gt; location_area_encounter = client.pokemon.get_location_area_encounter(1)\n    &gt;&gt;&gt; location_area_encounter.location_area.name\n    'cerulean-city-area'\n    \"\"\"\n    route = Endpoint.get_location_area_encounter(name)\n    self._validate_resource(self.cache.location_area_encounter, name, route)\n    return self.cache.location_area_encounter.get(route, None)\n</code></pre>"},{"location":"api_reference/ext/pokemon/#pokelance.ext.pokemon.Pokemon.get_nature","title":"<code>get_nature(name)</code>","text":"<p>Get nature from cache.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Union[str, int]</code> <p>The name or id of the nature.</p> required <p>Returns:</p> Type Description <code>Optional[Nature]</code> <p>Nature model if found, else None.</p> <p>Raises:</p> Type Description <code>ResourceNotFound</code> <p>if nature was not found.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from pokelance import PokeLance\n&gt;&gt;&gt; client = PokeLance()\n&gt;&gt;&gt; nature = client.pokemon.get_nature(1)\n&gt;&gt;&gt; nature.name\n'hardy'\n</code></pre> Source code in <code>pokelance/ext/pokemon.py</code> Python<pre><code>def get_nature(self, name: t.Union[str, int]) -&gt; t.Optional[Nature]:\n    \"\"\"\n    Get nature from cache.\n\n    Parameters\n    ----------\n    name: Union[str, int]\n        The name or id of the nature.\n\n    Returns\n    -------\n    t.Optional[Nature]\n        Nature model if found, else None.\n\n    Raises\n    ------\n    pokelance.exceptions.ResourceNotFound\n        if nature was not found.\n\n    Examples\n    --------\n\n    &gt;&gt;&gt; from pokelance import PokeLance\n    &gt;&gt;&gt; client = PokeLance()\n    &gt;&gt;&gt; nature = client.pokemon.get_nature(1)\n    &gt;&gt;&gt; nature.name\n    'hardy'\n    \"\"\"\n    route = Endpoint.get_nature(name)\n    self._validate_resource(self.cache.nature, name, route)\n    return self.cache.nature.get(route, None)\n</code></pre>"},{"location":"api_reference/ext/pokemon/#pokelance.ext.pokemon.Pokemon.get_pokeathlon_stat","title":"<code>get_pokeathlon_stat(name)</code>","text":"<p>Get pokeathlon stat from cache.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Union[str, int]</code> <p>The name or id of the pokeathlon stat.</p> required <p>Returns:</p> Type Description <code>Optional[PokeathlonStat]</code> <p>Pokeathlon stat model if found, else None.</p> <p>Raises:</p> Type Description <code>ResourceNotFound</code> <p>if pokeathlon stat was not found.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from pokelance import PokeLance\n&gt;&gt;&gt; client = PokeLance()\n&gt;&gt;&gt; pokeathlon_stat = client.pokemon.get_pokeathlon_stat(1)\n&gt;&gt;&gt; pokeathlon_stat.name\n'speed'\n</code></pre> Source code in <code>pokelance/ext/pokemon.py</code> Python<pre><code>def get_pokeathlon_stat(self, name: t.Union[str, int]) -&gt; t.Optional[PokeathlonStat]:\n    \"\"\"\n    Get pokeathlon stat from cache.\n\n    Parameters\n    ----------\n    name: Union[str, int]\n        The name or id of the pokeathlon stat.\n\n    Returns\n    -------\n    t.Optional[PokeathlonStat]\n        Pokeathlon stat model if found, else None.\n\n    Raises\n    ------\n    pokelance.exceptions.ResourceNotFound\n        if pokeathlon stat was not found.\n\n    Examples\n    --------\n\n    &gt;&gt;&gt; from pokelance import PokeLance\n    &gt;&gt;&gt; client = PokeLance()\n    &gt;&gt;&gt; pokeathlon_stat = client.pokemon.get_pokeathlon_stat(1)\n    &gt;&gt;&gt; pokeathlon_stat.name\n    'speed'\n    \"\"\"\n    route = Endpoint.get_pokeathlon_stat(name)\n    self._validate_resource(self.cache.pokeathlon_stat, name, route)\n    return self.cache.pokeathlon_stat.get(route, None)\n</code></pre>"},{"location":"api_reference/ext/pokemon/#pokelance.ext.pokemon.Pokemon.get_pokemon","title":"<code>get_pokemon(name)</code>","text":"<p>Get pokemon from cache.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Union[str, int]</code> <p>The name or id of the pokemon.</p> required <p>Returns:</p> Type Description <code>Optional[Pokemon]</code> <p>Pokemon model if found, else None.</p> <p>Raises:</p> Type Description <code>ResourceNotFound</code> <p>if pokemon was not found.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from pokelance import PokeLance\n&gt;&gt;&gt; client = PokeLance()\n&gt;&gt;&gt; pokemon = client.pokemon.get_pokemon(1)\n&gt;&gt;&gt; pokemon.name\n'bulbasaur'\n</code></pre> Source code in <code>pokelance/ext/pokemon.py</code> Python<pre><code>def get_pokemon(self, name: t.Union[str, int]) -&gt; t.Optional[PokemonModel]:\n    \"\"\"\n    Get pokemon from cache.\n\n    Parameters\n    ----------\n    name: Union[str, int]\n        The name or id of the pokemon.\n\n    Returns\n    -------\n    t.Optional[PokemonModel]\n        Pokemon model if found, else None.\n\n    Raises\n    ------\n    pokelance.exceptions.ResourceNotFound\n        if pokemon was not found.\n\n    Examples\n    --------\n\n    &gt;&gt;&gt; from pokelance import PokeLance\n    &gt;&gt;&gt; client = PokeLance()\n    &gt;&gt;&gt; pokemon = client.pokemon.get_pokemon(1)\n    &gt;&gt;&gt; pokemon.name\n    'bulbasaur'\n    \"\"\"\n    route = Endpoint.get_pokemon(name)\n    self._validate_resource(self.cache.pokemon, name, route)\n    return self.cache.pokemon.get(route, None)\n</code></pre>"},{"location":"api_reference/ext/pokemon/#pokelance.ext.pokemon.Pokemon.get_pokemon_color","title":"<code>get_pokemon_color(name)</code>","text":"<p>Get pokemon color from cache.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Union[str, int]</code> <p>The name or id of the pokemon color.</p> required <p>Returns:</p> Type Description <code>Optional[PokemonColor]</code> <p>Pokemon color model if found, else None.</p> <p>Raises:</p> Type Description <code>ResourceNotFound</code> <p>if pokemon color was not found.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from pokelance import PokeLance\n&gt;&gt;&gt; client = PokeLance()\n&gt;&gt;&gt; pokemon_color = client.pokemon.get_pokemon_color(1)\n&gt;&gt;&gt; pokemon_color.name\n'black'\n</code></pre> Source code in <code>pokelance/ext/pokemon.py</code> Python<pre><code>def get_pokemon_color(self, name: t.Union[str, int]) -&gt; t.Optional[PokemonColor]:\n    \"\"\"\n    Get pokemon color from cache.\n\n    Parameters\n    ----------\n    name: Union[str, int]\n        The name or id of the pokemon color.\n\n    Returns\n    -------\n    t.Optional[PokemonColor]\n        Pokemon color model if found, else None.\n\n    Raises\n    ------\n    pokelance.exceptions.ResourceNotFound\n        if pokemon color was not found.\n\n    Examples\n    --------\n\n    &gt;&gt;&gt; from pokelance import PokeLance\n    &gt;&gt;&gt; client = PokeLance()\n    &gt;&gt;&gt; pokemon_color = client.pokemon.get_pokemon_color(1)\n    &gt;&gt;&gt; pokemon_color.name\n    'black'\n    \"\"\"\n    route = Endpoint.get_pokemon_color(name)\n    self._validate_resource(self.cache.pokemon_color, name, route)\n    return self.cache.pokemon_color.get(route, None)\n</code></pre>"},{"location":"api_reference/ext/pokemon/#pokelance.ext.pokemon.Pokemon.get_pokemon_form","title":"<code>get_pokemon_form(name)</code>","text":"<p>Get pokemon form from cache.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Union[str, int]</code> <p>The name or id of the pokemon form.</p> required <p>Returns:</p> Type Description <code>Optional[PokemonForm]</code> <p>Pokemon form model if found, else None.</p> <p>Raises:</p> Type Description <code>ResourceNotFound</code> <p>if pokemon form was not found.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from pokelance import PokeLance\n&gt;&gt;&gt; client = PokeLance()\n&gt;&gt;&gt; pokemon_form = client.pokemon.get_pokemon_form(1)\n&gt;&gt;&gt; pokemon_form.name\n'bulbasaur'\n</code></pre> Source code in <code>pokelance/ext/pokemon.py</code> Python<pre><code>def get_pokemon_form(self, name: t.Union[str, int]) -&gt; t.Optional[PokemonForm]:\n    \"\"\"\n    Get pokemon form from cache.\n\n    Parameters\n    ----------\n    name: Union[str, int]\n        The name or id of the pokemon form.\n\n    Returns\n    -------\n    t.Optional[PokemonForm]\n        Pokemon form model if found, else None.\n\n    Raises\n    ------\n    pokelance.exceptions.ResourceNotFound\n        if pokemon form was not found.\n\n    Examples\n    --------\n\n    &gt;&gt;&gt; from pokelance import PokeLance\n    &gt;&gt;&gt; client = PokeLance()\n    &gt;&gt;&gt; pokemon_form = client.pokemon.get_pokemon_form(1)\n    &gt;&gt;&gt; pokemon_form.name\n    'bulbasaur'\n    \"\"\"\n    route = Endpoint.get_pokemon_form(name)\n    self._validate_resource(self.cache.pokemon_form, name, route)\n    return self.cache.pokemon_form.get(route, None)\n</code></pre>"},{"location":"api_reference/ext/pokemon/#pokelance.ext.pokemon.Pokemon.get_pokemon_habitat","title":"<code>get_pokemon_habitat(name)</code>","text":"<p>Get pokemon habitat from cache.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Union[str, int]</code> <p>The name or id of the pokemon habitat.</p> required <p>Returns:</p> Type Description <code>Optional[PokemonHabitats]</code> <p>Pokemon habitat model if found, else None.</p> <p>Raises:</p> Type Description <code>ResourceNotFound</code> <p>if pokemon habitat was not found.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from pokelance import PokeLance\n&gt;&gt;&gt; client = PokeLance()\n&gt;&gt;&gt; pokemon_habitat = client.pokemon.get_pokemon_habitat(1)\n&gt;&gt;&gt; pokemon_habitat.name\n'cave'\n</code></pre> Source code in <code>pokelance/ext/pokemon.py</code> Python<pre><code>def get_pokemon_habitat(self, name: t.Union[str, int]) -&gt; t.Optional[PokemonHabitats]:\n    \"\"\"\n    Get pokemon habitat from cache.\n\n    Parameters\n    ----------\n    name: Union[str, int]\n        The name or id of the pokemon habitat.\n\n    Returns\n    -------\n    t.Optional[PokemonHabitats]\n        Pokemon habitat model if found, else None.\n\n    Raises\n    ------\n    pokelance.exceptions.ResourceNotFound\n        if pokemon habitat was not found.\n\n    Examples\n    --------\n\n    &gt;&gt;&gt; from pokelance import PokeLance\n    &gt;&gt;&gt; client = PokeLance()\n    &gt;&gt;&gt; pokemon_habitat = client.pokemon.get_pokemon_habitat(1)\n    &gt;&gt;&gt; pokemon_habitat.name\n    'cave'\n    \"\"\"\n    route = Endpoint.get_pokemon_habitat(name)\n    self._validate_resource(self.cache.pokemon_habitat, name, route)\n    return self.cache.pokemon_habitat.get(route, None)\n</code></pre>"},{"location":"api_reference/ext/pokemon/#pokelance.ext.pokemon.Pokemon.get_pokemon_shape","title":"<code>get_pokemon_shape(name)</code>","text":"<p>Get pokemon shape from cache.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Union[str, int]</code> <p>The name or id of the pokemon shape.</p> required <p>Returns:</p> Type Description <code>Optional[PokemonShape]</code> <p>Pokemon shape model if found, else None.</p> <p>Raises:</p> Type Description <code>ResourceNotFound</code> <p>if pokemon shape was not found.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from pokelance import PokeLance\n&gt;&gt;&gt; client = PokeLance()\n&gt;&gt;&gt; pokemon_shape = client.pokemon.get_pokemon_shape(1)\n&gt;&gt;&gt; pokemon_shape.name\n'ball'\n</code></pre> Source code in <code>pokelance/ext/pokemon.py</code> Python<pre><code>def get_pokemon_shape(self, name: t.Union[str, int]) -&gt; t.Optional[PokemonShape]:\n    \"\"\"\n    Get pokemon shape from cache.\n\n    Parameters\n    ----------\n    name: Union[str, int]\n        The name or id of the pokemon shape.\n\n    Returns\n    -------\n    t.Optional[PokemonShape]\n        Pokemon shape model if found, else None.\n\n    Raises\n    ------\n    pokelance.exceptions.ResourceNotFound\n        if pokemon shape was not found.\n\n    Examples\n    --------\n\n    &gt;&gt;&gt; from pokelance import PokeLance\n    &gt;&gt;&gt; client = PokeLance()\n    &gt;&gt;&gt; pokemon_shape = client.pokemon.get_pokemon_shape(1)\n    &gt;&gt;&gt; pokemon_shape.name\n    'ball'\n    \"\"\"\n    route = Endpoint.get_pokemon_shape(name)\n    self._validate_resource(self.cache.pokemon_shape, name, route)\n    return self.cache.pokemon_shape.get(route, None)\n</code></pre>"},{"location":"api_reference/ext/pokemon/#pokelance.ext.pokemon.Pokemon.get_pokemon_species","title":"<code>get_pokemon_species(name)</code>","text":"<p>Get pokemon species from cache.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Union[str, int]</code> <p>The name or id of the pokemon species.</p> required <p>Returns:</p> Type Description <code>Optional[PokemonSpecies]</code> <p>Pokemon species model if found, else None.</p> <p>Raises:</p> Type Description <code>ResourceNotFound</code> <p>if pokemon species was not found.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from pokelance import PokeLance\n&gt;&gt;&gt; client = PokeLance()\n&gt;&gt;&gt; pokemon_species = client.pokemon.get_pokemon_species(1)\n&gt;&gt;&gt; pokemon_species.name\n'bulbasaur'\n</code></pre> Source code in <code>pokelance/ext/pokemon.py</code> Python<pre><code>def get_pokemon_species(self, name: t.Union[str, int]) -&gt; t.Optional[PokemonSpecies]:\n    \"\"\"\n    Get pokemon species from cache.\n\n    Parameters\n    ----------\n    name: Union[str, int]\n        The name or id of the pokemon species.\n\n    Returns\n    -------\n    t.Optional[PokemonSpecies]\n        Pokemon species model if found, else None.\n\n    Raises\n    ------\n    pokelance.exceptions.ResourceNotFound\n        if pokemon species was not found.\n\n    Examples\n    --------\n\n    &gt;&gt;&gt; from pokelance import PokeLance\n    &gt;&gt;&gt; client = PokeLance()\n    &gt;&gt;&gt; pokemon_species = client.pokemon.get_pokemon_species(1)\n    &gt;&gt;&gt; pokemon_species.name\n    'bulbasaur'\n    \"\"\"\n    route = Endpoint.get_pokemon_species(name)\n    self._validate_resource(self.cache.pokemon_species, name, route)\n    return self.cache.pokemon_species.get(route, None)\n</code></pre>"},{"location":"api_reference/ext/pokemon/#pokelance.ext.pokemon.Pokemon.get_stat","title":"<code>get_stat(name)</code>","text":"<p>Get stat from cache.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Union[str, int]</code> <p>The name or id of the stat.</p> required <p>Returns:</p> Type Description <code>Optional[Stat]</code> <p>Stat model if found, else None.</p> <p>Raises:</p> Type Description <code>ResourceNotFound</code> <p>if stat was not found.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from pokelance import PokeLance\n&gt;&gt;&gt; client = PokeLance()\n&gt;&gt;&gt; stat = client.pokemon.get_stat(1)\n&gt;&gt;&gt; stat.name\n'hp'\n</code></pre> Source code in <code>pokelance/ext/pokemon.py</code> Python<pre><code>def get_stat(self, name: t.Union[str, int]) -&gt; t.Optional[Stat]:\n    \"\"\"\n    Get stat from cache.\n\n    Parameters\n    ----------\n    name: Union[str, int]\n        The name or id of the stat.\n\n    Returns\n    -------\n    t.Optional[Stat]\n        Stat model if found, else None.\n\n    Raises\n    ------\n    pokelance.exceptions.ResourceNotFound\n        if stat was not found.\n\n    Examples\n    --------\n\n    &gt;&gt;&gt; from pokelance import PokeLance\n    &gt;&gt;&gt; client = PokeLance()\n    &gt;&gt;&gt; stat = client.pokemon.get_stat(1)\n    &gt;&gt;&gt; stat.name\n    'hp'\n    \"\"\"\n    route = Endpoint.get_stat(name)\n    self._validate_resource(self.cache.stat, name, route)\n    return self.cache.stat.get(route, None)\n</code></pre>"},{"location":"api_reference/ext/pokemon/#pokelance.ext.pokemon.Pokemon.get_type","title":"<code>get_type(name)</code>","text":"<p>Get type from cache.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Union[str, int]</code> <p>The name or id of the type.</p> required <p>Returns:</p> Type Description <code>Optional[Type]</code> <p>Type model if found, else None.</p> <p>Raises:</p> Type Description <code>ResourceNotFound</code> <p>if type was not found.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from pokelance import PokeLance\n&gt;&gt;&gt; client = PokeLance()\n&gt;&gt;&gt; type_ = client.pokemon.get_type(1)\n&gt;&gt;&gt; type_.name\n'normal'\n</code></pre> Source code in <code>pokelance/ext/pokemon.py</code> Python<pre><code>def get_type(self, name: t.Union[str, int]) -&gt; t.Optional[Type]:\n    \"\"\"\n    Get type from cache.\n\n    Parameters\n    ----------\n    name: Union[str, int]\n        The name or id of the type.\n\n    Returns\n    -------\n    t.Optional[Type]\n        Type model if found, else None.\n\n    Raises\n    ------\n    pokelance.exceptions.ResourceNotFound\n        if type was not found.\n\n    Examples\n    --------\n\n    &gt;&gt;&gt; from pokelance import PokeLance\n    &gt;&gt;&gt; client = PokeLance()\n    &gt;&gt;&gt; type_ = client.pokemon.get_type(1)\n    &gt;&gt;&gt; type_.name\n    'normal'\n    \"\"\"\n    route = Endpoint.get_type(name)\n    self._validate_resource(self.cache.type, name, route)\n    return self.cache.type.get(route, None)\n</code></pre>"},{"location":"api_reference/ext/pokemon/#pokelance.ext.pokemon.Pokemon.setup","title":"<code>setup()</code>  <code>async</code>","text":"<p>Sets up the extension.</p> Source code in <code>pokelance/ext/_base.py</code> Python<pre><code>async def setup(self) -&gt; None:\n    \"\"\"Sets up the extension.\"\"\"\n    for item in dir(self):\n        if item.startswith(\"fetch_\"):\n            data = await self._client.request(\n                t.cast(t.Callable[[], \"Route\"], getattr(Endpoint, f\"get_{item[6:]}_endpoints\"))()\n            )\n            self._cache.load_documents(str(self.__class__.__name__), item[6:], data[\"results\"])\n</code></pre>"},{"location":"api_reference/ext/pokemon/#pokelance.ext.pokemon.setup","title":"<code>setup(lance)</code>","text":"<p>Setup the pokemon cog.</p> Source code in <code>pokelance/ext/pokemon.py</code> Python<pre><code>def setup(lance: \"PokeLance\") -&gt; None:\n    \"\"\"Setup the pokemon cog.\"\"\"\n    lance.add_extension(\"pokemon\", Pokemon(lance.http))\n</code></pre>"},{"location":"api_reference/http/httpclient/","title":"Client","text":""},{"location":"api_reference/http/httpclient/#pokelance.http.HttpClient","title":"<code>pokelance.http.HttpClient(*, cache_size, client, session=None)</code>","text":"<p>The HTTP client for PokeLance.</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>PokeLance</code> <p>The client that this HTTP client is for.</p> required <code>cache_size</code> <code>int</code> <p>The size of the cache.</p> required <code>session</code> <code>Optional[ClientSession]</code> <p>The session to use for the HTTP client.</p> <code>None</code> <p>Attributes:</p> Name Type Description <code>session</code> <code>ClientSession</code> <p>The session to use for the HTTP client.</p> <code>_is_ready</code> <code>bool</code> <p>Whether the HTTP client is ready.</p> <code>_cache</code> <code>Cache</code> <p>The cache to use for the HTTP client.</p> <code>_client</code> <code>PokeLance</code> <p>The client that this HTTP client is for.</p> <code>_tasks_queue</code> <code>List[Task]</code> <p>The queue for the tasks.</p> <p>Initializes the HTTP client.</p> <p>Parameters:</p> Name Type Description Default <code>cache_size</code> <code>int</code> <p>The size of the cache.</p> required <code>client</code> <code>PokeLance</code> <p>The client that this HTTP client is for.</p> required <code>session</code> <code>Optional[ClientSession]</code> <p>The session to use for the HTTP client.</p> <code>None</code> Source code in <code>pokelance/http/__init__.py</code> Python<pre><code>def __init__(\n    self, *, cache_size: int, client: \"PokeLance\", session: t.Optional[aiohttp.ClientSession] = None\n) -&gt; None:\n    \"\"\"Initializes the HTTP client.\n\n    Parameters\n    ----------\n    cache_size: int\n        The size of the cache.\n    client: pokelance.PokeLance\n        The client that this HTTP client is for.\n    session: aiohttp.ClientSession\n        The session to use for the HTTP client.\n    \"\"\"\n    self._client = client\n    self.session = session\n    self._is_ready = False\n    self._cache = Cache(max_size=cache_size, client=self._client)\n    self._tasks_queue: t.List[asyncio.Task[None]] = []\n</code></pre>"},{"location":"api_reference/http/httpclient/#pokelance.http.HttpClient.cache","title":"<code>cache: Cache</code>  <code>property</code>","text":"<p>The cache to use for the HTTP client.</p> <p>Returns:</p> Type Description <code>Cache</code> <p>The cache.</p>"},{"location":"api_reference/http/httpclient/#pokelance.http.HttpClient.close","title":"<code>close()</code>  <code>async</code>","text":"<p>Closes the HTTP client.</p> Source code in <code>pokelance/http/__init__.py</code> Python<pre><code>async def close(self) -&gt; None:\n    \"\"\"Closes the HTTP client.\"\"\"\n    for task in self._tasks_queue:\n        if not task.done():\n            task.cancel()\n            self._client.logger.warning(f\"Cancelled task {task.get_name()}\")\n    if self.session:\n        await self.session.close()\n</code></pre>"},{"location":"api_reference/http/httpclient/#pokelance.http.HttpClient.connect","title":"<code>connect()</code>  <code>async</code>","text":"<p>Connects the HTTP client.</p> Source code in <code>pokelance/http/__init__.py</code> Python<pre><code>async def connect(self) -&gt; None:\n    \"\"\"Connects the HTTP client.\"\"\"\n    if self.session is None:\n        self.session = self.session or aiohttp.ClientSession()\n    if not self._is_ready:\n        if self._client.cache_endpoints:\n            await self._schedule_tasks()\n        self._is_ready = True\n</code></pre>"},{"location":"api_reference/http/httpclient/#pokelance.http.HttpClient.load_audio","title":"<code>load_audio(url)</code>  <code>async</code>","text":"<p>Loads an audio from the url.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The URL to load the audio from.</p> required <p>Returns:</p> Type Description <code>bytes</code> <p>The audio.</p> <p>Raises:</p> Type Description <code>AudioNotFound</code> <p>The audio was not found.</p> Source code in <code>pokelance/http/__init__.py</code> Python<pre><code>async def load_audio(self, url: str) -&gt; bytes:\n    \"\"\"\n    Loads an audio from the url.\n\n    Parameters\n    ----------\n    url: str\n        The URL to load the audio from.\n\n    Returns\n    -------\n    bytes\n        The audio.\n\n    Raises\n    ------\n    pokelance.exceptions.AudioNotFound\n        The audio was not found.\n    \"\"\"\n    await self.connect()\n    _cry_formats = (\"ogg\", \"wav\", \"mp3\")\n    if self.session is not None:\n        async with self.session.get(url) as response:\n            is_cry = any(f_ in response.content_type for f_ in _cry_formats)\n            if 300 &gt; response.status &gt;= 200 and is_cry:\n                self._client.logger.debug(f\"Request to {url} was successful.\")\n                return await response.read()\n            else:\n                self._client.logger.error(f\"Request to {url} was unsuccessful.\")\n                message = f\"Request to {url} was unsuccessful or the URL is not a cry.\"\n                raise AudioNotFound(f\"{message} ({response.content_type})\", Route(), response.status)\n    return b\"\"\n</code></pre>"},{"location":"api_reference/http/httpclient/#pokelance.http.HttpClient.load_image","title":"<code>load_image(url)</code>  <code>async</code>","text":"<p>Loads an image from the url.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The URL to load the image from.</p> required <p>Returns:</p> Type Description <code>bytes</code> <p>The image.</p> <p>Raises:</p> Type Description <code>ImageNotFound</code> <p>The image was not found.</p> Source code in <code>pokelance/http/__init__.py</code> Python<pre><code>async def load_image(self, url: str) -&gt; bytes:\n    \"\"\"Loads an image from the url.\n\n    Parameters\n    ----------\n    url: str\n        The URL to load the image from.\n\n    Returns\n    -------\n    bytes\n        The image.\n\n    Raises\n    ------\n    pokelance.exceptions.ImageNotFound\n        The image was not found.\n    \"\"\"\n    await self.connect()\n    _image_formats = (\"png\", \"jpg\", \"jpeg\", \"gif\", \"webp\", \"svg\")\n    if self.session is not None:\n        async with self.session.get(url) as response:\n            is_image = any(f_ in response.content_type for f_ in _image_formats)\n            if 300 &gt; response.status &gt;= 200 and is_image:\n                self._client.logger.debug(f\"Request to {url} was successful.\")\n                return await response.read()\n            else:\n                self._client.logger.error(f\"Request to {url} was unsuccessful.\")\n                message = f\"Request to {url} was unsuccessful or the URL is not an image.\"\n                raise ImageNotFound(f\"{message} ({response.content_type})\", Route(), response.status)\n    return b\"\"\n</code></pre>"},{"location":"api_reference/http/httpclient/#pokelance.http.HttpClient.ping","title":"<code>ping()</code>  <code>async</code>","text":"<p>Pings the PokeAPI and returns the latency.</p> <p>Returns:</p> Type Description <code>float</code> <p>The latency of the PokeAPI.</p> Source code in <code>pokelance/http/__init__.py</code> Python<pre><code>async def ping(self) -&gt; float:\n    \"\"\"Pings the PokeAPI and returns the latency.\n\n    Returns\n    -------\n    float\n        The latency of the PokeAPI.\n    \"\"\"\n    start = time.perf_counter()\n    await self.request(Route())\n    return time.perf_counter() - start\n</code></pre>"},{"location":"api_reference/http/httpclient/#pokelance.http.HttpClient.request","title":"<code>request(route)</code>  <code>async</code>","text":"<p>Makes a request to the PokeAPI.</p> <p>Parameters:</p> Name Type Description Default <code>route</code> <code>Route</code> <p>The route to use for the request.</p> required <p>Returns:</p> Type Description <code>Any</code> <p>The response from the PokeAPI.</p> <p>Raises:</p> Type Description <code>HTTPException</code> <p>An error occurred while making the request.</p> Source code in <code>pokelance/http/__init__.py</code> Python<pre><code>async def request(self, route: Route) -&gt; t.Any:\n    \"\"\"Makes a request to the PokeAPI.\n\n    Parameters\n    ----------\n    route: pokelance.http.Route\n        The route to use for the request.\n\n    Returns\n    -------\n    t.Any\n        The response from the PokeAPI.\n\n    Raises\n    ------\n    pokelance.exceptions.HTTPException\n        An error occurred while making the request.\n    \"\"\"\n    await self.connect()\n    if self.session is not None:\n        async with self.session.request(route.method, route.url, params=route.payload) as response:\n            if 300 &gt; response.status &gt;= 200:\n                self._client.logger.debug(f\"Request to {route.url} was successful.\")\n                return await response.json()\n            else:\n                self._client.logger.error(f\"Request to {route.url} was unsuccessful.\")\n                raise HTTPException(str(response.reason), route, response.status).create()\n    else:\n        raise HTTPException(\"No session was provided.\", route, -1).create()\n</code></pre>"},{"location":"api_reference/http/routes/","title":"Routes","text":""},{"location":"api_reference/http/routes/#pokelance.http.endpoints","title":"<code>pokelance.http.endpoints</code>","text":""},{"location":"api_reference/http/routes/#pokelance.http.endpoints.Endpoint","title":"<code>Endpoint</code>","text":"<p>Represents an endpoint for the API.</p>"},{"location":"api_reference/http/routes/#pokelance.http.endpoints.Endpoint.get_ability","title":"<code>get_ability(ability)</code>  <code>classmethod</code>","text":"<p>Get an ability by its ID or name.</p> Source code in <code>pokelance/http/endpoints.py</code> Python<pre><code>@classmethod\ndef get_ability(cls, ability: t.Union[int, str]) -&gt; Route:\n    \"\"\"Get an ability by its ID or name.\"\"\"\n    return Route(endpoint=f\"/ability/{ability}\")\n</code></pre>"},{"location":"api_reference/http/routes/#pokelance.http.endpoints.Endpoint.get_ability_endpoints","title":"<code>get_ability_endpoints()</code>  <code>classmethod</code>","text":"<p>Get a list of ability endpoints.</p> Source code in <code>pokelance/http/endpoints.py</code> Python<pre><code>@classmethod\ndef get_ability_endpoints(cls) -&gt; Route:\n    \"\"\"Get a list of ability endpoints.\"\"\"\n    return Route(endpoint=\"/ability\", payload={\"limit\": 10000})\n</code></pre>"},{"location":"api_reference/http/routes/#pokelance.http.endpoints.Endpoint.get_berry","title":"<code>get_berry(berry)</code>  <code>classmethod</code>","text":"<p>Get a berry by its ID or name.</p> Source code in <code>pokelance/http/endpoints.py</code> Python<pre><code>@classmethod\ndef get_berry(cls, berry: t.Union[int, str]) -&gt; Route:\n    \"\"\"Get a berry by its ID or name.\"\"\"\n    return Route(endpoint=f\"/berry/{berry}\")\n</code></pre>"},{"location":"api_reference/http/routes/#pokelance.http.endpoints.Endpoint.get_berry_endpoints","title":"<code>get_berry_endpoints()</code>  <code>classmethod</code>","text":"<p>Get a list of berry endpoints.</p> Source code in <code>pokelance/http/endpoints.py</code> Python<pre><code>@classmethod\ndef get_berry_endpoints(cls) -&gt; Route:\n    \"\"\"Get a list of berry endpoints.\"\"\"\n    return Route(endpoint=\"/berry\", payload={\"limit\": 10000})\n</code></pre>"},{"location":"api_reference/http/routes/#pokelance.http.endpoints.Endpoint.get_berry_firmness","title":"<code>get_berry_firmness(berry_firmness)</code>  <code>classmethod</code>","text":"<p>Get a berry firmness by its ID or name.</p> Source code in <code>pokelance/http/endpoints.py</code> Python<pre><code>@classmethod\ndef get_berry_firmness(cls, berry_firmness: t.Union[int, str]) -&gt; Route:\n    \"\"\"Get a berry firmness by its ID or name.\"\"\"\n    return Route(endpoint=f\"/berry-firmness/{berry_firmness}\")\n</code></pre>"},{"location":"api_reference/http/routes/#pokelance.http.endpoints.Endpoint.get_berry_firmness_endpoints","title":"<code>get_berry_firmness_endpoints()</code>  <code>classmethod</code>","text":"<p>Get a list of berry firmness endpoints.</p> Source code in <code>pokelance/http/endpoints.py</code> Python<pre><code>@classmethod\ndef get_berry_firmness_endpoints(cls) -&gt; Route:\n    \"\"\"Get a list of berry firmness endpoints.\"\"\"\n    return Route(endpoint=\"/berry-firmness\", payload={\"limit\": 10000})\n</code></pre>"},{"location":"api_reference/http/routes/#pokelance.http.endpoints.Endpoint.get_berry_flavor","title":"<code>get_berry_flavor(berry_flavor)</code>  <code>classmethod</code>","text":"<p>Get a berry flavor by its ID or name.</p> Source code in <code>pokelance/http/endpoints.py</code> Python<pre><code>@classmethod\ndef get_berry_flavor(cls, berry_flavor: t.Union[int, str]) -&gt; Route:\n    \"\"\"Get a berry flavor by its ID or name.\"\"\"\n    return Route(endpoint=f\"/berry-flavor/{berry_flavor}\")\n</code></pre>"},{"location":"api_reference/http/routes/#pokelance.http.endpoints.Endpoint.get_berry_flavor_endpoints","title":"<code>get_berry_flavor_endpoints()</code>  <code>classmethod</code>","text":"<p>Get a list of berry flavor endpoints.</p> Source code in <code>pokelance/http/endpoints.py</code> Python<pre><code>@classmethod\ndef get_berry_flavor_endpoints(cls) -&gt; Route:\n    \"\"\"Get a list of berry flavor endpoints.\"\"\"\n    return Route(endpoint=\"/berry-flavor\", payload={\"limit\": 10000})\n</code></pre>"},{"location":"api_reference/http/routes/#pokelance.http.endpoints.Endpoint.get_characteristic","title":"<code>get_characteristic(characteristic)</code>  <code>classmethod</code>","text":"<p>Get a characteristic by its ID.</p> Source code in <code>pokelance/http/endpoints.py</code> Python<pre><code>@classmethod\ndef get_characteristic(cls, characteristic: int) -&gt; Route:\n    \"\"\"Get a characteristic by its ID.\"\"\"\n    return Route(endpoint=f\"/characteristic/{characteristic}\")\n</code></pre>"},{"location":"api_reference/http/routes/#pokelance.http.endpoints.Endpoint.get_characteristic_endpoints","title":"<code>get_characteristic_endpoints()</code>  <code>classmethod</code>","text":"<p>Get a list of characteristic endpoints.</p> Source code in <code>pokelance/http/endpoints.py</code> Python<pre><code>@classmethod\ndef get_characteristic_endpoints(cls) -&gt; Route:\n    \"\"\"Get a list of characteristic endpoints.\"\"\"\n    return Route(endpoint=\"/characteristic\", payload={\"limit\": 10000})\n</code></pre>"},{"location":"api_reference/http/routes/#pokelance.http.endpoints.Endpoint.get_contest_effect","title":"<code>get_contest_effect(contest_effect)</code>  <code>classmethod</code>","text":"<p>Get a contest effect by its ID.</p> Source code in <code>pokelance/http/endpoints.py</code> Python<pre><code>@classmethod\ndef get_contest_effect(cls, contest_effect: int) -&gt; Route:\n    \"\"\"Get a contest effect by its ID.\"\"\"\n    return Route(endpoint=f\"/contest-effect/{contest_effect}\")\n</code></pre>"},{"location":"api_reference/http/routes/#pokelance.http.endpoints.Endpoint.get_contest_effect_endpoints","title":"<code>get_contest_effect_endpoints()</code>  <code>classmethod</code>","text":"<p>Get a list of contest effect endpoints.</p> Source code in <code>pokelance/http/endpoints.py</code> Python<pre><code>@classmethod\ndef get_contest_effect_endpoints(cls) -&gt; Route:\n    \"\"\"Get a list of contest effect endpoints.\"\"\"\n    return Route(endpoint=\"/contest-effect\", payload={\"limit\": 10000})\n</code></pre>"},{"location":"api_reference/http/routes/#pokelance.http.endpoints.Endpoint.get_contest_type","title":"<code>get_contest_type(contest_type)</code>  <code>classmethod</code>","text":"<p>Get a contest type by its ID or name.</p> Source code in <code>pokelance/http/endpoints.py</code> Python<pre><code>@classmethod\ndef get_contest_type(cls, contest_type: t.Union[int, str]) -&gt; Route:\n    \"\"\"Get a contest type by its ID or name.\"\"\"\n    return Route(endpoint=f\"/contest-type/{contest_type}\")\n</code></pre>"},{"location":"api_reference/http/routes/#pokelance.http.endpoints.Endpoint.get_contest_type_endpoints","title":"<code>get_contest_type_endpoints()</code>  <code>classmethod</code>","text":"<p>Get a list of contest type endpoints.</p> Source code in <code>pokelance/http/endpoints.py</code> Python<pre><code>@classmethod\ndef get_contest_type_endpoints(cls) -&gt; Route:\n    \"\"\"Get a list of contest type endpoints.\"\"\"\n    return Route(endpoint=\"/contest-type\", payload={\"limit\": 10000})\n</code></pre>"},{"location":"api_reference/http/routes/#pokelance.http.endpoints.Endpoint.get_egg_group","title":"<code>get_egg_group(egg_group)</code>  <code>classmethod</code>","text":"<p>Get an egg group by its ID or name.</p> Source code in <code>pokelance/http/endpoints.py</code> Python<pre><code>@classmethod\ndef get_egg_group(cls, egg_group: t.Union[int, str]) -&gt; Route:\n    \"\"\"Get an egg group by its ID or name.\"\"\"\n    return Route(endpoint=f\"/egg-group/{egg_group}\")\n</code></pre>"},{"location":"api_reference/http/routes/#pokelance.http.endpoints.Endpoint.get_egg_group_endpoints","title":"<code>get_egg_group_endpoints()</code>  <code>classmethod</code>","text":"<p>Get a list of egg group endpoints.</p> Source code in <code>pokelance/http/endpoints.py</code> Python<pre><code>@classmethod\ndef get_egg_group_endpoints(cls) -&gt; Route:\n    \"\"\"Get a list of egg group endpoints.\"\"\"\n    return Route(endpoint=\"/egg-group\", payload={\"limit\": 10000})\n</code></pre>"},{"location":"api_reference/http/routes/#pokelance.http.endpoints.Endpoint.get_encounter_condition","title":"<code>get_encounter_condition(encounter_condition)</code>  <code>classmethod</code>","text":"<p>Get an encounter condition by its ID or name.</p> Source code in <code>pokelance/http/endpoints.py</code> Python<pre><code>@classmethod\ndef get_encounter_condition(cls, encounter_condition: t.Union[int, str]) -&gt; Route:\n    \"\"\"Get an encounter condition by its ID or name.\"\"\"\n    return Route(endpoint=f\"/encounter-condition/{encounter_condition}\")\n</code></pre>"},{"location":"api_reference/http/routes/#pokelance.http.endpoints.Endpoint.get_encounter_condition_endpoints","title":"<code>get_encounter_condition_endpoints()</code>  <code>classmethod</code>","text":"<p>Get a list of encounter condition endpoints.</p> Source code in <code>pokelance/http/endpoints.py</code> Python<pre><code>@classmethod\ndef get_encounter_condition_endpoints(cls) -&gt; Route:\n    \"\"\"Get a list of encounter condition endpoints.\"\"\"\n    return Route(endpoint=\"/encounter-condition\", payload={\"limit\": 10000})\n</code></pre>"},{"location":"api_reference/http/routes/#pokelance.http.endpoints.Endpoint.get_encounter_condition_value","title":"<code>get_encounter_condition_value(encounter_condition_value)</code>  <code>classmethod</code>","text":"<p>Get an encounter condition value by its ID or name.</p> Source code in <code>pokelance/http/endpoints.py</code> Python<pre><code>@classmethod\ndef get_encounter_condition_value(cls, encounter_condition_value: t.Union[int, str]) -&gt; Route:\n    \"\"\"Get an encounter condition value by its ID or name.\"\"\"\n    return Route(endpoint=f\"/encounter-condition-value/{encounter_condition_value}\")\n</code></pre>"},{"location":"api_reference/http/routes/#pokelance.http.endpoints.Endpoint.get_encounter_condition_value_endpoints","title":"<code>get_encounter_condition_value_endpoints()</code>  <code>classmethod</code>","text":"<p>Get a list of encounter condition value endpoints.</p> Source code in <code>pokelance/http/endpoints.py</code> Python<pre><code>@classmethod\ndef get_encounter_condition_value_endpoints(cls) -&gt; Route:\n    \"\"\"Get a list of encounter condition value endpoints.\"\"\"\n    return Route(endpoint=\"/encounter-condition-value\", payload={\"limit\": 10000})\n</code></pre>"},{"location":"api_reference/http/routes/#pokelance.http.endpoints.Endpoint.get_encounter_method","title":"<code>get_encounter_method(encounter_method)</code>  <code>classmethod</code>","text":"<p>Get an encounter method by its ID or name.</p> Source code in <code>pokelance/http/endpoints.py</code> Python<pre><code>@classmethod\ndef get_encounter_method(cls, encounter_method: t.Union[int, str]) -&gt; Route:\n    \"\"\"Get an encounter method by its ID or name.\"\"\"\n    return Route(endpoint=f\"/encounter-method/{encounter_method}\")\n</code></pre>"},{"location":"api_reference/http/routes/#pokelance.http.endpoints.Endpoint.get_encounter_method_endpoints","title":"<code>get_encounter_method_endpoints()</code>  <code>classmethod</code>","text":"<p>Get a list of encounter method endpoints.</p> Source code in <code>pokelance/http/endpoints.py</code> Python<pre><code>@classmethod\ndef get_encounter_method_endpoints(cls) -&gt; Route:\n    \"\"\"Get a list of encounter method endpoints.\"\"\"\n    return Route(endpoint=\"/encounter-method\", payload={\"limit\": 10000})\n</code></pre>"},{"location":"api_reference/http/routes/#pokelance.http.endpoints.Endpoint.get_evolution_chain","title":"<code>get_evolution_chain(evolution_chain)</code>  <code>classmethod</code>","text":"<p>Get an evolution chain by its ID.</p> Source code in <code>pokelance/http/endpoints.py</code> Python<pre><code>@classmethod\ndef get_evolution_chain(cls, evolution_chain: int) -&gt; Route:\n    \"\"\"Get an evolution chain by its ID.\"\"\"\n    return Route(endpoint=f\"/evolution-chain/{evolution_chain}\")\n</code></pre>"},{"location":"api_reference/http/routes/#pokelance.http.endpoints.Endpoint.get_evolution_chain_endpoints","title":"<code>get_evolution_chain_endpoints()</code>  <code>classmethod</code>","text":"<p>Get a list of evolution chain endpoints.</p> Source code in <code>pokelance/http/endpoints.py</code> Python<pre><code>@classmethod\ndef get_evolution_chain_endpoints(cls) -&gt; Route:\n    \"\"\"Get a list of evolution chain endpoints.\"\"\"\n    return Route(endpoint=\"/evolution-chain\", payload={\"limit\": 10000})\n</code></pre>"},{"location":"api_reference/http/routes/#pokelance.http.endpoints.Endpoint.get_evolution_trigger","title":"<code>get_evolution_trigger(evolution_trigger)</code>  <code>classmethod</code>","text":"<p>Get an evolution trigger by its ID or name.</p> Source code in <code>pokelance/http/endpoints.py</code> Python<pre><code>@classmethod\ndef get_evolution_trigger(cls, evolution_trigger: t.Union[int, str]) -&gt; Route:\n    \"\"\"Get an evolution trigger by its ID or name.\"\"\"\n    return Route(endpoint=f\"/evolution-trigger/{evolution_trigger}\")\n</code></pre>"},{"location":"api_reference/http/routes/#pokelance.http.endpoints.Endpoint.get_evolution_trigger_endpoints","title":"<code>get_evolution_trigger_endpoints()</code>  <code>classmethod</code>","text":"<p>Get a list of evolution trigger endpoints.</p> Source code in <code>pokelance/http/endpoints.py</code> Python<pre><code>@classmethod\ndef get_evolution_trigger_endpoints(cls) -&gt; Route:\n    \"\"\"Get a list of evolution trigger endpoints.\"\"\"\n    return Route(endpoint=\"/evolution-trigger\", payload={\"limit\": 10000})\n</code></pre>"},{"location":"api_reference/http/routes/#pokelance.http.endpoints.Endpoint.get_gender","title":"<code>get_gender(gender)</code>  <code>classmethod</code>","text":"<p>Get a gender by its ID or name.</p> Source code in <code>pokelance/http/endpoints.py</code> Python<pre><code>@classmethod\ndef get_gender(cls, gender: t.Union[int, str]) -&gt; Route:\n    \"\"\"Get a gender by its ID or name.\"\"\"\n    return Route(endpoint=f\"/gender/{gender}\")\n</code></pre>"},{"location":"api_reference/http/routes/#pokelance.http.endpoints.Endpoint.get_gender_endpoints","title":"<code>get_gender_endpoints()</code>  <code>classmethod</code>","text":"<p>Get a list of gender endpoints.</p> Source code in <code>pokelance/http/endpoints.py</code> Python<pre><code>@classmethod\ndef get_gender_endpoints(cls) -&gt; Route:\n    \"\"\"Get a list of gender endpoints.\"\"\"\n    return Route(endpoint=\"/gender\", payload={\"limit\": 10000})\n</code></pre>"},{"location":"api_reference/http/routes/#pokelance.http.endpoints.Endpoint.get_generation","title":"<code>get_generation(generation)</code>  <code>classmethod</code>","text":"<p>Get a generation by its ID or name.</p> Source code in <code>pokelance/http/endpoints.py</code> Python<pre><code>@classmethod\ndef get_generation(cls, generation: t.Union[int, str]) -&gt; Route:\n    \"\"\"Get a generation by its ID or name.\"\"\"\n    return Route(endpoint=f\"/generation/{generation}\")\n</code></pre>"},{"location":"api_reference/http/routes/#pokelance.http.endpoints.Endpoint.get_generation_endpoints","title":"<code>get_generation_endpoints()</code>  <code>classmethod</code>","text":"<p>Get a list of generation endpoints.</p> Source code in <code>pokelance/http/endpoints.py</code> Python<pre><code>@classmethod\ndef get_generation_endpoints(cls) -&gt; Route:\n    \"\"\"Get a list of generation endpoints.\"\"\"\n    return Route(endpoint=\"/generation\", payload={\"limit\": 10000})\n</code></pre>"},{"location":"api_reference/http/routes/#pokelance.http.endpoints.Endpoint.get_growth_rate","title":"<code>get_growth_rate(growth_rate)</code>  <code>classmethod</code>","text":"<p>Get a growth rate by its ID or name.</p> Source code in <code>pokelance/http/endpoints.py</code> Python<pre><code>@classmethod\ndef get_growth_rate(cls, growth_rate: t.Union[int, str]) -&gt; Route:\n    \"\"\"Get a growth rate by its ID or name.\"\"\"\n    return Route(endpoint=f\"/growth-rate/{growth_rate}\")\n</code></pre>"},{"location":"api_reference/http/routes/#pokelance.http.endpoints.Endpoint.get_growth_rate_endpoints","title":"<code>get_growth_rate_endpoints()</code>  <code>classmethod</code>","text":"<p>Get a list of growth rate endpoints.</p> Source code in <code>pokelance/http/endpoints.py</code> Python<pre><code>@classmethod\ndef get_growth_rate_endpoints(cls) -&gt; Route:\n    \"\"\"Get a list of growth rate endpoints.\"\"\"\n    return Route(endpoint=\"/growth-rate\", payload={\"limit\": 10000})\n</code></pre>"},{"location":"api_reference/http/routes/#pokelance.http.endpoints.Endpoint.get_item","title":"<code>get_item(item)</code>  <code>classmethod</code>","text":"<p>Get an item by its ID or name.</p> Source code in <code>pokelance/http/endpoints.py</code> Python<pre><code>@classmethod\ndef get_item(cls, item: t.Union[int, str]) -&gt; Route:\n    \"\"\"Get an item by its ID or name.\"\"\"\n    return Route(endpoint=f\"/item/{item}\")\n</code></pre>"},{"location":"api_reference/http/routes/#pokelance.http.endpoints.Endpoint.get_item_attribute","title":"<code>get_item_attribute(item_attribute)</code>  <code>classmethod</code>","text":"<p>Get an item attribute by its ID or name.</p> Source code in <code>pokelance/http/endpoints.py</code> Python<pre><code>@classmethod\ndef get_item_attribute(cls, item_attribute: t.Union[int, str]) -&gt; Route:\n    \"\"\"Get an item attribute by its ID or name.\"\"\"\n    return Route(endpoint=f\"/item-attribute/{item_attribute}\")\n</code></pre>"},{"location":"api_reference/http/routes/#pokelance.http.endpoints.Endpoint.get_item_attribute_endpoints","title":"<code>get_item_attribute_endpoints()</code>  <code>classmethod</code>","text":"<p>Get a list of item attribute endpoints.</p> Source code in <code>pokelance/http/endpoints.py</code> Python<pre><code>@classmethod\ndef get_item_attribute_endpoints(cls) -&gt; Route:\n    \"\"\"Get a list of item attribute endpoints.\"\"\"\n    return Route(endpoint=\"/item-attribute\", payload={\"limit\": 10000})\n</code></pre>"},{"location":"api_reference/http/routes/#pokelance.http.endpoints.Endpoint.get_item_category","title":"<code>get_item_category(item_category)</code>  <code>classmethod</code>","text":"<p>Get an item category by its ID or name.</p> Source code in <code>pokelance/http/endpoints.py</code> Python<pre><code>@classmethod\ndef get_item_category(cls, item_category: t.Union[int, str]) -&gt; Route:\n    \"\"\"Get an item category by its ID or name.\"\"\"\n    return Route(endpoint=f\"/item-category/{item_category}\")\n</code></pre>"},{"location":"api_reference/http/routes/#pokelance.http.endpoints.Endpoint.get_item_category_endpoints","title":"<code>get_item_category_endpoints()</code>  <code>classmethod</code>","text":"<p>Get a list of item category endpoints.</p> Source code in <code>pokelance/http/endpoints.py</code> Python<pre><code>@classmethod\ndef get_item_category_endpoints(cls) -&gt; Route:\n    \"\"\"Get a list of item category endpoints.\"\"\"\n    return Route(endpoint=\"/item-category\", payload={\"limit\": 10000})\n</code></pre>"},{"location":"api_reference/http/routes/#pokelance.http.endpoints.Endpoint.get_item_endpoints","title":"<code>get_item_endpoints()</code>  <code>classmethod</code>","text":"<p>Get a list of item endpoints.</p> Source code in <code>pokelance/http/endpoints.py</code> Python<pre><code>@classmethod\ndef get_item_endpoints(cls) -&gt; Route:\n    \"\"\"Get a list of item endpoints.\"\"\"\n    return Route(endpoint=\"/item\", payload={\"limit\": 10000})\n</code></pre>"},{"location":"api_reference/http/routes/#pokelance.http.endpoints.Endpoint.get_item_fling_effect","title":"<code>get_item_fling_effect(item_fling_effect)</code>  <code>classmethod</code>","text":"<p>Get an item fling effect by its ID or name.</p> Source code in <code>pokelance/http/endpoints.py</code> Python<pre><code>@classmethod\ndef get_item_fling_effect(cls, item_fling_effect: t.Union[int, str]) -&gt; Route:\n    \"\"\"Get an item fling effect by its ID or name.\"\"\"\n    return Route(endpoint=f\"/item-fling-effect/{item_fling_effect}\")\n</code></pre>"},{"location":"api_reference/http/routes/#pokelance.http.endpoints.Endpoint.get_item_fling_effect_endpoints","title":"<code>get_item_fling_effect_endpoints()</code>  <code>classmethod</code>","text":"<p>Get a list of item fling effect endpoints.</p> Source code in <code>pokelance/http/endpoints.py</code> Python<pre><code>@classmethod\ndef get_item_fling_effect_endpoints(cls) -&gt; Route:\n    \"\"\"Get a list of item fling effect endpoints.\"\"\"\n    return Route(endpoint=\"/item-fling-effect\", payload={\"limit\": 10000})\n</code></pre>"},{"location":"api_reference/http/routes/#pokelance.http.endpoints.Endpoint.get_item_pocket","title":"<code>get_item_pocket(item_pocket)</code>  <code>classmethod</code>","text":"<p>Get an item pocket by its ID or name.</p> Source code in <code>pokelance/http/endpoints.py</code> Python<pre><code>@classmethod\ndef get_item_pocket(cls, item_pocket: t.Union[int, str]) -&gt; Route:\n    \"\"\"Get an item pocket by its ID or name.\"\"\"\n    return Route(endpoint=f\"/item-pocket/{item_pocket}\")\n</code></pre>"},{"location":"api_reference/http/routes/#pokelance.http.endpoints.Endpoint.get_item_pocket_endpoints","title":"<code>get_item_pocket_endpoints()</code>  <code>classmethod</code>","text":"<p>Get a list of item pocket endpoints.</p> Source code in <code>pokelance/http/endpoints.py</code> Python<pre><code>@classmethod\ndef get_item_pocket_endpoints(cls) -&gt; Route:\n    \"\"\"Get a list of item pocket endpoints.\"\"\"\n    return Route(endpoint=\"/item-pocket\", payload={\"limit\": 10000})\n</code></pre>"},{"location":"api_reference/http/routes/#pokelance.http.endpoints.Endpoint.get_language","title":"<code>get_language(language)</code>  <code>classmethod</code>","text":"<p>Gets a language.</p> Source code in <code>pokelance/http/endpoints.py</code> Python<pre><code>@classmethod\ndef get_language(cls, language: t.Union[str, int]) -&gt; Route:\n    \"\"\"Gets a language.\"\"\"\n    return Route(endpoint=f\"/language/{language}\")\n</code></pre>"},{"location":"api_reference/http/routes/#pokelance.http.endpoints.Endpoint.get_language_endpoints","title":"<code>get_language_endpoints()</code>  <code>classmethod</code>","text":"<p>Gets the language endpoints.</p> Source code in <code>pokelance/http/endpoints.py</code> Python<pre><code>@classmethod\ndef get_language_endpoints(cls) -&gt; Route:\n    \"\"\"Gets the language endpoints.\"\"\"\n    return Route(endpoint=\"/language\", payload={\"limit\": 10000})\n</code></pre>"},{"location":"api_reference/http/routes/#pokelance.http.endpoints.Endpoint.get_location","title":"<code>get_location(location)</code>  <code>classmethod</code>","text":"<p>Get a location by its ID or name.</p> Source code in <code>pokelance/http/endpoints.py</code> Python<pre><code>@classmethod\ndef get_location(cls, location: t.Union[int, str]) -&gt; Route:\n    \"\"\"Get a location by its ID or name.\"\"\"\n    return Route(endpoint=f\"/location/{location}\")\n</code></pre>"},{"location":"api_reference/http/routes/#pokelance.http.endpoints.Endpoint.get_location_area","title":"<code>get_location_area(location_area)</code>  <code>classmethod</code>","text":"<p>Get a location area by its ID or name.</p> Source code in <code>pokelance/http/endpoints.py</code> Python<pre><code>@classmethod\ndef get_location_area(cls, location_area: t.Union[int, str]) -&gt; Route:\n    \"\"\"Get a location area by its ID or name.\"\"\"\n    return Route(endpoint=f\"/location-area/{location_area}\")\n</code></pre>"},{"location":"api_reference/http/routes/#pokelance.http.endpoints.Endpoint.get_location_area_encounter","title":"<code>get_location_area_encounter(name)</code>  <code>classmethod</code>","text":"<p>Get a location area encounter by its ID or name.</p> Source code in <code>pokelance/http/endpoints.py</code> Python<pre><code>@classmethod\ndef get_location_area_encounter(cls, name: t.Union[int, str]) -&gt; Route:\n    \"\"\"Get a location area encounter by its ID or name.\"\"\"\n    return Route(endpoint=f\"/pokemon/{name}/encounters\")\n</code></pre>"},{"location":"api_reference/http/routes/#pokelance.http.endpoints.Endpoint.get_location_area_encounter_endpoints","title":"<code>get_location_area_encounter_endpoints()</code>  <code>classmethod</code>","text":"<p>Get a list of location area encounter endpoints.</p> Source code in <code>pokelance/http/endpoints.py</code> Python<pre><code>@classmethod\ndef get_location_area_encounter_endpoints(cls) -&gt; Route:\n    \"\"\"Get a list of location area encounter endpoints.\"\"\"\n    return Route(endpoint=\"/pokemon\", payload={\"limit\": 10000})\n</code></pre>"},{"location":"api_reference/http/routes/#pokelance.http.endpoints.Endpoint.get_location_area_endpoints","title":"<code>get_location_area_endpoints()</code>  <code>classmethod</code>","text":"<p>Get a list of location area endpoints.</p> Source code in <code>pokelance/http/endpoints.py</code> Python<pre><code>@classmethod\ndef get_location_area_endpoints(cls) -&gt; Route:\n    \"\"\"Get a list of location area endpoints.\"\"\"\n    return Route(endpoint=\"/location-area\", payload={\"limit\": 10000})\n</code></pre>"},{"location":"api_reference/http/routes/#pokelance.http.endpoints.Endpoint.get_location_endpoints","title":"<code>get_location_endpoints()</code>  <code>classmethod</code>","text":"<p>Get a list of location endpoints.</p> Source code in <code>pokelance/http/endpoints.py</code> Python<pre><code>@classmethod\ndef get_location_endpoints(cls) -&gt; Route:\n    \"\"\"Get a list of location endpoints.\"\"\"\n    return Route(endpoint=\"/location\", payload={\"limit\": 10000})\n</code></pre>"},{"location":"api_reference/http/routes/#pokelance.http.endpoints.Endpoint.get_machine","title":"<code>get_machine(machine)</code>  <code>classmethod</code>","text":"<p>Get a machine by its ID.</p> Source code in <code>pokelance/http/endpoints.py</code> Python<pre><code>@classmethod\ndef get_machine(cls, machine: int) -&gt; Route:\n    \"\"\"Get a machine by its ID.\"\"\"\n    return Route(endpoint=f\"/machine/{machine}\")\n</code></pre>"},{"location":"api_reference/http/routes/#pokelance.http.endpoints.Endpoint.get_machine_endpoints","title":"<code>get_machine_endpoints()</code>  <code>classmethod</code>","text":"<p>Get a list of machine endpoints.</p> Source code in <code>pokelance/http/endpoints.py</code> Python<pre><code>@classmethod\ndef get_machine_endpoints(cls) -&gt; Route:\n    \"\"\"Get a list of machine endpoints.\"\"\"\n    return Route(endpoint=\"/machine\", payload={\"limit\": 10000})\n</code></pre>"},{"location":"api_reference/http/routes/#pokelance.http.endpoints.Endpoint.get_move","title":"<code>get_move(move)</code>  <code>classmethod</code>","text":"<p>Get a move by its ID or name.</p> Source code in <code>pokelance/http/endpoints.py</code> Python<pre><code>@classmethod\ndef get_move(cls, move: t.Union[int, str]) -&gt; Route:\n    \"\"\"Get a move by its ID or name.\"\"\"\n    return Route(endpoint=f\"/move/{move}\")\n</code></pre>"},{"location":"api_reference/http/routes/#pokelance.http.endpoints.Endpoint.get_move_ailment","title":"<code>get_move_ailment(move_ailment)</code>  <code>classmethod</code>","text":"<p>Get a move ailment by its ID or name.</p> Source code in <code>pokelance/http/endpoints.py</code> Python<pre><code>@classmethod\ndef get_move_ailment(cls, move_ailment: t.Union[int, str]) -&gt; Route:\n    \"\"\"Get a move ailment by its ID or name.\"\"\"\n    return Route(endpoint=f\"/move-ailment/{move_ailment}\")\n</code></pre>"},{"location":"api_reference/http/routes/#pokelance.http.endpoints.Endpoint.get_move_ailment_endpoints","title":"<code>get_move_ailment_endpoints()</code>  <code>classmethod</code>","text":"<p>Get a list of move ailment endpoints.</p> Source code in <code>pokelance/http/endpoints.py</code> Python<pre><code>@classmethod\ndef get_move_ailment_endpoints(cls) -&gt; Route:\n    \"\"\"Get a list of move ailment endpoints.\"\"\"\n    return Route(endpoint=\"/move-ailment\", payload={\"limit\": 10000})\n</code></pre>"},{"location":"api_reference/http/routes/#pokelance.http.endpoints.Endpoint.get_move_battle_style","title":"<code>get_move_battle_style(move_battle_style)</code>  <code>classmethod</code>","text":"<p>Get a move battle style by its ID or name.</p> Source code in <code>pokelance/http/endpoints.py</code> Python<pre><code>@classmethod\ndef get_move_battle_style(cls, move_battle_style: t.Union[int, str]) -&gt; Route:\n    \"\"\"Get a move battle style by its ID or name.\"\"\"\n    return Route(endpoint=f\"/move-battle-style/{move_battle_style}\")\n</code></pre>"},{"location":"api_reference/http/routes/#pokelance.http.endpoints.Endpoint.get_move_battle_style_endpoints","title":"<code>get_move_battle_style_endpoints()</code>  <code>classmethod</code>","text":"<p>Get a list of move battle style endpoints.</p> Source code in <code>pokelance/http/endpoints.py</code> Python<pre><code>@classmethod\ndef get_move_battle_style_endpoints(cls) -&gt; Route:\n    \"\"\"Get a list of move battle style endpoints.\"\"\"\n    return Route(endpoint=\"/move-battle-style\", payload={\"limit\": 10000})\n</code></pre>"},{"location":"api_reference/http/routes/#pokelance.http.endpoints.Endpoint.get_move_category","title":"<code>get_move_category(move_category)</code>  <code>classmethod</code>","text":"<p>Get a move category by its ID or name.</p> Source code in <code>pokelance/http/endpoints.py</code> Python<pre><code>@classmethod\ndef get_move_category(cls, move_category: t.Union[int, str]) -&gt; Route:\n    \"\"\"Get a move category by its ID or name.\"\"\"\n    return Route(endpoint=f\"/move-category/{move_category}\")\n</code></pre>"},{"location":"api_reference/http/routes/#pokelance.http.endpoints.Endpoint.get_move_category_endpoints","title":"<code>get_move_category_endpoints()</code>  <code>classmethod</code>","text":"<p>Get a list of move category endpoints.</p> Source code in <code>pokelance/http/endpoints.py</code> Python<pre><code>@classmethod\ndef get_move_category_endpoints(cls) -&gt; Route:\n    \"\"\"Get a list of move category endpoints.\"\"\"\n    return Route(endpoint=\"/move-category\", payload={\"limit\": 10000})\n</code></pre>"},{"location":"api_reference/http/routes/#pokelance.http.endpoints.Endpoint.get_move_damage_class","title":"<code>get_move_damage_class(move_damage_class)</code>  <code>classmethod</code>","text":"<p>Get a move damage class by its ID or name.</p> Source code in <code>pokelance/http/endpoints.py</code> Python<pre><code>@classmethod\ndef get_move_damage_class(cls, move_damage_class: t.Union[int, str]) -&gt; Route:\n    \"\"\"Get a move damage class by its ID or name.\"\"\"\n    return Route(endpoint=f\"/move-damage-class/{move_damage_class}\")\n</code></pre>"},{"location":"api_reference/http/routes/#pokelance.http.endpoints.Endpoint.get_move_damage_class_endpoints","title":"<code>get_move_damage_class_endpoints()</code>  <code>classmethod</code>","text":"<p>Get a list of move damage class endpoints.</p> Source code in <code>pokelance/http/endpoints.py</code> Python<pre><code>@classmethod\ndef get_move_damage_class_endpoints(cls) -&gt; Route:\n    \"\"\"Get a list of move damage class endpoints.\"\"\"\n    return Route(endpoint=\"/move-damage-class\", payload={\"limit\": 10000})\n</code></pre>"},{"location":"api_reference/http/routes/#pokelance.http.endpoints.Endpoint.get_move_endpoints","title":"<code>get_move_endpoints()</code>  <code>classmethod</code>","text":"<p>Get a list of move endpoints.</p> Source code in <code>pokelance/http/endpoints.py</code> Python<pre><code>@classmethod\ndef get_move_endpoints(cls) -&gt; Route:\n    \"\"\"Get a list of move endpoints.\"\"\"\n    return Route(endpoint=\"/move\", payload={\"limit\": 10000})\n</code></pre>"},{"location":"api_reference/http/routes/#pokelance.http.endpoints.Endpoint.get_move_learn_method","title":"<code>get_move_learn_method(move_learn_method)</code>  <code>classmethod</code>","text":"<p>Get a move learn method by its ID or name.</p> Source code in <code>pokelance/http/endpoints.py</code> Python<pre><code>@classmethod\ndef get_move_learn_method(cls, move_learn_method: t.Union[int, str]) -&gt; Route:\n    \"\"\"Get a move learn method by its ID or name.\"\"\"\n    return Route(endpoint=f\"/move-learn-method/{move_learn_method}\")\n</code></pre>"},{"location":"api_reference/http/routes/#pokelance.http.endpoints.Endpoint.get_move_learn_method_endpoints","title":"<code>get_move_learn_method_endpoints()</code>  <code>classmethod</code>","text":"<p>Get a list of move learn method endpoints.</p> Source code in <code>pokelance/http/endpoints.py</code> Python<pre><code>@classmethod\ndef get_move_learn_method_endpoints(cls) -&gt; Route:\n    \"\"\"Get a list of move learn method endpoints.\"\"\"\n    return Route(endpoint=\"/move-learn-method\", payload={\"limit\": 10000})\n</code></pre>"},{"location":"api_reference/http/routes/#pokelance.http.endpoints.Endpoint.get_move_target","title":"<code>get_move_target(move_target)</code>  <code>classmethod</code>","text":"<p>Get a move target by its ID or name.</p> Source code in <code>pokelance/http/endpoints.py</code> Python<pre><code>@classmethod\ndef get_move_target(cls, move_target: t.Union[int, str]) -&gt; Route:\n    \"\"\"Get a move target by its ID or name.\"\"\"\n    return Route(endpoint=f\"/move-target/{move_target}\")\n</code></pre>"},{"location":"api_reference/http/routes/#pokelance.http.endpoints.Endpoint.get_move_target_endpoints","title":"<code>get_move_target_endpoints()</code>  <code>classmethod</code>","text":"<p>Get a list of move target endpoints.</p> Source code in <code>pokelance/http/endpoints.py</code> Python<pre><code>@classmethod\ndef get_move_target_endpoints(cls) -&gt; Route:\n    \"\"\"Get a list of move target endpoints.\"\"\"\n    return Route(endpoint=\"/move-target\", payload={\"limit\": 10000})\n</code></pre>"},{"location":"api_reference/http/routes/#pokelance.http.endpoints.Endpoint.get_nature","title":"<code>get_nature(nature)</code>  <code>classmethod</code>","text":"<p>Get a nature by its ID or name.</p> Source code in <code>pokelance/http/endpoints.py</code> Python<pre><code>@classmethod\ndef get_nature(cls, nature: t.Union[int, str]) -&gt; Route:\n    \"\"\"Get a nature by its ID or name.\"\"\"\n    return Route(endpoint=f\"/nature/{nature}\")\n</code></pre>"},{"location":"api_reference/http/routes/#pokelance.http.endpoints.Endpoint.get_nature_endpoints","title":"<code>get_nature_endpoints()</code>  <code>classmethod</code>","text":"<p>Get a list of nature endpoints.</p> Source code in <code>pokelance/http/endpoints.py</code> Python<pre><code>@classmethod\ndef get_nature_endpoints(cls) -&gt; Route:\n    \"\"\"Get a list of nature endpoints.\"\"\"\n    return Route(endpoint=\"/nature\", payload={\"limit\": 10000})\n</code></pre>"},{"location":"api_reference/http/routes/#pokelance.http.endpoints.Endpoint.get_pal_park_area","title":"<code>get_pal_park_area(pal_park_area)</code>  <code>classmethod</code>","text":"<p>Get a pal park area by its ID or name.</p> Source code in <code>pokelance/http/endpoints.py</code> Python<pre><code>@classmethod\ndef get_pal_park_area(cls, pal_park_area: t.Union[int, str]) -&gt; Route:\n    \"\"\"Get a pal park area by its ID or name.\"\"\"\n    return Route(endpoint=f\"/pal-park-area/{pal_park_area}\")\n</code></pre>"},{"location":"api_reference/http/routes/#pokelance.http.endpoints.Endpoint.get_pal_park_area_endpoints","title":"<code>get_pal_park_area_endpoints()</code>  <code>classmethod</code>","text":"<p>Get a list of pal park area endpoints.</p> Source code in <code>pokelance/http/endpoints.py</code> Python<pre><code>@classmethod\ndef get_pal_park_area_endpoints(cls) -&gt; Route:\n    \"\"\"Get a list of pal park area endpoints.\"\"\"\n    return Route(endpoint=\"/pal-park-area\", payload={\"limit\": 10000})\n</code></pre>"},{"location":"api_reference/http/routes/#pokelance.http.endpoints.Endpoint.get_pokeathlon_stat","title":"<code>get_pokeathlon_stat(pokeathlon_stat)</code>  <code>classmethod</code>","text":"<p>Get a pokeathlon stat by its ID or name.</p> Source code in <code>pokelance/http/endpoints.py</code> Python<pre><code>@classmethod\ndef get_pokeathlon_stat(cls, pokeathlon_stat: t.Union[int, str]) -&gt; Route:\n    \"\"\"Get a pokeathlon stat by its ID or name.\"\"\"\n    return Route(endpoint=f\"/pokeathlon-stat/{pokeathlon_stat}\")\n</code></pre>"},{"location":"api_reference/http/routes/#pokelance.http.endpoints.Endpoint.get_pokeathlon_stat_endpoints","title":"<code>get_pokeathlon_stat_endpoints()</code>  <code>classmethod</code>","text":"<p>Get a list of pokeathlon stat endpoints.</p> Source code in <code>pokelance/http/endpoints.py</code> Python<pre><code>@classmethod\ndef get_pokeathlon_stat_endpoints(cls) -&gt; Route:\n    \"\"\"Get a list of pokeathlon stat endpoints.\"\"\"\n    return Route(endpoint=\"/pokeathlon-stat\", payload={\"limit\": 10000})\n</code></pre>"},{"location":"api_reference/http/routes/#pokelance.http.endpoints.Endpoint.get_pokedex","title":"<code>get_pokedex(pokedex)</code>  <code>classmethod</code>","text":"<p>Get a pokedex by its ID or name.</p> Source code in <code>pokelance/http/endpoints.py</code> Python<pre><code>@classmethod\ndef get_pokedex(cls, pokedex: t.Union[int, str]) -&gt; Route:\n    \"\"\"Get a pokedex by its ID or name.\"\"\"\n    return Route(endpoint=f\"/pokedex/{pokedex}\")\n</code></pre>"},{"location":"api_reference/http/routes/#pokelance.http.endpoints.Endpoint.get_pokedex_endpoints","title":"<code>get_pokedex_endpoints()</code>  <code>classmethod</code>","text":"<p>Get a list of pokedex endpoints.</p> Source code in <code>pokelance/http/endpoints.py</code> Python<pre><code>@classmethod\ndef get_pokedex_endpoints(cls) -&gt; Route:\n    \"\"\"Get a list of pokedex endpoints.\"\"\"\n    return Route(endpoint=\"/pokedex\", payload={\"limit\": 10000})\n</code></pre>"},{"location":"api_reference/http/routes/#pokelance.http.endpoints.Endpoint.get_pokemon","title":"<code>get_pokemon(pokemon)</code>  <code>classmethod</code>","text":"<p>Get a pokemon by its ID or name.</p> Source code in <code>pokelance/http/endpoints.py</code> Python<pre><code>@classmethod\ndef get_pokemon(cls, pokemon: t.Union[int, str]) -&gt; Route:\n    \"\"\"Get a pokemon by its ID or name.\"\"\"\n    return Route(endpoint=f\"/pokemon/{pokemon}\")\n</code></pre>"},{"location":"api_reference/http/routes/#pokelance.http.endpoints.Endpoint.get_pokemon_color","title":"<code>get_pokemon_color(pokemon_color)</code>  <code>classmethod</code>","text":"<p>Get a pokemon color by its ID or name.</p> Source code in <code>pokelance/http/endpoints.py</code> Python<pre><code>@classmethod\ndef get_pokemon_color(cls, pokemon_color: t.Union[int, str]) -&gt; Route:\n    \"\"\"Get a pokemon color by its ID or name.\"\"\"\n    return Route(endpoint=f\"/pokemon-color/{pokemon_color}\")\n</code></pre>"},{"location":"api_reference/http/routes/#pokelance.http.endpoints.Endpoint.get_pokemon_color_endpoints","title":"<code>get_pokemon_color_endpoints()</code>  <code>classmethod</code>","text":"<p>Get a list of pokemon color endpoints.</p> Source code in <code>pokelance/http/endpoints.py</code> Python<pre><code>@classmethod\ndef get_pokemon_color_endpoints(cls) -&gt; Route:\n    \"\"\"Get a list of pokemon color endpoints.\"\"\"\n    return Route(endpoint=\"/pokemon-color\", payload={\"limit\": 10000})\n</code></pre>"},{"location":"api_reference/http/routes/#pokelance.http.endpoints.Endpoint.get_pokemon_endpoints","title":"<code>get_pokemon_endpoints()</code>  <code>classmethod</code>","text":"<p>Get a list of pokemon endpoints.</p> Source code in <code>pokelance/http/endpoints.py</code> Python<pre><code>@classmethod\ndef get_pokemon_endpoints(cls) -&gt; Route:\n    \"\"\"Get a list of pokemon endpoints.\"\"\"\n    return Route(endpoint=\"/pokemon\", payload={\"limit\": 10000})\n</code></pre>"},{"location":"api_reference/http/routes/#pokelance.http.endpoints.Endpoint.get_pokemon_form","title":"<code>get_pokemon_form(pokemon_form)</code>  <code>classmethod</code>","text":"<p>Get a pokemon form by its ID or name.</p> Source code in <code>pokelance/http/endpoints.py</code> Python<pre><code>@classmethod\ndef get_pokemon_form(cls, pokemon_form: t.Union[int, str]) -&gt; Route:\n    \"\"\"Get a pokemon form by its ID or name.\"\"\"\n    return Route(endpoint=f\"/pokemon-form/{pokemon_form}\")\n</code></pre>"},{"location":"api_reference/http/routes/#pokelance.http.endpoints.Endpoint.get_pokemon_form_endpoints","title":"<code>get_pokemon_form_endpoints()</code>  <code>classmethod</code>","text":"<p>Get a list of pokemon form endpoints.</p> Source code in <code>pokelance/http/endpoints.py</code> Python<pre><code>@classmethod\ndef get_pokemon_form_endpoints(cls) -&gt; Route:\n    \"\"\"Get a list of pokemon form endpoints.\"\"\"\n    return Route(endpoint=\"/pokemon-form\", payload={\"limit\": 10000})\n</code></pre>"},{"location":"api_reference/http/routes/#pokelance.http.endpoints.Endpoint.get_pokemon_habitat","title":"<code>get_pokemon_habitat(pokemon_habitat)</code>  <code>classmethod</code>","text":"<p>Get a pokemon habitat by its ID or name.</p> Source code in <code>pokelance/http/endpoints.py</code> Python<pre><code>@classmethod\ndef get_pokemon_habitat(cls, pokemon_habitat: t.Union[int, str]) -&gt; Route:\n    \"\"\"Get a pokemon habitat by its ID or name.\"\"\"\n    return Route(endpoint=f\"/pokemon-habitat/{pokemon_habitat}\")\n</code></pre>"},{"location":"api_reference/http/routes/#pokelance.http.endpoints.Endpoint.get_pokemon_habitat_endpoints","title":"<code>get_pokemon_habitat_endpoints()</code>  <code>classmethod</code>","text":"<p>Get a list of pokemon habitat endpoints.</p> Source code in <code>pokelance/http/endpoints.py</code> Python<pre><code>@classmethod\ndef get_pokemon_habitat_endpoints(cls) -&gt; Route:\n    \"\"\"Get a list of pokemon habitat endpoints.\"\"\"\n    return Route(endpoint=\"/pokemon-habitat\", payload={\"limit\": 10000})\n</code></pre>"},{"location":"api_reference/http/routes/#pokelance.http.endpoints.Endpoint.get_pokemon_shape","title":"<code>get_pokemon_shape(pokemon_shape)</code>  <code>classmethod</code>","text":"<p>Get a pokemon shape by its ID or name.</p> Source code in <code>pokelance/http/endpoints.py</code> Python<pre><code>@classmethod\ndef get_pokemon_shape(cls, pokemon_shape: t.Union[int, str]) -&gt; Route:\n    \"\"\"Get a pokemon shape by its ID or name.\"\"\"\n    return Route(endpoint=f\"/pokemon-shape/{pokemon_shape}\")\n</code></pre>"},{"location":"api_reference/http/routes/#pokelance.http.endpoints.Endpoint.get_pokemon_shape_endpoints","title":"<code>get_pokemon_shape_endpoints()</code>  <code>classmethod</code>","text":"<p>Get a list of pokemon shape endpoints.</p> Source code in <code>pokelance/http/endpoints.py</code> Python<pre><code>@classmethod\ndef get_pokemon_shape_endpoints(cls) -&gt; Route:\n    \"\"\"Get a list of pokemon shape endpoints.\"\"\"\n    return Route(endpoint=\"/pokemon-shape\", payload={\"limit\": 10000})\n</code></pre>"},{"location":"api_reference/http/routes/#pokelance.http.endpoints.Endpoint.get_pokemon_species","title":"<code>get_pokemon_species(pokemon_species)</code>  <code>classmethod</code>","text":"<p>Get a pokemon species by its ID or name.</p> Source code in <code>pokelance/http/endpoints.py</code> Python<pre><code>@classmethod\ndef get_pokemon_species(cls, pokemon_species: t.Union[int, str]) -&gt; Route:\n    \"\"\"Get a pokemon species by its ID or name.\"\"\"\n    return Route(endpoint=f\"/pokemon-species/{pokemon_species}\")\n</code></pre>"},{"location":"api_reference/http/routes/#pokelance.http.endpoints.Endpoint.get_pokemon_species_endpoints","title":"<code>get_pokemon_species_endpoints()</code>  <code>classmethod</code>","text":"<p>Get a list of pokemon species endpoints.</p> Source code in <code>pokelance/http/endpoints.py</code> Python<pre><code>@classmethod\ndef get_pokemon_species_endpoints(cls) -&gt; Route:\n    \"\"\"Get a list of pokemon species endpoints.\"\"\"\n    return Route(endpoint=\"/pokemon-species\", payload={\"limit\": 10000})\n</code></pre>"},{"location":"api_reference/http/routes/#pokelance.http.endpoints.Endpoint.get_region","title":"<code>get_region(region)</code>  <code>classmethod</code>","text":"<p>Get a region by its ID or name.</p> Source code in <code>pokelance/http/endpoints.py</code> Python<pre><code>@classmethod\ndef get_region(cls, region: t.Union[int, str]) -&gt; Route:\n    \"\"\"Get a region by its ID or name.\"\"\"\n    return Route(endpoint=f\"/region/{region}\")\n</code></pre>"},{"location":"api_reference/http/routes/#pokelance.http.endpoints.Endpoint.get_region_endpoints","title":"<code>get_region_endpoints()</code>  <code>classmethod</code>","text":"<p>Get a list of region endpoints.</p> Source code in <code>pokelance/http/endpoints.py</code> Python<pre><code>@classmethod\ndef get_region_endpoints(cls) -&gt; Route:\n    \"\"\"Get a list of region endpoints.\"\"\"\n    return Route(endpoint=\"/region\", payload={\"limit\": 10000})\n</code></pre>"},{"location":"api_reference/http/routes/#pokelance.http.endpoints.Endpoint.get_stat","title":"<code>get_stat(stat)</code>  <code>classmethod</code>","text":"<p>Get a stat by its ID or name.</p> Source code in <code>pokelance/http/endpoints.py</code> Python<pre><code>@classmethod\ndef get_stat(cls, stat: t.Union[int, str]) -&gt; Route:\n    \"\"\"Get a stat by its ID or name.\"\"\"\n    return Route(endpoint=f\"/stat/{stat}\")\n</code></pre>"},{"location":"api_reference/http/routes/#pokelance.http.endpoints.Endpoint.get_stat_endpoints","title":"<code>get_stat_endpoints()</code>  <code>classmethod</code>","text":"<p>Get a list of stat endpoints.</p> Source code in <code>pokelance/http/endpoints.py</code> Python<pre><code>@classmethod\ndef get_stat_endpoints(cls) -&gt; Route:\n    \"\"\"Get a list of stat endpoints.\"\"\"\n    return Route(endpoint=\"/stat\", payload={\"limit\": 10000})\n</code></pre>"},{"location":"api_reference/http/routes/#pokelance.http.endpoints.Endpoint.get_super_contest_effect","title":"<code>get_super_contest_effect(super_contest_effect)</code>  <code>classmethod</code>","text":"<p>Get a super contest effect by its ID.</p> Source code in <code>pokelance/http/endpoints.py</code> Python<pre><code>@classmethod\ndef get_super_contest_effect(cls, super_contest_effect: int) -&gt; Route:\n    \"\"\"Get a super contest effect by its ID.\"\"\"\n    return Route(endpoint=f\"/super-contest-effect/{super_contest_effect}\")\n</code></pre>"},{"location":"api_reference/http/routes/#pokelance.http.endpoints.Endpoint.get_super_contest_effect_endpoints","title":"<code>get_super_contest_effect_endpoints()</code>  <code>classmethod</code>","text":"<p>Get a list of super contest effect endpoints.</p> Source code in <code>pokelance/http/endpoints.py</code> Python<pre><code>@classmethod\ndef get_super_contest_effect_endpoints(cls) -&gt; Route:\n    \"\"\"Get a list of super contest effect endpoints.\"\"\"\n    return Route(endpoint=\"/super-contest-effect\", payload={\"limit\": 10000})\n</code></pre>"},{"location":"api_reference/http/routes/#pokelance.http.endpoints.Endpoint.get_type","title":"<code>get_type(type_)</code>  <code>classmethod</code>","text":"<p>Get a type by its ID or name.</p> Source code in <code>pokelance/http/endpoints.py</code> Python<pre><code>@classmethod\ndef get_type(cls, type_: t.Union[int, str]) -&gt; Route:\n    \"\"\"Get a type by its ID or name.\"\"\"\n    return Route(endpoint=f\"/type/{type_}\")\n</code></pre>"},{"location":"api_reference/http/routes/#pokelance.http.endpoints.Endpoint.get_type_endpoints","title":"<code>get_type_endpoints()</code>  <code>classmethod</code>","text":"<p>Get a list of type endpoints.</p> Source code in <code>pokelance/http/endpoints.py</code> Python<pre><code>@classmethod\ndef get_type_endpoints(cls) -&gt; Route:\n    \"\"\"Get a list of type endpoints.\"\"\"\n    return Route(endpoint=\"/type\", payload={\"limit\": 10000})\n</code></pre>"},{"location":"api_reference/http/routes/#pokelance.http.endpoints.Endpoint.get_version","title":"<code>get_version(version)</code>  <code>classmethod</code>","text":"<p>Get a version by its ID or name.</p> Source code in <code>pokelance/http/endpoints.py</code> Python<pre><code>@classmethod\ndef get_version(cls, version: t.Union[int, str]) -&gt; Route:\n    \"\"\"Get a version by its ID or name.\"\"\"\n    return Route(endpoint=f\"/version/{version}\")\n</code></pre>"},{"location":"api_reference/http/routes/#pokelance.http.endpoints.Endpoint.get_version_endpoints","title":"<code>get_version_endpoints()</code>  <code>classmethod</code>","text":"<p>Get a list of version endpoints.</p> Source code in <code>pokelance/http/endpoints.py</code> Python<pre><code>@classmethod\ndef get_version_endpoints(cls) -&gt; Route:\n    \"\"\"Get a list of version endpoints.\"\"\"\n    return Route(endpoint=\"/version\", payload={\"limit\": 10000})\n</code></pre>"},{"location":"api_reference/http/routes/#pokelance.http.endpoints.Endpoint.get_version_group","title":"<code>get_version_group(version_group)</code>  <code>classmethod</code>","text":"<p>Get a version group by its ID or name.</p> Source code in <code>pokelance/http/endpoints.py</code> Python<pre><code>@classmethod\ndef get_version_group(cls, version_group: t.Union[int, str]) -&gt; Route:\n    \"\"\"Get a version group by its ID or name.\"\"\"\n    return Route(endpoint=f\"/version-group/{version_group}\")\n</code></pre>"},{"location":"api_reference/http/routes/#pokelance.http.endpoints.Endpoint.get_version_group_endpoints","title":"<code>get_version_group_endpoints()</code>  <code>classmethod</code>","text":"<p>Get a list of version group endpoints.</p> Source code in <code>pokelance/http/endpoints.py</code> Python<pre><code>@classmethod\ndef get_version_group_endpoints(cls) -&gt; Route:\n    \"\"\"Get a list of version group endpoints.\"\"\"\n    return Route(endpoint=\"/version-group\", payload={\"limit\": 10000})\n</code></pre>"},{"location":"api_reference/http/routes/#pokelance.http.endpoints.Route","title":"<code>Route</code>","text":"<p>Represents a route for an endpoint.</p> <p>Attributes:</p> Name Type Description <code>endpoint</code> <code>str</code> <p>The endpoint name.</p> <code>_url</code> <code>str</code> <p>The URL for the route.</p> <code>_api_version</code> <code>int</code> <p>The API version for the route.</p> <code>method</code> <code>str</code> <p>The HTTP method for the route.</p> <code>payload</code> <code>Optional[Dict[str, Any]]</code> <p>The payload for the route.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; pokemon = \"pikachu\"\n&gt;&gt;&gt; route = Route(endpoint=f\"/pokemon/{pokemon}\", method=\"GET\")\n</code></pre>"},{"location":"api_reference/models/base/","title":"Base","text":""},{"location":"api_reference/models/base/#pokelance.models._base","title":"<code>pokelance.models._base</code>","text":""},{"location":"api_reference/models/base/#pokelance.models._base.BaseModel","title":"<code>BaseModel</code>","text":"<p>               Bases: <code>AttrsInstance</code></p> <p>Base model for all models</p>"},{"location":"api_reference/models/base/#pokelance.models._base.BaseModel.from_payload","title":"<code>from_payload(payload)</code>  <code>classmethod</code>","text":"<p>Create a model from a payload</p> <p>Parameters:</p> Name Type Description Default <code>payload</code> <code>Dict[str, Any]</code> <p>The payload to create the model from.</p> required <p>Returns:</p> Type Description <code>BaseModel</code> <p>The model created from the payload.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>@classmethod\ndef from_payload(cls, payload: t.Dict[str, t.Any]) -&gt; \"BaseModel\":\n    \"\"\"Create a model from a payload\n\n    Parameters\n    ----------\n    payload: typing.Dict[str, Any]\n        The payload to create the model from.\n\n    Returns\n    -------\n    BaseModel\n        The model created from the payload.\n    \"\"\"\n    return cls(raw=payload)\n</code></pre>"},{"location":"api_reference/models/base/#pokelance.models._base.BaseModel.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/berry/","title":"Berry","text":""},{"location":"api_reference/models/abstract/berry/#pokelance.models.abstract.berry","title":"<code>pokelance.models.abstract.berry</code>","text":""},{"location":"api_reference/models/abstract/berry/#pokelance.models.abstract.berry.Berry","title":"<code>Berry</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A berry resource.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The identifier for this berry resource.</p> <code>name</code> <code>str</code> <p>The name for this berry resource.</p> <code>growth_time</code> <code>int</code> <p>Time it takes the tree to grow one stage, in hours. Berry trees go through four of these growth stages before they can be picked.</p> <code>max_harvest</code> <code>int</code> <p>The maximum number of these berries that can grow on one tree in Generation IV.</p> <code>natural_gift_power</code> <code>int</code> <p>The power of the move \"Natural Gift\" when used with this Berry.</p> <code>size</code> <code>int</code> <p>Berries are actually items. This is the number of those items.</p> <code>smoothness</code> <code>int</code> <p>The speed at which this Berry dries out the soil as it grows. A higher rate means the soil dries more quickly.</p> <code>soil_dryness</code> <code>int</code> <p>The firmness of this berry, used in making Pok\u00e9blocks or Poffins.</p> <code>flavors</code> <code>List[BerryFlavorMap]</code> <p>A list of references to each flavor a berry can have and the potency of each of those flavors in regard to this berry.</p> <code>item</code> <code>NamedResource</code> <p>The item that corresponds to this berry.</p> <code>natural_gift_type</code> <code>NamedResource</code> <p>The type inherited by \"Natural Gift\" when used with this Berry.</p>"},{"location":"api_reference/models/abstract/berry/#pokelance.models.abstract.berry.Berry.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/berry/#pokelance.models.abstract.berry.BerryFirmness","title":"<code>BerryFirmness</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A berry firmness resource.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The identifier for this berry firmness resource.</p> <code>name</code> <code>str</code> <p>The name for this berry firmness resource.</p> <code>berries</code> <code>List[NamedResource]</code> <p>A list of the berries with this firmness.</p> <code>names</code> <code>List[Name]</code> <p>A list of the name of this berry firmness listed in different languages.</p>"},{"location":"api_reference/models/abstract/berry/#pokelance.models.abstract.berry.BerryFirmness.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/berry/#pokelance.models.abstract.berry.BerryFlavor","title":"<code>BerryFlavor</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A berry flavor resource.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The identifier for this berry flavor resource.</p> <code>name</code> <code>str</code> <p>The name for this berry flavor resource.</p> <code>berries</code> <code>List[FlavorBerryMap]</code> <p>A list of the berries with this flavor.</p> <code>contest_type</code> <code>NamedResource</code> <p>The contest type that correlates with this berry flavor.</p> <code>names</code> <code>List[Name]</code> <p>The name of this berry flavor listed in different languages.</p>"},{"location":"api_reference/models/abstract/berry/#pokelance.models.abstract.berry.BerryFlavor.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/contest/","title":"Contest","text":""},{"location":"api_reference/models/abstract/contest/#pokelance.models.abstract.contest","title":"<code>pokelance.models.abstract.contest</code>","text":""},{"location":"api_reference/models/abstract/contest/#pokelance.models.abstract.contest.ContestEffect","title":"<code>ContestEffect</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A contest effect resource.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The identifier for this contest effect resource.</p> <code>appeal</code> <code>int</code> <p>The base number of hearts the user of this move gets.</p> <code>jam</code> <code>int</code> <p>The base number of hearts the user's opponent loses.</p> <code>effect_entries</code> <code>List[Effect]</code> <p>The result of this contest effect listed in different languages.</p> <code>flavor_text_entries</code> <code>List[FlavorText]</code> <p>The flavor text of this contest effect listed in different languages.</p>"},{"location":"api_reference/models/abstract/contest/#pokelance.models.abstract.contest.ContestEffect.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/contest/#pokelance.models.abstract.contest.ContestType","title":"<code>ContestType</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A contest type resource.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The identifier for this contest type resource.</p> <code>name</code> <code>str</code> <p>The name for this contest type resource.</p> <code>berry_flavor</code> <code>NamedResource</code> <p>The berry flavor that correlates with this contest type.</p> <code>names</code> <code>List[Name]</code> <p>The name of this contest type listed in different languages.</p>"},{"location":"api_reference/models/abstract/contest/#pokelance.models.abstract.contest.ContestType.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/contest/#pokelance.models.abstract.contest.SuperContestEffect","title":"<code>SuperContestEffect</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A super contest effect resource.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The identifier for this super contest effect resource.</p> <code>appeal</code> <code>int</code> <p>The level of appeal this super contest effect has.</p> <code>flavor_text_entries</code> <code>List[FlavorText]</code> <p>The flavor text of this super contest effect listed in different languages.</p> <code>moves</code> <code>List[NamedResource]</code> <p>A list of moves that have the effect when used in super contests.</p>"},{"location":"api_reference/models/abstract/contest/#pokelance.models.abstract.contest.SuperContestEffect.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/encounter/","title":"Encounter","text":""},{"location":"api_reference/models/abstract/encounter/#pokelance.models.abstract.encounter","title":"<code>pokelance.models.abstract.encounter</code>","text":""},{"location":"api_reference/models/abstract/encounter/#pokelance.models.abstract.encounter.EncounterCondition","title":"<code>EncounterCondition</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>An encounter condition resource.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The identifier for this encounter condition resource.</p> <code>name</code> <code>str</code> <p>The name for this encounter condition resource.</p> <code>names</code> <code>List[Name]</code> <p>The name of this encounter condition listed in different languages.</p> <code>values</code> <code>List[NamedResource]</code> <p>A list of possible values for this encounter condition.</p>"},{"location":"api_reference/models/abstract/encounter/#pokelance.models.abstract.encounter.EncounterCondition.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/encounter/#pokelance.models.abstract.encounter.EncounterConditionValue","title":"<code>EncounterConditionValue</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>An encounter condition value resource.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The identifier for this encounter condition value resource.</p> <code>name</code> <code>str</code> <p>The name for this encounter condition value resource.</p> <code>condition</code> <code>NamedResource</code> <p>The condition this encounter condition value pertains to.</p> <code>names</code> <code>List[Name]</code> <p>The name of this encounter condition value listed in different languages.</p>"},{"location":"api_reference/models/abstract/encounter/#pokelance.models.abstract.encounter.EncounterConditionValue.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/encounter/#pokelance.models.abstract.encounter.EncounterMethod","title":"<code>EncounterMethod</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>An encounter method resource.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The identifier for this encounter method resource.</p> <code>name</code> <code>str</code> <p>The name for this encounter method resource.</p> <code>order</code> <code>int</code> <p>A good value for sorting.</p> <code>names</code> <code>List[Name]</code> <p>The name of this encounter method listed in different languages.</p>"},{"location":"api_reference/models/abstract/encounter/#pokelance.models.abstract.encounter.EncounterMethod.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/evolution/","title":"Evolution","text":""},{"location":"api_reference/models/abstract/evolution/#pokelance.models.abstract.evolution","title":"<code>pokelance.models.abstract.evolution</code>","text":""},{"location":"api_reference/models/abstract/evolution/#pokelance.models.abstract.evolution.ChainLink","title":"<code>ChainLink</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A chain link resource.</p> <p>Attributes:</p> Name Type Description <code>is_baby</code> <code>bool</code> <p>Whether or not this link is for a baby Pok\u00e9mon.</p> <code>species</code> <code>NamedResource</code> <p>The Pok\u00e9mon species at this point in the evolution chain.</p> <code>evolution_details</code> <code>List[EvolutionDetail]</code> <p>A list of details regarding the specific details of the referenced Pok\u00e9mon species evolution.</p> <code>evolves_to</code> <code>List[ChainLink]</code> <p>A list of chain links.</p>"},{"location":"api_reference/models/abstract/evolution/#pokelance.models.abstract.evolution.ChainLink.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/evolution/#pokelance.models.abstract.evolution.EvolutionChain","title":"<code>EvolutionChain</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Evolution chain model.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The identifier for this resource.</p> <code>baby_trigger_item</code> <code>Optional[NamedResource]</code> <p>The item that a Pok\u00e9mon would be holding when mating that would trigger the egg hatching a baby  Pok\u00e9mon rather than a basic Pok\u00e9mon.</p> <code>chain</code> <code>ChainLink</code> <p>The base chain link object. Each link contains evolution details for a Pok\u00e9mon in the chain.  Each link references the next Pok\u00e9mon in the natural evolution order.</p>"},{"location":"api_reference/models/abstract/evolution/#pokelance.models.abstract.evolution.EvolutionChain.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/evolution/#pokelance.models.abstract.evolution.EvolutionTrigger","title":"<code>EvolutionTrigger</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Evolution trigger model.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The identifier for this resource.</p> <code>name</code> <code>str</code> <p>The name for this resource.</p> <code>names</code> <code>List[Name]</code> <p>A list of name and language pairs for this resource.</p> <code>pokemon_species</code> <code>List[NamedResource]</code> <p>A list of pokemon species that result from this evolution trigger.</p>"},{"location":"api_reference/models/abstract/evolution/#pokelance.models.abstract.evolution.EvolutionTrigger.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/game/","title":"Game","text":""},{"location":"api_reference/models/abstract/game/#pokelance.models.abstract.game","title":"<code>pokelance.models.abstract.game</code>","text":""},{"location":"api_reference/models/abstract/game/#pokelance.models.abstract.game.Generation","title":"<code>Generation</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Generation model.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The identifier for this resource.</p> <code>name</code> <code>str</code> <p>The name for this resource.</p> <code>abilities</code> <code>List[NamedResource]</code> <p>A list of abilities that were introduced in this generation.</p> <code>names</code> <code>List[Name]</code> <p>The name of this resource listed in different languages.</p> <code>main_region</code> <code>NamedResource</code> <p>The main region travelled in this generation.</p> <code>moves</code> <code>List[NamedResource]</code> <p>A list of moves that were introduced in this generation.</p> <code>pokemon_species</code> <code>List[NamedResource]</code> <p>A list of Pok\u00e9mon species that were introduced in this generation.</p> <code>types</code> <code>List[NamedResource]</code> <p>A list of types that were introduced in this generation.</p> <code>version_groups</code> <code>List[NamedResource]</code> <p>A list of version groups that were introduced in this generation.</p>"},{"location":"api_reference/models/abstract/game/#pokelance.models.abstract.game.Generation.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/game/#pokelance.models.abstract.game.Pokedex","title":"<code>Pokedex</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Pokedex model.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The identifier for this resource.</p> <code>name</code> <code>str</code> <p>The name for this resource.</p> <code>is_main_series</code> <code>bool</code> <p>Whether or not this Pok\u00e9dex originated in the main series of the video games.</p> <code>descriptions</code> <code>List[Description]</code> <p>The description of this resource listed in different languages.</p> <code>names</code> <code>List[Name]</code> <p>The name of this resource listed in different languages.</p> <code>pokemon_entries</code> <code>List[PokemonEntry]</code> <p>A list of Pok\u00e9mon catalogued in this Pok\u00e9dex and their indexes.</p> <code>region</code> <code>NamedResource</code> <p>The region this Pok\u00e9dex catalogues Pok\u00e9mon for.</p> <code>version_groups</code> <code>List[NamedResource]</code> <p>A list of version groups this Pok\u00e9dex is relevant to.</p>"},{"location":"api_reference/models/abstract/game/#pokelance.models.abstract.game.Pokedex.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/game/#pokelance.models.abstract.game.Version","title":"<code>Version</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Version model.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The identifier for this resource.</p> <code>name</code> <code>str</code> <p>The name for this resource.</p> <code>names</code> <code>List[Name]</code> <p>The name of this resource listed in different languages.</p> <code>version_group</code> <code>NamedResource</code> <p>The version group this version belongs to.</p>"},{"location":"api_reference/models/abstract/game/#pokelance.models.abstract.game.Version.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/game/#pokelance.models.abstract.game.VersionGroup","title":"<code>VersionGroup</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>VersionGroup model.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The identifier for this resource.</p> <code>name</code> <code>str</code> <p>The name for this resource.</p> <code>order</code> <code>int</code> <p>Order for sorting. Almost by date of release, except similar versions are grouped together.</p> <code>generation</code> <code>NamedResource</code> <p>The generation this version was introduced in.</p> <code>move_learn_methods</code> <code>List[NamedResource]</code> <p>A list of methods in which Pok\u00e9mon can learn moves in this version group.</p> <code>pokedexes</code> <code>List[NamedResource]</code> <p>A list of Pok\u00e9dexes introduces in this version group.</p> <code>regions</code> <code>List[NamedResource]</code> <p>A list of regions that can be visited in this version group.</p> <code>versions</code> <code>List[NamedResource]</code> <p>A list of versions this version group owns.</p>"},{"location":"api_reference/models/abstract/game/#pokelance.models.abstract.game.VersionGroup.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/item/","title":"Item","text":""},{"location":"api_reference/models/abstract/item/#pokelance.models.abstract.item","title":"<code>pokelance.models.abstract.item</code>","text":""},{"location":"api_reference/models/abstract/item/#pokelance.models.abstract.item.Item","title":"<code>Item</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Item model.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The identifier for this resource.</p> <code>name</code> <code>str</code> <p>The name for this resource.</p> <code>cost</code> <code>int</code> <p>The price of this item in stores.</p> <code>fling_power</code> <code>int</code> <p>The power of the move Fling when used with this item.</p> <code>fling_effect</code> <code>NamedResource</code> <p>The effect of the move Fling when used with this item.</p> <code>attributes</code> <code>List[NamedResource]</code> <p>A list of attributes this item has.</p> <code>category</code> <code>NamedResource</code> <p>The category of items this item falls into.</p> <code>effect_entries</code> <code>List[Effect]</code> <p>The effect of this ability listed in different languages.</p> <code>flavor_text_entries</code> <code>List[VersionGroupFlavorText]</code> <p>The flavor text of this ability listed in different languages.</p> <code>game_indices</code> <code>List[GenerationGameIndex]</code> <p>A list of game indices relevent to this item by generation.</p> <code>names</code> <code>List[Name]</code> <p>The name of this resource listed in different languages.</p> <code>sprites</code> <code>ItemSprites</code> <p>A set of sprites used to depict this item in the game.</p> <code>held_by_pokemon</code> <code>List[ItemHolderPokemon]</code> <p>A list of Pok\u00e9mon that might be found in the wild holding this item.</p> <code>baby_trigger_for</code> <code>NamedResource</code> <p>An evolution chain this item requires to produce a bay during mating.</p> <code>machines</code> <code>List[MachineVersionDetail]</code> <p>A list of the machines related to this item.</p>"},{"location":"api_reference/models/abstract/item/#pokelance.models.abstract.item.Item.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/item/#pokelance.models.abstract.item.ItemAttribute","title":"<code>ItemAttribute</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>ItemAttribute model.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The identifier for this resource.</p> <code>name</code> <code>str</code> <p>The name for this resource.</p> <code>items</code> <code>List[NamedResource]</code> <p>A list of items that have this attribute.</p> <code>names</code> <code>List[Name]</code> <p>The name of this resource listed in different languages.</p>"},{"location":"api_reference/models/abstract/item/#pokelance.models.abstract.item.ItemAttribute.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/item/#pokelance.models.abstract.item.ItemCategory","title":"<code>ItemCategory</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>ItemCategory model.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The identifier for this resource.</p> <code>name</code> <code>str</code> <p>The name for this resource.</p> <code>items</code> <code>List[NamedResource]</code> <p>A list of items that are a part of this category.</p> <code>names</code> <code>List[Name]</code> <p>The name of this resource listed in different languages.</p>"},{"location":"api_reference/models/abstract/item/#pokelance.models.abstract.item.ItemCategory.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/item/#pokelance.models.abstract.item.ItemFlingEffect","title":"<code>ItemFlingEffect</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>ItemFlingEffect model.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The identifier for this resource.</p> <code>name</code> <code>str</code> <p>The name for this resource.</p> <code>effect_entries</code> <code>List[Effect]</code> <p>The result of this fling effect listed in different languages.</p> <code>items</code> <code>List[NamedResource]</code> <p>A list of items that have this fling effect.</p>"},{"location":"api_reference/models/abstract/item/#pokelance.models.abstract.item.ItemFlingEffect.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/item/#pokelance.models.abstract.item.ItemPocket","title":"<code>ItemPocket</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>ItemPocket model.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The identifier for this resource.</p> <code>name</code> <code>str</code> <p>The name for this resource.</p> <code>categories</code> <code>List[NamedResource]</code> <p>A list of item categories that are relevant to this item pocket.</p> <code>names</code> <code>List[Name]</code> <p>The name of this resource listed in different languages.</p>"},{"location":"api_reference/models/abstract/item/#pokelance.models.abstract.item.ItemPocket.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/location/","title":"Location","text":""},{"location":"api_reference/models/abstract/location/#pokelance.models.abstract.location","title":"<code>pokelance.models.abstract.location</code>","text":""},{"location":"api_reference/models/abstract/location/#pokelance.models.abstract.location.Location","title":"<code>Location</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Location model.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The identifier for this resource.</p> <code>name</code> <code>str</code> <p>The name for this resource.</p> <code>region</code> <code>NamedResource</code> <p>The region this location can be found in.</p> <code>names</code> <code>List[Name]</code> <p>The name of this resource listed in different languages.</p> <code>game_indices</code> <code>List[GenerationGameIndex]</code> <p>A list of game indices relevent to this location by generation.</p> <code>areas</code> <code>List[NamedResource]</code> <p>A list of methods in which Pok\u00e9mon may be encountered in this location.</p>"},{"location":"api_reference/models/abstract/location/#pokelance.models.abstract.location.Location.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/location/#pokelance.models.abstract.location.LocationArea","title":"<code>LocationArea</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>LocationArea model.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The identifier for this resource.</p> <code>name</code> <code>str</code> <p>The name for this resource.</p> <code>game_index</code> <code>int</code> <p>The internal id of an API resource within game data.</p> <code>encounter_method_rates</code> <code>List[EncounterMethodRate]</code> <p>A list of methods in which Pok\u00e9mon may be encountered in this area and how likely the method will occur depending on the version of the game.</p> <code>location</code> <code>NamedResource</code> <p>The region this location can be found in.</p> <code>names</code> <code>List[Name]</code> <p>The name of this resource listed in different languages.</p> <code>pokemon_encounters</code> <code>List[PokemonEncounter]</code> <p>A list of Pok\u00e9mon that can be encountered in this area along with version specific details about the encounter.</p>"},{"location":"api_reference/models/abstract/location/#pokelance.models.abstract.location.LocationArea.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/location/#pokelance.models.abstract.location.PalParkArea","title":"<code>PalParkArea</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>PalParkArea model.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The identifier for this resource.</p> <code>name</code> <code>str</code> <p>The name for this resource.</p> <code>names</code> <code>List[Name]</code> <p>The name of this resource listed in different languages.</p> <code>pokemon_encounters</code> <code>List[PalParkEncounterSpecies]</code> <p>A list of Pok\u00e9mon encountered in this pal park area along with details.</p>"},{"location":"api_reference/models/abstract/location/#pokelance.models.abstract.location.PalParkArea.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/location/#pokelance.models.abstract.location.Region","title":"<code>Region</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Region model.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The identifier for this resource.</p> <code>name</code> <code>str</code> <p>The name for this resource.</p> <code>locations</code> <code>List[NamedResource]</code> <p>A list of locations that can be found in this region.</p> <code>main_generation</code> <code>NamedResource</code> <p>The generation this region was introduced in.</p> <code>names</code> <code>List[Name]</code> <p>The name of this resource listed in different languages.</p> <code>pokedexes</code> <code>List[NamedResource]</code> <p>A list of pok\u00e9dexes that catalogue Pok\u00e9mon in this region.</p> <code>version_groups</code> <code>List[NamedResource]</code> <p>A list of version groups where this region can be visited.</p>"},{"location":"api_reference/models/abstract/location/#pokelance.models.abstract.location.Region.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/machine/","title":"Machine","text":""},{"location":"api_reference/models/abstract/machine/#pokelance.models.abstract.machine","title":"<code>pokelance.models.abstract.machine</code>","text":""},{"location":"api_reference/models/abstract/machine/#pokelance.models.abstract.machine.Machine","title":"<code>Machine</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Machine model.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The identifier for this resource.</p> <code>item</code> <code>NamedResource</code> <p>The item that is required to use the TM or HM.</p> <code>move</code> <code>NamedResource</code> <p>The move that is taught by the TM or HM.</p> <code>version_group</code> <code>NamedResource</code> <p>The version group that this machine applies to.</p>"},{"location":"api_reference/models/abstract/machine/#pokelance.models.abstract.machine.Machine.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/move/","title":"Move","text":""},{"location":"api_reference/models/abstract/move/#pokelance.models.abstract.move","title":"<code>pokelance.models.abstract.move</code>","text":""},{"location":"api_reference/models/abstract/move/#pokelance.models.abstract.move.Move","title":"<code>Move</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Move model.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The identifier for this resource.</p> <code>name</code> <code>str</code> <p>The name for this resource.</p> <code>accuracy</code> <code>int</code> <p>The percent value of how likely this move is to be successful.</p> <code>effect_chance</code> <code>int</code> <p>The percent value of how likely it is this moves effect will take effect.</p> <code>pp</code> <code>int</code> <p>Power points. The number of times this move can be used.</p> <code>priority</code> <code>int</code> <p>A value between -8 and 8. Sets the order in which moves are executed during battle. See Bulbapedia for greater detail.</p> <code>power</code> <code>int</code> <p>The base power of this move with a value of 0 if it does not have a base power.</p> <code>contest_combos</code> <code>ContestComboSet</code> <p>A detail of normal and super contest combos that require this move.</p> <code>contest_type</code> <code>NamedResource</code> <p>The type of appeal this move gives a Pok\u00e9mon when used in a contest.</p> <code>contest_effect</code> <code>Resource</code> <p>The effect the move has when used in a contest.</p> <code>damage_class</code> <code>NamedResource</code> <p>The type of damage the move inflicts on the target, e.g. physical.</p> <code>effect_entries</code> <code>List[VerboseEffect]</code> <p>The effect of this move listed in different languages.</p> <code>effect_changes</code> <code>List[AbilityEffectChange]</code> <p>The list of previous effects this move has had across version groups of the games.</p> <code>flavor_text_entries</code> <code>List[MoveFlavorText]</code> <p>The flavor text of this move listed in different languages.</p> <code>generation</code> <code>NamedResource</code> <p>The generation in which this move was introduced.</p> <code>machines</code> <code>List[MachineVersionDetail]</code> <p>A list of the machines that teach this move.</p> <code>meta</code> <code>MoveMetaData</code> <p>Metadata about this move.</p> <code>names</code> <code>List[Name]</code> <p>The name of this resource listed in different languages.</p> <code>past_values</code> <code>List[PastMoveStatValues]</code> <p>A list of move resource value changes across version groups of the games.</p> <code>stat_changes</code> <code>List[MoveStatChange]</code> <p>A list of stats this moves effects and how much it effects them.</p> <code>super_contest_effect</code> <code>Resource</code> <p>The effect the move has when used in a super contest.</p> <code>target</code> <code>NamedResource</code> <p>The type of target that will receive the effects of the attack.</p> <code>type</code> <code>NamedResource</code> <p>The elemental type of this move.</p>"},{"location":"api_reference/models/abstract/move/#pokelance.models.abstract.move.Move.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/move/#pokelance.models.abstract.move.MoveAilment","title":"<code>MoveAilment</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>MoveAilment models the data returned by the API for a move ailment.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The identifier for this resource.</p> <code>name</code> <code>str</code> <p>The name for this resource.</p> <code>moves</code> <code>List[NamedResource]</code> <p>A list of moves that cause this ailment.</p> <code>names</code> <code>List[Name]</code> <p>The name of this resource listed in different languages.</p>"},{"location":"api_reference/models/abstract/move/#pokelance.models.abstract.move.MoveAilment.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/move/#pokelance.models.abstract.move.MoveBattleStyle","title":"<code>MoveBattleStyle</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>MoveBattleStyle models the data returned by the API for a move battle style.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The identifier for this resource.</p> <code>name</code> <code>str</code> <p>The name for this resource.</p> <code>names</code> <code>List[Name]</code> <p>The name of this resource listed in different languages.</p>"},{"location":"api_reference/models/abstract/move/#pokelance.models.abstract.move.MoveBattleStyle.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/move/#pokelance.models.abstract.move.MoveCategory","title":"<code>MoveCategory</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>MoveCategory models the data returned by the API for a move category.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The identifier for this resource.</p> <code>name</code> <code>str</code> <p>The name for this resource.</p> <code>moves</code> <code>List[NamedResource]</code> <p>A list of moves that fall into this category.</p> <code>descriptions</code> <code>List[Description]</code> <p>The description of this resource listed in different languages.</p>"},{"location":"api_reference/models/abstract/move/#pokelance.models.abstract.move.MoveCategory.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/move/#pokelance.models.abstract.move.MoveDamageClass","title":"<code>MoveDamageClass</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>MoveDamageClass models the data returned by the API for a move damage class.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The identifier for this resource.</p> <code>name</code> <code>str</code> <p>The name for this resource.</p> <code>descriptions</code> <code>List[Description]</code> <p>The description of this resource listed in different languages.</p> <code>moves</code> <code>List[NamedResource]</code> <p>A list of moves that fall into this damage class.</p> <code>names</code> <code>List[Name]</code> <p>The name of this resource listed in different languages.</p>"},{"location":"api_reference/models/abstract/move/#pokelance.models.abstract.move.MoveDamageClass.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/move/#pokelance.models.abstract.move.MoveLearnMethod","title":"<code>MoveLearnMethod</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>MoveLearnMethod models the data returned by the API for a move learn method.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The identifier for this resource.</p> <code>name</code> <code>str</code> <p>The name for this resource.</p> <code>descriptions</code> <code>List[Description]</code> <p>The description of this resource listed in different languages.</p> <code>names</code> <code>List[Name]</code> <p>The name of this resource listed in different languages.</p> <code>version_groups</code> <code>List[NamedResource]</code> <p>A list of version groups where moves can be learned through this method.</p>"},{"location":"api_reference/models/abstract/move/#pokelance.models.abstract.move.MoveLearnMethod.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/pokemon/","title":"Pokemon","text":""},{"location":"api_reference/models/abstract/pokemon/#pokelance.models.abstract.pokemon","title":"<code>pokelance.models.abstract.pokemon</code>","text":""},{"location":"api_reference/models/abstract/pokemon/#pokelance.models.abstract.pokemon.Ability","title":"<code>Ability</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Ability model.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The identifier for this ability resource.</p> <code>name</code> <code>str</code> <p>The name for this ability resource.</p> <code>is_main_series</code> <code>bool</code> <p>Whether or not this ability originated in the main series of the video games.</p> <code>generation</code> <code>NamedResource</code> <p>The generation this ability originated in.</p> <code>names</code> <code>List[Name]</code> <p>The name of this ability listed in different languages.</p> <code>effect_entries</code> <code>List[VerboseEffect]</code> <p>The effect of this ability listed in different languages.</p> <code>effect_changes</code> <code>List[AbilityEffectChange]</code> <p>The list of previous effects this ability has had across version groups of the games.</p> <code>flavor_text_entries</code> <code>List[AbilityFlavorText]</code> <p>The flavor text of this ability listed in different languages.</p> <code>pokemon</code> <code>List[AbilityPokemon]</code> <p>A list of Pok\u00e9mon that could potentially have this ability.</p>"},{"location":"api_reference/models/abstract/pokemon/#pokelance.models.abstract.pokemon.Ability.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/pokemon/#pokelance.models.abstract.pokemon.Characteristic","title":"<code>Characteristic</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Characteristic model.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The identifier for this characteristic resource.</p> <code>gene_modulo</code> <code>int</code> <p>The remainder of the highest stat/IV divided by 5.</p> <code>possible_values</code> <code>List[int]</code> <p>The possible values of the highest stat that would result in a Pok\u00e9mon recieving this characteristic when divided by 5.</p> <code>descriptions</code> <code>List[Description]</code> <p>The descriptions of this characteristic listed in different languages.</p>"},{"location":"api_reference/models/abstract/pokemon/#pokelance.models.abstract.pokemon.Characteristic.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/pokemon/#pokelance.models.abstract.pokemon.EggGroup","title":"<code>EggGroup</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>EggGroup model.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The identifier for this egg group resource.</p> <code>name</code> <code>str</code> <p>The name for this egg group resource.</p> <code>names</code> <code>List[Name]</code> <p>The name of this egg group listed in different languages.</p> <code>pokemon_species</code> <code>List[NamedResource]</code> <p>A list of all Pok\u00e9mon species that are members of this egg group.</p>"},{"location":"api_reference/models/abstract/pokemon/#pokelance.models.abstract.pokemon.EggGroup.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/pokemon/#pokelance.models.abstract.pokemon.Gender","title":"<code>Gender</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Gender model.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The identifier for gender resource.</p> <code>name</code> <code>str</code> <p>The name for this gender resource.</p> <code>pokemon_species_details</code> <code>List[PokemonSpeciesGender]</code> <p>A list of Pok\u00e9mon species that belong to this gender.</p> <code>required_for_evolution</code> <code>List[NamedAPIResource]</code> <p>A list of Pok\u00e9mon species that required this gender in order for a Pok\u00e9mon to evolve into them.</p>"},{"location":"api_reference/models/abstract/pokemon/#pokelance.models.abstract.pokemon.Gender.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/pokemon/#pokelance.models.abstract.pokemon.GrowthRate","title":"<code>GrowthRate</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>GrowthRate model.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The identifier for this growth rate resource.</p> <code>name</code> <code>str</code> <p>The name for this growth rate resource.</p> <code>formula</code> <code>str</code> <p>The formula used to calculate the rate at which the Pok\u00e9mon species gains level.</p> <code>descriptions</code> <code>List[Description]</code> <p>The descriptions of this characteristic listed in different languages.</p> <code>levels</code> <code>List[GrowthRateExperienceLevel]</code> <p>A list of levels and the amount of experienced needed to atain them based on this growth rate.</p> <code>pokemon_species</code> <code>List[NamedResource]</code> <p>A list of Pok\u00e9mon species that gain levels at this growth rate.</p>"},{"location":"api_reference/models/abstract/pokemon/#pokelance.models.abstract.pokemon.GrowthRate.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/pokemon/#pokelance.models.abstract.pokemon.LocationAreaEncounter","title":"<code>LocationAreaEncounter</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>LocationAreaEncounter model.</p> <p>Attributes:</p> Name Type Description <code>location_area</code> <code>NamedAPIResource</code> <p>The location area the referenced Pok\u00e9mon can be encountered in.</p> <code>version_details</code> <code>List[VersionEncounterDetail]</code> <p>A list of versions and encounters with the referenced Pok\u00e9mon that might happen.</p>"},{"location":"api_reference/models/abstract/pokemon/#pokelance.models.abstract.pokemon.LocationAreaEncounter.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/pokemon/#pokelance.models.abstract.pokemon.Nature","title":"<code>Nature</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Nature model.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The identifier for this nature resource.</p> <code>name</code> <code>str</code> <p>The name for this nature resource.</p> <code>decreased_stat</code> <code>NamedAPIResource</code> <p>The stat decreased by 10% in Pok\u00e9mon with this nature.</p> <code>increased_stat</code> <code>NamedAPIResource</code> <p>The stat increased by 10% in Pok\u00e9mon with this nature.</p> <code>hates_flavor</code> <code>NamedAPIResource</code> <p>The flavor hated by Pok\u00e9mon with this nature.</p> <code>likes_flavor</code> <code>NamedAPIResource</code> <p>The flavor liked by Pok\u00e9mon with this nature.</p> <code>pokeathlon_stat_changes</code> <code>List[NatureStatChange]</code> <p>A list of Pok\u00e9athlon stats this nature effects and how much it effects them.</p> <code>move_battle_style_preferences</code> <code>List[MoveBattleStylePreference]</code> <p>A list of battle styles and how likely a Pok\u00e9mon with this nature is to use them in the Battle Palace or Battle Tent.</p> <code>names</code> <code>List[Name]</code> <p>The name of this nature listed in different languages.</p>"},{"location":"api_reference/models/abstract/pokemon/#pokelance.models.abstract.pokemon.Nature.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/pokemon/#pokelance.models.abstract.pokemon.PokeathlonStat","title":"<code>PokeathlonStat</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>PokeathlonStat model.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The identifier for this resource.</p> <code>name</code> <code>str</code> <p>The name for this resource.</p> <code>names</code> <code>List[Name]</code> <p>A list of natures which affect this Pok\u00e9athlon stat positively or negatively.</p> <code>affecting_natures</code> <code>NaturePokeathlonStatAffectSets</code> <p>A detail of natures which affect this Pok\u00e9athlon stat positively or negatively.</p>"},{"location":"api_reference/models/abstract/pokemon/#pokelance.models.abstract.pokemon.PokeathlonStat.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/pokemon/#pokelance.models.abstract.pokemon.Pokemon","title":"<code>Pokemon</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Pokemon model.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The identifier for this Pok\u00e9mon resource.</p> <code>name</code> <code>str</code> <p>The name for this Pok\u00e9mon resource.</p> <code>base_experience</code> <code>int</code> <p>The base experience gained for defeating this Pok\u00e9mon.</p> <code>height</code> <code>int</code> <p>The height of this Pok\u00e9mon in decimetres.</p> <code>is_default</code> <code>bool</code> <p>Set for exactly one Pok\u00e9mon used as the default for each species.</p> <code>order</code> <code>int</code> <p>Order for sorting. Almost national order, except families are grouped together.</p> <code>weight</code> <code>int</code> <p>The weight of this Pok\u00e9mon in hectograms.</p> <code>abilities</code> <code>List[PokemonAbility]</code> <p>A list of abilities this Pok\u00e9mon could potentially have.</p> <code>forms</code> <code>List[NamedAPIResource]</code> <p>A list of forms this Pok\u00e9mon can take on.</p> <code>game_indices</code> <code>List[VersionGameIndex]</code> <p>A list of game indices relevent to Pok\u00e9mon item by generation.</p> <code>held_items</code> <code>List[PokemonHeldItem]</code> <p>A list of items this Pok\u00e9mon may be holding when encountered.</p> <code>location_area_encounters</code> <code>str</code> <p>Location area encounter details for different versions.</p> <code>moves</code> <code>List[PokemonMove]</code> <p>A list of details showing types this Pok\u00e9mon has.</p> <code>past_types</code> <code>List[PokemonTypePast]</code> <p>A list of past types this Pok\u00e9mon has had.</p> <code>past_abilities</code> <code>List[PokemonAbilityPast]</code> <p>A list of past abilities this Pok\u00e9mon has had.</p> <code>species</code> <code>NamedAPIResource</code> <p>The species this Pok\u00e9mon belongs to.</p> <code>sprites</code> <code>PokemonSprites</code> <p>A set of sprites used to depict this Pok\u00e9mon in the game.</p> <code>cries</code> <code>PokemonCries</code> <p>A set of cries used to depict this Pok\u00e9mon in the game.</p> <code>stats</code> <code>List[PokemonStat]</code> <p>A list of details showing all the stats this Pok\u00e9mon has.</p> <code>types</code> <code>List[PokemonType]</code> <p>A list of details showing types this Pok\u00e9mon has.</p>"},{"location":"api_reference/models/abstract/pokemon/#pokelance.models.abstract.pokemon.Pokemon.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/pokemon/#pokelance.models.abstract.pokemon.PokemonColor","title":"<code>PokemonColor</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>PokemonColor model.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The identifier for this Pok\u00e9mon color resource.</p> <code>name</code> <code>str</code> <p>The name for this Pok\u00e9mon color resource.</p> <code>names</code> <code>List[Name]</code> <p>The name of this Pok\u00e9mon color listed in different languages.</p> <code>pokemon_species</code> <code>List[NamedAPIResource]</code> <p>A list of the Pok\u00e9mon species that have this color.</p>"},{"location":"api_reference/models/abstract/pokemon/#pokelance.models.abstract.pokemon.PokemonColor.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/pokemon/#pokelance.models.abstract.pokemon.PokemonForm","title":"<code>PokemonForm</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>PokemonForm model.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The identifier for this Pok\u00e9mon form resource.</p> <code>name</code> <code>str</code> <p>The name for this Pok\u00e9mon form resource.</p> <code>order</code> <code>int</code> <p>The order in which forms should be sorted within all forms. Multiple forms may have equal order, in which case they should fall back on sorting by name.</p> <code>form_order</code> <code>int</code> <p>The order in which forms should be sorted within a species' forms.</p> <code>is_default</code> <code>bool</code> <p>True for exactly one form used as the default for each Pok\u00e9mon.</p> <code>is_battle_only</code> <code>bool</code> <p>Whether or not this form can only happen during battle.</p> <code>is_mega</code> <code>bool</code> <p>Whether or not this form requires mega evolution.</p> <code>form_name</code> <code>str</code> <p>The name of this form.</p> <code>pokemon</code> <code>NamedAPIResource</code> <p>The Pok\u00e9mon that can take on this form.</p> <code>types</code> <code>List[PokemonType]</code> <p>A list of details showing types this Pok\u00e9mon form has.</p> <code>sprites</code> <code>PokemonFormSprites</code> <p>A set of sprites used to depict this Pok\u00e9mon form in the game.</p> <code>version_group</code> <code>NamedAPIResource</code> <p>The version group this Pok\u00e9mon form was introduced in.</p> <code>names</code> <code>List[Name]</code> <p>The form specific full name of this Pok\u00e9mon form, or empty if the form does not have a specific name.</p> <code>form_names</code> <code>List[Name]</code> <p>The form specific form name of this Pok\u00e9mon form, or empty if the form does not have a specific name.</p>"},{"location":"api_reference/models/abstract/pokemon/#pokelance.models.abstract.pokemon.PokemonForm.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/pokemon/#pokelance.models.abstract.pokemon.PokemonHabitats","title":"<code>PokemonHabitats</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>PokemonHabitats model.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The identifier for this Pok\u00e9mon habitat resource.</p> <code>name</code> <code>str</code> <p>The name for this Pok\u00e9mon habitat resource.</p> <code>names</code> <code>List[Name]</code> <p>The name of this Pok\u00e9mon habitat listed in different languages.</p> <code>pokemon_species</code> <code>List[NamedAPIResource]</code> <p>A list of the Pok\u00e9mon species that can be found in this habitat.</p>"},{"location":"api_reference/models/abstract/pokemon/#pokelance.models.abstract.pokemon.PokemonHabitats.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/pokemon/#pokelance.models.abstract.pokemon.PokemonShape","title":"<code>PokemonShape</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>PokemonShape model.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The identifier for this Pok\u00e9mon shape resource.</p> <code>name</code> <code>str</code> <p>The name for this Pok\u00e9mon shape resource.</p> <code>awesome_names</code> <code>List[AwesomeName]</code> <p>The \"scientific\" name of this Pok\u00e9mon shape listed in different languages.</p> <code>names</code> <code>List[Name]</code> <p>The name of this Pok\u00e9mon shape listed in different languages.</p> <code>pokemon_species</code> <code>List[NamedAPIResource]</code> <p>A list of the Pok\u00e9mon species that have this shape.</p>"},{"location":"api_reference/models/abstract/pokemon/#pokelance.models.abstract.pokemon.PokemonShape.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/pokemon/#pokelance.models.abstract.pokemon.PokemonSpecies","title":"<code>PokemonSpecies</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>PokemonSpecies model.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The identifier for this Pok\u00e9mon species resource.</p> <code>name</code> <code>str</code> <p>The name for this Pok\u00e9mon species resource.</p> <code>order</code> <code>int</code> <p>The order in which species should be sorted. Based on National Dex order, except families are grouped together and sorted by stage.</p> <code>gender_rate</code> <code>int</code> <p>The chance of this Pok\u00e9mon being of a particular gender. Ratio is male to female. -1 for genderless.</p> <code>capture_rate</code> <code>int</code> <p>The base capture rate; up to 255. The higher the number, the easier the catch.</p> <code>base_happiness</code> <code>int</code> <p>The happiness when caught by a normal Pok\u00e9ball; up to 255. The higher the number, the happier the Pok\u00e9mon.</p> <code>is_baby</code> <code>bool</code> <p>Whether or not this is a baby Pok\u00e9mon.</p> <code>is_legendary</code> <code>bool</code> <p>Whether or not this is a legendary Pok\u00e9mon.</p> <code>is_mythical</code> <code>bool</code> <p>Whether or not this is a mythical Pok\u00e9mon.</p> <code>hatch_counter</code> <code>int</code> <p>Initial hatch counter: one must walk 255 \u00d7 (hatch_counter + 1) steps before this Pok\u00e9mon's egg hatches, unless utilizing bonuses like Flame Body's.</p> <code>has_gender_differences</code> <code>bool</code> <p>Whether or not this Pok\u00e9mon has visual differences due to gender.</p> <code>forms_switchable</code> <code>bool</code> <p>Whether or not this Pok\u00e9mon has multiple forms and can switch between them.</p> <code>growth_rate</code> <code>NamedAPIResource</code> <p>The rate at which this Pok\u00e9mon species gains levels.</p> <code>pokedex_numbers</code> <code>List[PokemonSpeciesDexEntry]</code> <p>A list of Pokedexes and the indexes reserved within them for this Pok\u00e9mon species.</p> <code>egg_groups</code> <code>List[NamedAPIResource]</code> <p>A list of egg groups this Pok\u00e9mon species is a member of.</p> <code>color</code> <code>NamedAPIResource</code> <p>The color of this Pok\u00e9mon for Pok\u00e9dex search.</p> <code>shape</code> <code>NamedAPIResource</code> <p>The shape of this Pok\u00e9mon for Pok\u00e9dex search.</p> <code>evolves_from_species</code> <code>NamedAPIResource</code> <p>The Pok\u00e9mon species that evolves into this Pokemon_species.</p> <code>evolution_chain</code> <code>APIResource</code> <p>The evolution chain this Pok\u00e9mon species is a member of.</p> <code>habitat</code> <code>NamedAPIResource</code> <p>The habitat this Pok\u00e9mon species can be encountered in.</p> <code>generation</code> <code>NamedAPIResource</code> <p>The generation this Pok\u00e9mon species was introduced in.</p> <code>names</code> <code>List[Name]</code> <p>The name of this Pok\u00e9mon species listed in different languages.</p> <code>pal_park_encounters</code> <code>List[PalParkEncounterArea]</code> <p>A list of encounters that can be had with this Pok\u00e9mon species in pal park.</p> <code>flavor_text_entries</code> <code>List[FlavorText]</code> <p>A list of flavor text entries for this Pok\u00e9mon species.</p> <code>form_descriptions</code> <code>List[Description]</code> <p>A list of form description for this Pok\u00e9mon species.</p> <code>genera</code> <code>List[Genus]</code> <p>A list of the genus of this Pok\u00e9mon species listed in multiple languages.</p> <code>varieties</code> <code>List[PokemonSpeciesVariety]</code> <p>A list of the Pok\u00e9mon that exist within this Pok\u00e9mon species.</p>"},{"location":"api_reference/models/abstract/pokemon/#pokelance.models.abstract.pokemon.PokemonSpecies.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/pokemon/#pokelance.models.abstract.pokemon.Stat","title":"<code>Stat</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A Pok\u00e9mon stat model.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The identifier for this resource.</p> <code>name</code> <code>str</code> <p>The name for this resource.</p> <code>game_index</code> <code>int</code> <p>The stat order in which effects of this stat take place during battle.</p> <code>is_battle_only</code> <code>bool</code> <p>Whether this stat only exists within a battle.</p> <code>affecting_moves</code> <code>MoveStatAffectSets</code> <p>A detail of moves which affect this stat positively or negatively.</p> <code>affecting_natures</code> <code>NatureStatAffectSets</code> <p>A detail of natures which affect this stat positively or negatively.</p> <code>characteristics</code> <code>List[Resource]</code> <p>A list of characteristics that are set on a Pok\u00e9mon when its highest base stat is this stat.</p> <code>move_damage_class</code> <code>NamedResource</code> <p>The class of damage this stat is directly related to.</p> <code>names</code> <code>List[Name]</code> <p>The name of this resource listed in different languages.</p>"},{"location":"api_reference/models/abstract/pokemon/#pokelance.models.abstract.pokemon.Stat.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/pokemon/#pokelance.models.abstract.pokemon.Type","title":"<code>Type</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A Pok\u00e9mon type model.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The identifier for this resource.</p> <code>name</code> <code>str</code> <p>The name for this resource.</p> <code>damage_relations</code> <code>TypeRelations</code> <p>A detail of how effective this type is toward others and vice versa.</p> <code>past_damage_relations</code> <code>TypeRelationsPast</code> <p>A detail of how effective this type was toward others and vice versa in previous generations.</p> <code>game_indices</code> <code>List[GenerationGameIndex]</code> <p>A list of game indices relevent to this item by generation.</p> <code>generation</code> <code>NamedResource</code> <p>The generation this type was introduced in.</p> <code>move_damage_class</code> <code>NamedResource</code> <p>The class of damage inflicted by this type.</p> <code>names</code> <code>List[Name]</code> <p>The name of this resource listed in different languages.</p> <code>pokemon</code> <code>List[TypePokemon]</code> <p>A list of details of Pok\u00e9mon that have this type.</p> <code>moves</code> <code>List[NamedResource]</code> <p>A list of moves that have this type.</p>"},{"location":"api_reference/models/abstract/pokemon/#pokelance.models.abstract.pokemon.Type.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/utils/berries/","title":"Berries","text":""},{"location":"api_reference/models/abstract/utils/berries/#pokelance.models.abstract.utils.berries","title":"<code>pokelance.models.abstract.utils.berries</code>","text":""},{"location":"api_reference/models/abstract/utils/berries/#pokelance.models.abstract.utils.berries.BerryFlavorMap","title":"<code>BerryFlavorMap</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents a berry flavor map.</p> <p>Attributes:</p> Name Type Description <code>potency</code> <code>int</code> <p>The potency of the referenced flavor for this berry.</p> <code>flavor</code> <code>NamedResource</code> <p>The referenced berry flavor.</p>"},{"location":"api_reference/models/abstract/utils/berries/#pokelance.models.abstract.utils.berries.BerryFlavorMap.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/utils/berries/#pokelance.models.abstract.utils.berries.FlavorBerryMap","title":"<code>FlavorBerryMap</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents a flavor berry map.</p> <p>Attributes:</p> Name Type Description <code>potency</code> <code>int</code> <p>The potency of the referenced berry for this flavor.</p> <code>berry</code> <code>NamedResource</code> <p>The referenced berry.</p>"},{"location":"api_reference/models/abstract/utils/berries/#pokelance.models.abstract.utils.berries.FlavorBerryMap.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/utils/contests/","title":"Contests","text":""},{"location":"api_reference/models/abstract/utils/contests/#pokelance.models.abstract.utils.contests","title":"<code>pokelance.models.abstract.utils.contests</code>","text":""},{"location":"api_reference/models/abstract/utils/contests/#pokelance.models.abstract.utils.contests.ContestName","title":"<code>ContestName</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A contest name resource.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The name for this contest.</p> <code>color</code> <code>str</code> <p>The color associated with this contest's name.</p> <code>language</code> <code>NamedResource</code> <p>The language that this name is in.</p>"},{"location":"api_reference/models/abstract/utils/contests/#pokelance.models.abstract.utils.contests.ContestName.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/utils/evolutions/","title":"Evolutions","text":""},{"location":"api_reference/models/abstract/utils/evolutions/#pokelance.models.abstract.utils.evolutions","title":"<code>pokelance.models.abstract.utils.evolutions</code>","text":""},{"location":"api_reference/models/abstract/utils/evolutions/#pokelance.models.abstract.utils.evolutions.ChainLink","title":"<code>ChainLink</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A chain link resource.</p> <p>Attributes:</p> Name Type Description <code>is_baby</code> <code>bool</code> <p>Whether or not this link is for a baby Pok\u00e9mon.</p> <code>species</code> <code>NamedResource</code> <p>The Pok\u00e9mon species at this point in the evolution chain.</p> <code>evolution_details</code> <code>List[EvolutionDetail]</code> <p>A list of details regarding the specific details of the referenced Pok\u00e9mon species evolution.</p> <code>evolves_to</code> <code>List[ChainLink]</code> <p>A list of chain links.</p>"},{"location":"api_reference/models/abstract/utils/evolutions/#pokelance.models.abstract.utils.evolutions.ChainLink.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/utils/evolutions/#pokelance.models.abstract.utils.evolutions.EvolutionDetail","title":"<code>EvolutionDetail</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>An evolution detail resource.</p> <p>Attributes:</p> Name Type Description <code>item</code> <code>NamedResource</code> <p>The item required to cause evolution this into Pok\u00e9mon species.</p> <code>trigger</code> <code>NamedResource</code> <p>The type of event that triggers evolution into this Pok\u00e9mon species.</p> <code>gender</code> <code>str</code> <p>Gender of the evolving Pok\u00e9mon species must be in order to evolve.</p> <code>held_item</code> <code>NamedResource</code> <p>The item the evolving Pok\u00e9mon species must be holding during the evolution trigger event.</p> <code>known_move</code> <code>NamedResource</code> <p>The move that must be known by the evolving Pok\u00e9mon species during the evolution trigger event.</p> <code>known_move_type</code> <code>NamedResource</code> <p>The evolving Pok\u00e9mon species must know a move with this type during the evolution trigger event.</p> <code>location</code> <code>NamedResource</code> <p>The location the evolution must be triggered at.</p> <code>min_affection</code> <code>int</code> <p>The minimum required level of affection the evolving Pok\u00e9mon species must have.</p> <code>min_beauty</code> <code>int</code> <p>The minimum required level of beauty the evolving Pok\u00e9mon species must have.</p> <code>min_happiness</code> <code>int</code> <p>The minimum required level of happiness the evolving Pok\u00e9mon species must have.</p> <code>min_level</code> <code>int</code> <p>The minimum required level of the evolving Pok\u00e9mon species.</p> <code>needs_overworld_rain</code> <code>bool</code> <p>Whether or not it must be raining in the overworld to cause evolution this Pok\u00e9mon species.</p> <code>party_species</code> <code>NamedResource</code> <p>The specific Pok\u00e9mon species that must be in the players party in order for the evolution to occur.</p> <code>party_type</code> <code>NamedResource</code> <p>The player must have a Pok\u00e9mon of this type in their party during the evolution trigger event.</p> <code>relative_physical_stats</code> <code>int</code> <p>The required relation between the Pok\u00e9mon's Attack and Defense stats.</p> <code>time_of_day</code> <code>str</code> <p>The time of day the evolution must be triggered at.</p> <code>trade_species</code> <code>NamedResource</code> <p>The specific Pok\u00e9mon species that must be traded with the evolving Pok\u00e9mon species.</p> <code>turn_upside_down</code> <code>bool</code> <p>Whether or not the 3DS needs to be turned upside-down as this Pok\u00e9mon levels up.</p>"},{"location":"api_reference/models/abstract/utils/evolutions/#pokelance.models.abstract.utils.evolutions.EvolutionDetail.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/utils/games/","title":"Games","text":""},{"location":"api_reference/models/abstract/utils/games/#pokelance.models.abstract.utils.games","title":"<code>pokelance.models.abstract.utils.games</code>","text":""},{"location":"api_reference/models/abstract/utils/games/#pokelance.models.abstract.utils.games.PokemonEntry","title":"<code>PokemonEntry</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A pokemon entry resource.</p> <p>Attributes:</p> Name Type Description <code>entry_number</code> <code>int</code> <p>The index of this Pok\u00e9mon species entry within the Pok\u00e9dex.</p> <code>pokemon_species</code> <code>NamedResource</code> <p>The Pok\u00e9mon species being encountered.</p>"},{"location":"api_reference/models/abstract/utils/games/#pokelance.models.abstract.utils.games.PokemonEntry.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/utils/items/","title":"Items","text":""},{"location":"api_reference/models/abstract/utils/items/#pokelance.models.abstract.utils.items","title":"<code>pokelance.models.abstract.utils.items</code>","text":""},{"location":"api_reference/models/abstract/utils/items/#pokelance.models.abstract.utils.items.ItemHolderPokemon","title":"<code>ItemHolderPokemon</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>An item holder pokemon resource.</p> <p>Attributes:</p> Name Type Description <code>pokemon</code> <code>str</code> <p>The Pok\u00e9mon that holds this item.</p> <code>version_details</code> <code>List[ItemHolderPokemonVersionDetail]</code> <p>The details for the version that this item is held in by the Pok\u00e9mon.</p>"},{"location":"api_reference/models/abstract/utils/items/#pokelance.models.abstract.utils.items.ItemHolderPokemon.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/utils/items/#pokelance.models.abstract.utils.items.ItemHolderPokemonVersionDetail","title":"<code>ItemHolderPokemonVersionDetail</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>An item holder pokemon version detail resource.</p> <p>Attributes:</p> Name Type Description <code>rarity</code> <code>int</code> <p>The chance of this Pok\u00e9mon holding this item in this version.</p> <code>version</code> <code>NamedResource</code> <p>The version that this item is held in by the Pok\u00e9mon.</p>"},{"location":"api_reference/models/abstract/utils/items/#pokelance.models.abstract.utils.items.ItemHolderPokemonVersionDetail.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/utils/items/#pokelance.models.abstract.utils.items.ItemSprites","title":"<code>ItemSprites</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>An item sprites resource.</p> <p>Attributes:</p> Name Type Description <code>default</code> <code>str</code> <p>The default depiction of this item.</p>"},{"location":"api_reference/models/abstract/utils/items/#pokelance.models.abstract.utils.items.ItemSprites.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/utils/locations/","title":"Locations","text":""},{"location":"api_reference/models/abstract/utils/locations/#pokelance.models.abstract.utils.locations","title":"<code>pokelance.models.abstract.utils.locations</code>","text":""},{"location":"api_reference/models/abstract/utils/locations/#pokelance.models.abstract.utils.locations.EncounterMethodRate","title":"<code>EncounterMethodRate</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>An encounter method rate resource.</p> <p>Attributes:</p> Name Type Description <code>encounter_method</code> <code>NamedResource</code> <p>The method in which Pok\u00e9mon may be encountered in an area.</p> <code>version_details</code> <code>List[EncounterVersionDetails]</code> <p>A list of version details for the encounter.</p>"},{"location":"api_reference/models/abstract/utils/locations/#pokelance.models.abstract.utils.locations.EncounterMethodRate.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/utils/locations/#pokelance.models.abstract.utils.locations.EncounterVersionDetails","title":"<code>EncounterVersionDetails</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>An encounter version details resource.</p> <p>Attributes:</p> Name Type Description <code>rate</code> <code>int</code> <p>The chance of an encounter to occur.</p> <code>version</code> <code>NamedResource</code> <p>The version of this encounter.</p>"},{"location":"api_reference/models/abstract/utils/locations/#pokelance.models.abstract.utils.locations.EncounterVersionDetails.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/utils/locations/#pokelance.models.abstract.utils.locations.PalParkEncounterSpecies","title":"<code>PalParkEncounterSpecies</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A pal park encounter species resource.</p> <p>Attributes:</p> Name Type Description <code>base_score</code> <code>int</code> <p>The base score given to the player when this Pok\u00e9mon is caught during a pal park run.</p> <code>rate</code> <code>int</code> <p>The base rate for encountering this Pok\u00e9mon in pal park.</p> <code>pokemon_species</code> <code>NamedResource</code> <p>The Pok\u00e9mon species being encountered.</p>"},{"location":"api_reference/models/abstract/utils/locations/#pokelance.models.abstract.utils.locations.PalParkEncounterSpecies.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/utils/locations/#pokelance.models.abstract.utils.locations.PokemonEncounter","title":"<code>PokemonEncounter</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A pokemon encounter resource.</p> <p>Attributes:</p> Name Type Description <code>pokemon</code> <code>NamedResource</code> <p>The Pok\u00e9mon being encountered.</p> <code>version_details</code> <code>List[VersionEncounterDetail]</code> <p>A list of versions and encounters with Pok\u00e9mon that might happen in the referenced location area.</p>"},{"location":"api_reference/models/abstract/utils/locations/#pokelance.models.abstract.utils.locations.PokemonEncounter.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/utils/moves/","title":"Moves","text":""},{"location":"api_reference/models/abstract/utils/moves/#pokelance.models.abstract.utils.moves","title":"<code>pokelance.models.abstract.utils.moves</code>","text":""},{"location":"api_reference/models/abstract/utils/moves/#pokelance.models.abstract.utils.moves.ContestComboDetail","title":"<code>ContestComboDetail</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A contest combo detail resource.</p> <p>Attributes:</p> Name Type Description <code>use_before</code> <code>NamedResource</code> <p>A detail of moves this move can be used before, i.e. leading into this move.</p> <code>use_after</code> <code>NamedResource</code> <p>A detail of moves this move can be used after, i.e. result in this move being used.</p>"},{"location":"api_reference/models/abstract/utils/moves/#pokelance.models.abstract.utils.moves.ContestComboDetail.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/utils/moves/#pokelance.models.abstract.utils.moves.ContestComboSet","title":"<code>ContestComboSet</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A contest combo set resource.</p> <p>Attributes:</p> Name Type Description <code>normal</code> <code>ContestComboDetail</code> <p>A detail of normal moves in a contest combo.</p> <code>super_</code> <code>ContestComboDetail</code> <p>A detail of super moves in a contest combo.</p>"},{"location":"api_reference/models/abstract/utils/moves/#pokelance.models.abstract.utils.moves.ContestComboSet.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/utils/moves/#pokelance.models.abstract.utils.moves.MoveFlavorText","title":"<code>MoveFlavorText</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A move flavor text resource.</p> <p>Attributes:</p> Name Type Description <code>flavor_text</code> <code>str</code> <p>The localized flavor text for an api resource in a specific language.</p> <code>language</code> <code>NamedResource</code> <p>The language this name is in.</p> <code>version_group</code> <code>NamedResource</code> <p>The version group that uses this flavor text.</p>"},{"location":"api_reference/models/abstract/utils/moves/#pokelance.models.abstract.utils.moves.MoveFlavorText.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/utils/moves/#pokelance.models.abstract.utils.moves.MoveMetaData","title":"<code>MoveMetaData</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A move meta data resource.</p> <p>Attributes:</p> Name Type Description <code>ailment</code> <code>NamedResource</code> <p>The status ailment this move inflicts on its target.</p> <code>category</code> <code>NamedResource</code> <p>The category of move this move falls under, e.g. damage or ailment.</p> <code>min_hits</code> <code>int</code> <p>The minimum number of times this move hits. Null if it always only hits once.</p> <code>max_hits</code> <code>int</code> <p>The maximum number of times this move hits. Null if it always only hits once.</p> <code>min_turns</code> <code>int</code> <p>The minimum number of turns this move continues to take effect. Null if it always only lasts one turn.</p> <code>max_turns</code> <code>int</code> <p>The maximum number of turns this move continues to take effect. Null if it always only lasts one turn.</p> <code>drain</code> <code>int</code> <p>HP drain (if positive) or Recoil damage (if negative), in percent of damage done.</p> <code>healing</code> <code>int</code> <p>The amount of hp gained by the attacking Pokemon, in percent of it's maximum HP.</p> <code>crit_rate</code> <code>int</code> <p>Critical hit rate bonus.</p> <code>ailment_chance</code> <code>int</code> <p>The likelihood this attack will cause an ailment.</p> <code>flinch_chance</code> <code>int</code> <p>The likelihood this attack will cause the target Pok\u00e9mon to flinch.</p> <code>stat_chance</code> <code>int</code> <p>The likelihood this attack will cause a stat change in the target Pok\u00e9mon.</p>"},{"location":"api_reference/models/abstract/utils/moves/#pokelance.models.abstract.utils.moves.MoveMetaData.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/utils/pokemons/","title":"Pokemons","text":""},{"location":"api_reference/models/abstract/utils/pokemons/#pokelance.models.abstract.utils.pokemons","title":"<code>pokelance.models.abstract.utils.pokemons</code>","text":""},{"location":"api_reference/models/abstract/utils/pokemons/#pokelance.models.abstract.utils.pokemons.AbilityEffectChange","title":"<code>AbilityEffectChange</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>An ability effect change resource.</p> <p>Attributes:</p> Name Type Description <code>effect_entries</code> <code>List[Effect]</code> <p>The previous effect of this ability listed in different languages.</p> <code>version_group</code> <code>NamedResource</code> <p>The version group in which the previous effect of this ability originated.</p>"},{"location":"api_reference/models/abstract/utils/pokemons/#pokelance.models.abstract.utils.pokemons.AbilityEffectChange.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/utils/pokemons/#pokelance.models.abstract.utils.pokemons.AbilityFlavorText","title":"<code>AbilityFlavorText</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>An ability flavor text resource.</p> <p>Attributes:</p> Name Type Description <code>flavor_text</code> <code>str</code> <p>The localized flavor text for an api resource in a specific language.</p> <code>language</code> <code>NamedResource</code> <p>The language this name is in.</p> <code>version_group</code> <code>NamedResource</code> <p>The version group that uses this flavor text.</p>"},{"location":"api_reference/models/abstract/utils/pokemons/#pokelance.models.abstract.utils.pokemons.AbilityFlavorText.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/utils/pokemons/#pokelance.models.abstract.utils.pokemons.AbilityPokemon","title":"<code>AbilityPokemon</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>An ability pokemon resource.</p> <p>Attributes:</p> Name Type Description <code>is_hidden</code> <code>bool</code> <p>Whether or not this a hidden ability for the referenced pokemon.</p> <code>slot</code> <code>int</code> <p>The slot this ability occupies in this pokemon species.</p> <code>pokemon</code> <code>NamedResource</code> <p>The pokemon this ability could belong to.</p>"},{"location":"api_reference/models/abstract/utils/pokemons/#pokelance.models.abstract.utils.pokemons.AbilityPokemon.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/utils/pokemons/#pokelance.models.abstract.utils.pokemons.Animated","title":"<code>Animated</code>","text":"<p>               Bases: <code>BaseSprite</code></p> <p>A pokemon animated sprite resource.</p>"},{"location":"api_reference/models/abstract/utils/pokemons/#pokelance.models.abstract.utils.pokemons.Animated.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/utils/pokemons/#pokelance.models.abstract.utils.pokemons.AwesomeName","title":"<code>AwesomeName</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>An awesome name resource.</p> <p>Attributes:</p> Name Type Description <code>awesome_name</code> <code>str</code> <p>The localized \"scientific\" name for an API resource in a specific language.</p> <code>language</code> <code>NamedResource</code> <p>The language this \"scientific\" name is in.</p>"},{"location":"api_reference/models/abstract/utils/pokemons/#pokelance.models.abstract.utils.pokemons.AwesomeName.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/utils/pokemons/#pokelance.models.abstract.utils.pokemons.BaseSprite","title":"<code>BaseSprite</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A pokemon sprite resource.</p> <p>Attributes:</p> Name Type Description <code>front_default</code> <code>str</code> <p>The default depiction of this pokemon from the front in battle.</p> <code>front_shiny</code> <code>str</code> <p>The shiny depiction of this pokemon from the front in battle.</p> <code>front_female</code> <code>str</code> <p>The default depiction of female gender of this pokemon from the front in battle.</p> <code>front_shiny_female</code> <code>str</code> <p>The shiny depiction of female gender of this pokemon from the front in battle.</p> <code>back_default</code> <code>str</code> <p>The default depiction of this pokemon from the back in battle.</p> <code>back_shiny</code> <code>str</code> <p>The shiny depiction of this pokemon from the back in battle.</p> <code>back_female</code> <code>str</code> <p>The default depiction of female gender of this pokemon from the back in battle.</p> <code>back_shiny_female</code> <code>str</code> <p>The shiny depiction of female gender of this pokemon from the back in battle.</p>"},{"location":"api_reference/models/abstract/utils/pokemons/#pokelance.models.abstract.utils.pokemons.BaseSprite.from_payload","title":"<code>from_payload(payload)</code>  <code>classmethod</code>","text":"<p>Create a model from a payload</p> <p>Parameters:</p> Name Type Description Default <code>payload</code> <code>Dict[str, Any]</code> <p>The payload to create the model from.</p> required <p>Returns:</p> Type Description <code>BaseModel</code> <p>The model created from the payload.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>@classmethod\ndef from_payload(cls, payload: t.Dict[str, t.Any]) -&gt; \"BaseModel\":\n    \"\"\"Create a model from a payload\n\n    Parameters\n    ----------\n    payload: typing.Dict[str, Any]\n        The payload to create the model from.\n\n    Returns\n    -------\n    BaseModel\n        The model created from the payload.\n    \"\"\"\n    return cls(raw=payload)\n</code></pre>"},{"location":"api_reference/models/abstract/utils/pokemons/#pokelance.models.abstract.utils.pokemons.BaseSprite.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/utils/pokemons/#pokelance.models.abstract.utils.pokemons.DreamWorld","title":"<code>DreamWorld</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A dream world resource.</p> <p>Attributes:</p> Name Type Description <code>front_default</code> <code>str</code> <p>The default depiction of this pokemon.</p> <code>front_female</code> <code>str</code> <p>The female depiction of this pokemon.</p>"},{"location":"api_reference/models/abstract/utils/pokemons/#pokelance.models.abstract.utils.pokemons.DreamWorld.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/utils/pokemons/#pokelance.models.abstract.utils.pokemons.Generation","title":"<code>Generation</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A generation resource.</p>"},{"location":"api_reference/models/abstract/utils/pokemons/#pokelance.models.abstract.utils.pokemons.Generation.from_payload","title":"<code>from_payload(payload)</code>  <code>classmethod</code>","text":"<p>Create a model from a payload</p> <p>Parameters:</p> Name Type Description Default <code>payload</code> <code>Dict[str, Any]</code> <p>The payload to create the model from.</p> required <p>Returns:</p> Type Description <code>BaseModel</code> <p>The model created from the payload.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>@classmethod\ndef from_payload(cls, payload: t.Dict[str, t.Any]) -&gt; \"BaseModel\":\n    \"\"\"Create a model from a payload\n\n    Parameters\n    ----------\n    payload: typing.Dict[str, Any]\n        The payload to create the model from.\n\n    Returns\n    -------\n    BaseModel\n        The model created from the payload.\n    \"\"\"\n    return cls(raw=payload)\n</code></pre>"},{"location":"api_reference/models/abstract/utils/pokemons/#pokelance.models.abstract.utils.pokemons.Generation.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/utils/pokemons/#pokelance.models.abstract.utils.pokemons.GenerationI","title":"<code>GenerationI</code>","text":"<p>               Bases: <code>Generation</code></p> <p>A generation I resource.</p> <p>Attributes:</p> Name Type Description <code>red_blue</code> <code>VersionSprite</code> <p>The red-blue depiction of this pokemon.</p> <code>yellow</code> <code>VersionSprite</code> <p>The yellow depiction of this pokemon.</p>"},{"location":"api_reference/models/abstract/utils/pokemons/#pokelance.models.abstract.utils.pokemons.GenerationI.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/utils/pokemons/#pokelance.models.abstract.utils.pokemons.GenerationII","title":"<code>GenerationII</code>","text":"<p>               Bases: <code>Generation</code></p> <p>A generation II resource.</p> <p>Attributes:</p> Name Type Description <code>crystal</code> <code>VersionSprite</code> <p>The crystal depiction of this pokemon.</p> <code>gold</code> <code>VersionSprite</code> <p>The gold depiction of this pokemon.</p> <code>silver</code> <code>VersionSprite</code> <p>The silver depiction of this pokemon.</p>"},{"location":"api_reference/models/abstract/utils/pokemons/#pokelance.models.abstract.utils.pokemons.GenerationII.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/utils/pokemons/#pokelance.models.abstract.utils.pokemons.GenerationIII","title":"<code>GenerationIII</code>","text":"<p>               Bases: <code>Generation</code></p> <p>A generation III resource.</p> <p>Attributes:</p> Name Type Description <code>emerald</code> <code>VersionSprite</code> <p>The emerald depiction of this pokemon.</p> <code>firered_leafgreen</code> <code>VersionSprite</code> <p>The firered-leafgreen depiction of this pokemon.</p> <code>ruby_sapphire</code> <code>VersionSprite</code> <p>The ruby-sapphire depiction of this pokemon.</p>"},{"location":"api_reference/models/abstract/utils/pokemons/#pokelance.models.abstract.utils.pokemons.GenerationIII.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/utils/pokemons/#pokelance.models.abstract.utils.pokemons.GenerationIV","title":"<code>GenerationIV</code>","text":"<p>               Bases: <code>Generation</code></p> <p>A generation IV resource.</p> <p>Attributes:</p> Name Type Description <code>diamond_pearl</code> <code>VersionSprite</code> <p>The diamond-pearl depiction of this pokemon.</p> <code>heartgold_soulsilver</code> <code>VersionSprite</code> <p>The heartgold-soulsilver depiction of this pokemon.</p> <code>platinum</code> <code>VersionSprite</code> <p>The platinum depiction of this pokemon.</p>"},{"location":"api_reference/models/abstract/utils/pokemons/#pokelance.models.abstract.utils.pokemons.GenerationIV.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/utils/pokemons/#pokelance.models.abstract.utils.pokemons.GenerationV","title":"<code>GenerationV</code>","text":"<p>               Bases: <code>Generation</code></p> <p>A generation V resource.</p> <p>Attributes:</p> Name Type Description <code>black_white</code> <code>VersionSprite</code> <p>The black-white depiction of this pokemon.</p>"},{"location":"api_reference/models/abstract/utils/pokemons/#pokelance.models.abstract.utils.pokemons.GenerationV.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/utils/pokemons/#pokelance.models.abstract.utils.pokemons.GenerationVI","title":"<code>GenerationVI</code>","text":"<p>               Bases: <code>Generation</code></p> <p>A generation VI resource.</p> <p>Attributes:</p> Name Type Description <code>omegaruby_alphasapphire</code> <code>VersionSprite</code> <p>The omegaruby-alphasapphire depiction of this pokemon.</p> <code>x_y</code> <code>VersionSprite</code> <p>The x-y depiction of this pokemon.</p>"},{"location":"api_reference/models/abstract/utils/pokemons/#pokelance.models.abstract.utils.pokemons.GenerationVI.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/utils/pokemons/#pokelance.models.abstract.utils.pokemons.GenerationVII","title":"<code>GenerationVII</code>","text":"<p>               Bases: <code>Generation</code></p> <p>A generation VII resource.</p> <p>Attributes:</p> Name Type Description <code>icons</code> <code>VersionSprite</code> <p>The icons depiction of this pokemon.</p> <code>ultra_sun_ultra_moon</code> <code>VersionSprite</code> <p>The ultra-sun-ultra-moon depiction of this pokemon.</p>"},{"location":"api_reference/models/abstract/utils/pokemons/#pokelance.models.abstract.utils.pokemons.GenerationVII.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/utils/pokemons/#pokelance.models.abstract.utils.pokemons.GenerationVIII","title":"<code>GenerationVIII</code>","text":"<p>               Bases: <code>Generation</code></p> <p>A generation VIII resource.</p> <p>Attributes:</p> Name Type Description <code>icons</code> <code>VersionSprite</code> <p>The icons depiction of this pokemon.</p>"},{"location":"api_reference/models/abstract/utils/pokemons/#pokelance.models.abstract.utils.pokemons.GenerationVIII.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/utils/pokemons/#pokelance.models.abstract.utils.pokemons.Genus","title":"<code>Genus</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A genus resource.</p> <p>Attributes:</p> Name Type Description <code>genus</code> <code>str</code> <p>The localized genus for the referenced type in the specified language.</p> <code>language</code> <code>NamedResource</code> <p>The language this genus is in.</p>"},{"location":"api_reference/models/abstract/utils/pokemons/#pokelance.models.abstract.utils.pokemons.Genus.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/utils/pokemons/#pokelance.models.abstract.utils.pokemons.GrowthRateExperienceLevel","title":"<code>GrowthRateExperienceLevel</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A growth rate experience level resource.</p> <p>Attributes:</p> Name Type Description <code>level</code> <code>int</code> <p>The level gained.</p> <code>experience</code> <code>int</code> <p>The amount of experience required to reach the referenced level.</p>"},{"location":"api_reference/models/abstract/utils/pokemons/#pokelance.models.abstract.utils.pokemons.GrowthRateExperienceLevel.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/utils/pokemons/#pokelance.models.abstract.utils.pokemons.Home","title":"<code>Home</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A home resource.</p> <p>Attributes:</p> Name Type Description <code>front_default</code> <code>str</code> <p>The default depiction of this pokemon.</p> <code>front_female</code> <code>str</code> <p>The female depiction of this pokemon.</p> <code>front_shiny</code> <code>str</code> <p>The shiny depiction of this pokemon.</p> <code>front_shiny_female</code> <code>str</code> <p>The shiny female depiction of this pokemon.</p>"},{"location":"api_reference/models/abstract/utils/pokemons/#pokelance.models.abstract.utils.pokemons.Home.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/utils/pokemons/#pokelance.models.abstract.utils.pokemons.MoveBattleStylePreference","title":"<code>MoveBattleStylePreference</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A move battle style preference resource.</p> <p>Attributes:</p> Name Type Description <code>low_hp_preference</code> <code>int</code> <p>Chance of using the move, in percent, if HP is under one half.</p> <code>high_hp_preference</code> <code>int</code> <p>Chance of using the move, in percent, if HP is over one half.</p> <code>move_battle_style</code> <code>NamedResource</code> <p>The move battle style.</p>"},{"location":"api_reference/models/abstract/utils/pokemons/#pokelance.models.abstract.utils.pokemons.MoveBattleStylePreference.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/utils/pokemons/#pokelance.models.abstract.utils.pokemons.MoveStatAffectSets","title":"<code>MoveStatAffectSets</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A move stat affect sets resource.</p> <p>Attributes:</p> Name Type Description <code>increase</code> <code>List[MoveStatAffect]</code> <p>A list of move stat affects.</p> <code>decrease</code> <code>List[MoveStatAffect]</code> <p>A list of move stat affects.</p>"},{"location":"api_reference/models/abstract/utils/pokemons/#pokelance.models.abstract.utils.pokemons.MoveStatAffectSets.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/utils/pokemons/#pokelance.models.abstract.utils.pokemons.MoveStatEffect","title":"<code>MoveStatEffect</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A move stat effect resource.</p> <p>Attributes:</p> Name Type Description <code>change</code> <code>int</code> <p>The maximum amount of change to the referenced stat.</p> <code>move</code> <code>NamedResource</code> <p>The move causing the effect.</p>"},{"location":"api_reference/models/abstract/utils/pokemons/#pokelance.models.abstract.utils.pokemons.MoveStatEffect.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/utils/pokemons/#pokelance.models.abstract.utils.pokemons.NaturePokeathlonStatAffect","title":"<code>NaturePokeathlonStatAffect</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A nature pokeathlon stat affect resource.</p> <p>Attributes:</p> Name Type Description <code>max_change</code> <code>int</code> <p>The maximum amount of change to the referenced stat.</p> <code>nature</code> <code>NamedResource</code> <p>The nature causing the change.</p>"},{"location":"api_reference/models/abstract/utils/pokemons/#pokelance.models.abstract.utils.pokemons.NaturePokeathlonStatAffect.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/utils/pokemons/#pokelance.models.abstract.utils.pokemons.NaturePokeathlonStatAffectSet","title":"<code>NaturePokeathlonStatAffectSet</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A nature pokeathlon stat affect set resource.</p> <p>Attributes:</p> Name Type Description <code>increase</code> <code>List[NaturePokeathlonStatAffect]</code> <p>A list of natures and how they change the referenced pokeathlon stat.</p> <code>decrease</code> <code>List[NaturePokeathlonStatAffect]</code> <p>A list of natures and how they change the referenced pokeathlon stat.</p>"},{"location":"api_reference/models/abstract/utils/pokemons/#pokelance.models.abstract.utils.pokemons.NaturePokeathlonStatAffectSet.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/utils/pokemons/#pokelance.models.abstract.utils.pokemons.NatureStatAffectSets","title":"<code>NatureStatAffectSets</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A nature stat affect sets resource.</p> <p>Attributes:</p> Name Type Description <code>increase</code> <code>List[NatureStatAffect]</code> <p>A list of nature stat affects.</p> <code>decrease</code> <code>List[NatureStatAffect]</code> <p>A list of nature stat affects.</p>"},{"location":"api_reference/models/abstract/utils/pokemons/#pokelance.models.abstract.utils.pokemons.NatureStatAffectSets.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/utils/pokemons/#pokelance.models.abstract.utils.pokemons.NatureStatChange","title":"<code>NatureStatChange</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A nature stat change resource.</p> <p>Attributes:</p> Name Type Description <code>max_change</code> <code>int</code> <p>The maximum amount of change to the referenced stat.</p> <code>pokeathlon_stat</code> <code>NamedResource</code> <p>The stat being affected.</p>"},{"location":"api_reference/models/abstract/utils/pokemons/#pokelance.models.abstract.utils.pokemons.NatureStatChange.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/utils/pokemons/#pokelance.models.abstract.utils.pokemons.OfficialArtwork","title":"<code>OfficialArtwork</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Official artwork for this Pok\u00e9mon from Nintendo.</p> <p>Attributes:</p> Name Type Description <code>front_default</code> <code>str</code> <p>The default depiction of this Pok\u00e9mon from the official artwork.</p> <code>front_shiny</code> <code>str</code> <p>The shiny depiction of this Pok\u00e9mon from the official artwork.</p>"},{"location":"api_reference/models/abstract/utils/pokemons/#pokelance.models.abstract.utils.pokemons.OfficialArtwork.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/utils/pokemons/#pokelance.models.abstract.utils.pokemons.Other","title":"<code>Other</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Other sprites for this pokemon</p> <p>Attributes:</p> Name Type Description <code>dream_world</code> <code>DreamWorld</code> <p>The dream world sprites for this pokemon</p> <code>home</code> <code>Home</code> <p>The home sprites for this pokemon</p> <code>official_artwork</code> <code>OfficialArtwork</code> <p>The official artwork sprites for this pokemon</p> <code>showndown</code> <code>ShowdownSprites</code> <p>The showdown sprites for this pokemon</p>"},{"location":"api_reference/models/abstract/utils/pokemons/#pokelance.models.abstract.utils.pokemons.Other.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/utils/pokemons/#pokelance.models.abstract.utils.pokemons.PalParkEncounterArea","title":"<code>PalParkEncounterArea</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A pal park encounter area resource.</p> <p>Attributes:</p> Name Type Description <code>base_score</code> <code>int</code> <p>The base score given to the player when the referenced Pok\u00e9mon is caught during a pal park run.</p> <code>rate</code> <code>int</code> <p>The base rate for encountering the referenced Pok\u00e9mon in this pal park area.</p> <code>area</code> <code>NamedResource</code> <p>The pal park area where this encounter happens.</p>"},{"location":"api_reference/models/abstract/utils/pokemons/#pokelance.models.abstract.utils.pokemons.PalParkEncounterArea.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/utils/pokemons/#pokelance.models.abstract.utils.pokemons.PokemonAbility","title":"<code>PokemonAbility</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A pokemon ability resource.</p> <p>Attributes:</p> Name Type Description <code>is_hidden</code> <code>bool</code> <p>Whether or not this is a hidden ability.</p> <code>slot</code> <code>int</code> <p>The slot this ability occupies in this pokemon species.</p> <code>ability</code> <code>NamedResource</code> <p>The ability the pokemon may have.</p>"},{"location":"api_reference/models/abstract/utils/pokemons/#pokelance.models.abstract.utils.pokemons.PokemonAbility.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/utils/pokemons/#pokelance.models.abstract.utils.pokemons.PokemonAbilityPast","title":"<code>PokemonAbilityPast</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A pokemon ability past resource.</p> <p>Attributes:</p> Name Type Description <code>generation</code> <code>NamedResource</code> <p>The generation this ability was introduced in.</p> <code>abilities</code> <code>List[NamedResource]</code> <p>The name of the ability.</p>"},{"location":"api_reference/models/abstract/utils/pokemons/#pokelance.models.abstract.utils.pokemons.PokemonAbilityPast.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/utils/pokemons/#pokelance.models.abstract.utils.pokemons.PokemonCries","title":"<code>PokemonCries</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A pokemon cries resource.</p> <p>Attributes:</p> Name Type Description <code>latest</code> <code>str</code> <p>The latest cry of this pokemon based on newer games.</p> <code>legacy</code> <code>str</code> <p>The legacy cry of this pokemon based on older games. Usually from Gen 1 - 5.</p>"},{"location":"api_reference/models/abstract/utils/pokemons/#pokelance.models.abstract.utils.pokemons.PokemonCries.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/utils/pokemons/#pokelance.models.abstract.utils.pokemons.PokemonFormSprites","title":"<code>PokemonFormSprites</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A pokemon form sprites resource.</p> <p>Attributes:</p> Name Type Description <code>front_default</code> <code>str</code> <p>The default depiction of this pokemon form from the front in battle.</p> <code>front_shiny</code> <code>str</code> <p>The shiny depiction of this pokemon form from the front in battle.</p> <code>back_default</code> <code>str</code> <p>The default depiction of this pokemon form from the back in battle.</p> <code>back_shiny</code> <code>str</code> <p>The shiny depiction of this pokemon form from the back in battle.</p>"},{"location":"api_reference/models/abstract/utils/pokemons/#pokelance.models.abstract.utils.pokemons.PokemonFormSprites.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/utils/pokemons/#pokelance.models.abstract.utils.pokemons.PokemonFormType","title":"<code>PokemonFormType</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A pokemon form type resource.</p> <p>Attributes:</p> Name Type Description <code>slot</code> <code>int</code> <p>The order the types are listed in.</p> <code>type</code> <code>NamedResource</code> <p>The type the referenced pokemon has.</p>"},{"location":"api_reference/models/abstract/utils/pokemons/#pokelance.models.abstract.utils.pokemons.PokemonFormType.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/utils/pokemons/#pokelance.models.abstract.utils.pokemons.PokemonHeldItem","title":"<code>PokemonHeldItem</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A pokemon held item resource.</p> <p>Attributes:</p> Name Type Description <code>item</code> <code>NamedResource</code> <p>The item the referenced pokemon holds.</p> <code>version_details</code> <code>List[PokemonHeldItemVersion]</code> <p>The details for the version that this item is held in by the pokemon.</p>"},{"location":"api_reference/models/abstract/utils/pokemons/#pokelance.models.abstract.utils.pokemons.PokemonHeldItem.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/utils/pokemons/#pokelance.models.abstract.utils.pokemons.PokemonHeldItemVersion","title":"<code>PokemonHeldItemVersion</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A pokemon held item version resource.</p> <p>Attributes:</p> Name Type Description <code>rarity</code> <code>int</code> <p>How often this item is held.</p> <code>version</code> <code>NamedResource</code> <p>The version this item is held in by the pokemon.</p>"},{"location":"api_reference/models/abstract/utils/pokemons/#pokelance.models.abstract.utils.pokemons.PokemonHeldItemVersion.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/utils/pokemons/#pokelance.models.abstract.utils.pokemons.PokemonMove","title":"<code>PokemonMove</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A pokemon move resource.</p> <p>Attributes:</p> Name Type Description <code>move</code> <code>NamedResource</code> <p>The move the referenced pokemon can learn.</p> <code>version_group_details</code> <code>List[PokemonMoveVersion]</code> <p>The details for the version group that this move can be learned in.</p>"},{"location":"api_reference/models/abstract/utils/pokemons/#pokelance.models.abstract.utils.pokemons.PokemonMove.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/utils/pokemons/#pokelance.models.abstract.utils.pokemons.PokemonMoveVersion","title":"<code>PokemonMoveVersion</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A pokemon move version resource.</p> <p>Attributes:</p> Name Type Description <code>move_learn_method</code> <code>NamedResource</code> <p>The method by which the move is learned.</p> <code>version_group</code> <code>NamedResource</code> <p>The version group in which the move is learned.</p> <code>level_learned_at</code> <code>int</code> <p>The minimum level to learn the move.</p>"},{"location":"api_reference/models/abstract/utils/pokemons/#pokelance.models.abstract.utils.pokemons.PokemonMoveVersion.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/utils/pokemons/#pokelance.models.abstract.utils.pokemons.PokemonSpeciesDexEntry","title":"<code>PokemonSpeciesDexEntry</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A pokemon species dex entry resource.</p> <p>Attributes:</p> Name Type Description <code>entry_number</code> <code>int</code> <p>The index number within the Pok\u00e9dex.</p> <code>pokedex</code> <code>NamedResource</code> <p>The Pok\u00e9dex the referenced Pok\u00e9mon species can be found in.</p>"},{"location":"api_reference/models/abstract/utils/pokemons/#pokelance.models.abstract.utils.pokemons.PokemonSpeciesDexEntry.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/utils/pokemons/#pokelance.models.abstract.utils.pokemons.PokemonSpeciesGender","title":"<code>PokemonSpeciesGender</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A pokemon species gender resource.</p> <p>Attributes:</p> Name Type Description <code>rate</code> <code>int</code> <p>The chance of a particular gender in this pokemon species.</p> <code>pokemon_species</code> <code>NamedResource</code> <p>The pokemon species here.</p>"},{"location":"api_reference/models/abstract/utils/pokemons/#pokelance.models.abstract.utils.pokemons.PokemonSpeciesGender.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/utils/pokemons/#pokelance.models.abstract.utils.pokemons.PokemonSpeciesVariety","title":"<code>PokemonSpeciesVariety</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A pokemon species variety resource.</p> <p>Attributes:</p> Name Type Description <code>is_default</code> <code>bool</code> <p>Whether this variety is the default variety.</p> <code>pokemon</code> <code>NamedResource</code> <p>The Pok\u00e9mon variety.</p>"},{"location":"api_reference/models/abstract/utils/pokemons/#pokelance.models.abstract.utils.pokemons.PokemonSpeciesVariety.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/utils/pokemons/#pokelance.models.abstract.utils.pokemons.PokemonSprite","title":"<code>PokemonSprite</code>","text":"<p>               Bases: <code>BaseSprite</code></p> <p>A pokemon sprite resource.</p> <p>Attributes:</p> Name Type Description <code>other</code> <code>Other</code> <p>A set of sprites used tin official artwork, home.</p> <code>versions</code> <code>Versions</code> <p>A set of sprites used to depict this Pok\u00e9mon in the game.</p>"},{"location":"api_reference/models/abstract/utils/pokemons/#pokelance.models.abstract.utils.pokemons.PokemonSprite.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/utils/pokemons/#pokelance.models.abstract.utils.pokemons.PokemonStat","title":"<code>PokemonStat</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A pokemon stat resource.</p> <p>Attributes:</p> Name Type Description <code>stat</code> <code>NamedResource</code> <p>The stat the referenced pokemon has.</p> <code>effort</code> <code>int</code> <p>The effort points (EV) the referenced pokemon has in the stat.</p> <code>base_stat</code> <code>int</code> <p>The base value of the stat.</p>"},{"location":"api_reference/models/abstract/utils/pokemons/#pokelance.models.abstract.utils.pokemons.PokemonStat.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/utils/pokemons/#pokelance.models.abstract.utils.pokemons.PokemonType","title":"<code>PokemonType</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A pokemon type resource.</p> <p>Attributes:</p> Name Type Description <code>slot</code> <code>int</code> <p>The order the types are listed in.</p> <code>type</code> <code>NamedResource</code> <p>The type the referenced pokemon has.</p>"},{"location":"api_reference/models/abstract/utils/pokemons/#pokelance.models.abstract.utils.pokemons.PokemonType.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/utils/pokemons/#pokelance.models.abstract.utils.pokemons.PokemonTypePast","title":"<code>PokemonTypePast</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A pokemon type past resource.</p> <p>Attributes:</p> Name Type Description <code>generation</code> <code>NamedResource</code> <p>The generation this type was introduced in.</p> <code>types</code> <code>List[NamedResource]</code> <p>The name of the type.</p>"},{"location":"api_reference/models/abstract/utils/pokemons/#pokelance.models.abstract.utils.pokemons.PokemonTypePast.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/utils/pokemons/#pokelance.models.abstract.utils.pokemons.ShowdownSprites","title":"<code>ShowdownSprites</code>","text":"<p>               Bases: <code>BaseSprite</code></p> <p>Showdown sprites.</p> <p>As of now pokeapi doesn't include showdown sprites in their API payload. But they are available in their sprites repository.</p>"},{"location":"api_reference/models/abstract/utils/pokemons/#pokelance.models.abstract.utils.pokemons.ShowdownSprites.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/utils/pokemons/#pokelance.models.abstract.utils.pokemons.TypePokemon","title":"<code>TypePokemon</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A type pokemon resource.</p> <p>Attributes:</p> Name Type Description <code>slot</code> <code>int</code> <p>The order the Pok\u00e9mon's types are listed in.</p> <code>pokemon</code> <code>NamedResource</code> <p>The Pok\u00e9mon that has the referenced type.</p>"},{"location":"api_reference/models/abstract/utils/pokemons/#pokelance.models.abstract.utils.pokemons.TypePokemon.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/utils/pokemons/#pokelance.models.abstract.utils.pokemons.TypeRelations","title":"<code>TypeRelations</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A type relations resource.</p> <p>Attributes:</p> Name Type Description <code>no_damage_to</code> <code>List[NamedResource]</code> <p>A list of types this type has no damage to.</p> <code>half_damage_to</code> <code>List[NamedResource]</code> <p>A list of types this type is half damage to.</p> <code>double_damage_to</code> <code>List[NamedResource]</code> <p>A list of types this type is double damage to.</p> <code>no_damage_from</code> <code>List[NamedResource]</code> <p>A list of types that have no damage to this type.</p> <code>half_damage_from</code> <code>List[NamedResource]</code> <p>A list of types that have half damage to this type.</p> <code>double_damage_from</code> <code>List[NamedResource]</code> <p>A list of types that have double damage to this type.</p>"},{"location":"api_reference/models/abstract/utils/pokemons/#pokelance.models.abstract.utils.pokemons.TypeRelations.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/utils/pokemons/#pokelance.models.abstract.utils.pokemons.TypeRelationsPast","title":"<code>TypeRelationsPast</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A type relations past resource.</p> <p>Attributes:</p> Name Type Description <code>generation</code> <code>NamedResource</code> <p>The generation of this type relation.</p> <code>damage_relations</code> <code>TypeRelations</code> <p>The type relations for this generation.</p>"},{"location":"api_reference/models/abstract/utils/pokemons/#pokelance.models.abstract.utils.pokemons.TypeRelationsPast.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/utils/pokemons/#pokelance.models.abstract.utils.pokemons.VersionSprite","title":"<code>VersionSprite</code>","text":"<p>               Bases: <code>BaseSprite</code></p> <p>A pokemon version sprite resource.</p> <p>Attributes:</p> Name Type Description <code>back_gray</code> <code>str</code> <p>The gray depiction of this pokemon from the back in battle.</p> <code>front_gray</code> <code>str</code> <p>The gray depiction of this pokemon from the front in battle.</p> <code>back_transperent</code> <code>str</code> <p>The transparent depiction of this pokemon from the back in battle.</p> <code>front_transperent</code> <code>str</code> <p>The transparent depiction of this pokemon from the front in battle.</p> <code>animated</code> <code>Animated</code> <p>The animated depiction of this pokemon.</p>"},{"location":"api_reference/models/abstract/utils/pokemons/#pokelance.models.abstract.utils.pokemons.VersionSprite.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/abstract/utils/pokemons/#pokelance.models.abstract.utils.pokemons.Versions","title":"<code>Versions</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A sprite resource for all generations.</p> <p>Attributes:</p> Name Type Description <code>generation_i</code> <code>GenerationI</code> <p>The generation I depiction of this pokemon.</p> <code>generation_ii</code> <code>GenerationII</code> <p>The generation II depiction of this pokemon.</p> <code>generation_iii</code> <code>GenerationIII</code> <p>The generation III depiction of this pokemon.</p> <code>generation_iv</code> <code>GenerationIV</code> <p>The generation IV depiction of this pokemon.</p> <code>generation_v</code> <code>GenerationV</code> <p>The generation V depiction of this pokemon.</p> <code>generation_vi</code> <code>GenerationVI</code> <p>The generation VI depiction of this pokemon.</p> <code>generation_vii</code> <code>GenerationVII</code> <p>The generation VII depiction of this pokemon.</p> <code>generation_viii</code> <code>GenerationVIII</code> <p>The generation VIII depiction of this pokemon.</p>"},{"location":"api_reference/models/abstract/utils/pokemons/#pokelance.models.abstract.utils.pokemons.Versions.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/common/models/","title":"Models","text":""},{"location":"api_reference/models/common/models/#pokelance.models.common.models","title":"<code>pokelance.models.common.models</code>","text":""},{"location":"api_reference/models/common/models/#pokelance.models.common.models.Description","title":"<code>Description</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Model for a description object</p> <p>Attributes:</p> Name Type Description <code>description</code> <code>str</code> <p>The localized description for an API resource in a specific language.</p> <code>language</code> <code>NamedResource</code> <p>The language this name is in.</p>"},{"location":"api_reference/models/common/models/#pokelance.models.common.models.Description.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/common/models/#pokelance.models.common.models.Effect","title":"<code>Effect</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Model for an effect object</p> <p>Attributes:</p> Name Type Description <code>effect</code> <code>str</code> <p>The localized effect text for an API resource in a specific language.</p> <code>language</code> <code>NamedResource</code> <p>The language this effect is in.</p>"},{"location":"api_reference/models/common/models/#pokelance.models.common.models.Effect.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/common/models/#pokelance.models.common.models.Encounter","title":"<code>Encounter</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Model for an encounter object</p> <p>Attributes:</p> Name Type Description <code>min_level</code> <code>int</code> <p>The lowest level the Pok\u00e9mon could be encountered at.</p> <code>max_level</code> <code>int</code> <p>The highest level the Pok\u00e9mon could be encountered at.</p> <code>condition_values</code> <code>List[NamedResource]</code> <p>A list of condition values that must be in effect for this encounter to occur.</p> <code>chance</code> <code>int</code> <p>The chance of the encounter to occur on a version of the game.</p> <code>method</code> <code>NamedResource</code> <p>The method by which this encounter happens.</p>"},{"location":"api_reference/models/common/models/#pokelance.models.common.models.Encounter.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/common/models/#pokelance.models.common.models.FlavorText","title":"<code>FlavorText</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Model for a flavor text object</p> <p>Attributes:</p> Name Type Description <code>flavor_text</code> <code>str</code> <p>The localized flavor text for an API resource in a specific language.</p> <code>language</code> <code>NamedResource</code> <p>The language this name is in.</p> <code>version</code> <code>NamedResource</code> <p>The version this flavor text entry belongs to.</p>"},{"location":"api_reference/models/common/models/#pokelance.models.common.models.FlavorText.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/common/models/#pokelance.models.common.models.GenerationGameIndex","title":"<code>GenerationGameIndex</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Model for a generation game index object</p> <p>Attributes:</p> Name Type Description <code>game_index</code> <code>int</code> <p>The internal id of an API resource within game data.</p> <code>generation</code> <code>NamedResource</code> <p>The generation relevent to this game index.</p>"},{"location":"api_reference/models/common/models/#pokelance.models.common.models.GenerationGameIndex.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/common/models/#pokelance.models.common.models.Language","title":"<code>Language</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Model for a language object</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The identifier for this resource.</p> <code>name</code> <code>str</code> <p>The name for this resource.</p> <code>official</code> <code>bool</code> <p>Whether or not the games are published in this language.</p> <code>iso639</code> <code>str</code> <p>The two-letter code of the country where this language is spoken. Note that it is not unique.</p> <code>iso3166</code> <code>str</code> <p>The two-letter code of the language. Note that it is not unique.</p> <code>names</code> <code>List[Name]</code> <p>The name of this resource listed in different languages.</p>"},{"location":"api_reference/models/common/models/#pokelance.models.common.models.Language.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/common/models/#pokelance.models.common.models.MachineVersionDetail","title":"<code>MachineVersionDetail</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Model for a machine version detail object</p> <p>Attributes:</p> Name Type Description <code>machine</code> <code>Resource</code> <p>The machine that teaches a move from an item.</p> <code>version_group</code> <code>NamedResource</code> <p>The version group of this specific machine.</p>"},{"location":"api_reference/models/common/models/#pokelance.models.common.models.MachineVersionDetail.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/common/models/#pokelance.models.common.models.Name","title":"<code>Name</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Model for a name object</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The localized name for an API resource in a specific language.</p> <code>language</code> <code>NamedResource</code> <p>The language this name is in.</p>"},{"location":"api_reference/models/common/models/#pokelance.models.common.models.Name.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/common/models/#pokelance.models.common.models.VerboseEffect","title":"<code>VerboseEffect</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Model for a verbose effect object</p> <p>Attributes:</p> Name Type Description <code>effect</code> <code>str</code> <p>The localized effect text for an API resource in a specific language.</p> <code>short_effect</code> <code>str</code> <p>The localized short effect text for an API resource in a specific language.</p> <code>language</code> <code>NamedResource</code> <p>The language this effect is in.</p>"},{"location":"api_reference/models/common/models/#pokelance.models.common.models.VerboseEffect.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/common/models/#pokelance.models.common.models.VersionEncounterDetail","title":"<code>VersionEncounterDetail</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Model for a version encounter detail object</p> <p>Attributes:</p> Name Type Description <code>max_chance</code> <code>int</code> <p>The chance of an encounter to occur.</p> <code>encounter_details</code> <code>List[Encounter]</code> <p>A list of encounters and their specifics.</p> <code>version</code> <code>NamedResource</code> <p>The game version this encounter happens in.</p>"},{"location":"api_reference/models/common/models/#pokelance.models.common.models.VersionEncounterDetail.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/common/models/#pokelance.models.common.models.VersionGameIndex","title":"<code>VersionGameIndex</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Model for a version game index object</p> <p>Attributes:</p> Name Type Description <code>game_index</code> <code>int</code> <p>The internal id of an API resource within game data.</p> <code>version</code> <code>NamedResource</code> <p>The version relevent to this game index.</p>"},{"location":"api_reference/models/common/models/#pokelance.models.common.models.VersionGameIndex.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/common/models/#pokelance.models.common.models.VersionGroupFlavorText","title":"<code>VersionGroupFlavorText</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Model for a version group flavor text object</p> <p>Attributes:</p> Name Type Description <code>text</code> <code>str</code> <p>The localized name for an API resource in a specific language.</p> <code>language</code> <code>NamedResource</code> <p>The language this name is in.</p> <code>version_group</code> <code>NamedResource</code> <p>The version group which uses this flavor text.</p>"},{"location":"api_reference/models/common/models/#pokelance.models.common.models.VersionGroupFlavorText.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/common/resources/","title":"Resources","text":""},{"location":"api_reference/models/common/resources/#pokelance.models.common.resources","title":"<code>pokelance.models.common.resources</code>","text":""},{"location":"api_reference/models/common/resources/#pokelance.models.common.resources.NamedResource","title":"<code>NamedResource</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Model for a named resource object</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The name of the referenced resource.</p> <code>url</code> <code>str</code> <p>The URL of the referenced resource.</p>"},{"location":"api_reference/models/common/resources/#pokelance.models.common.resources.NamedResource.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"api_reference/models/common/resources/#pokelance.models.common.resources.Resource","title":"<code>Resource</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Model for a resource object</p> <p>Attributes:</p> Name Type Description <code>url</code> <code>str</code> <p>The URL of the referenced resource.</p>"},{"location":"api_reference/models/common/resources/#pokelance.models.common.resources.Resource.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the model to a dict</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model as a dict.</p> Source code in <code>pokelance/models/_base.py</code> Python<pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n    \"\"\"Convert the model to a dict\n\n    Returns\n    -------\n    typing.Dict[str, Any]\n        The model as a dict.\n    \"\"\"\n    return attrs.asdict(self)\n</code></pre>"},{"location":"guide/advanced_cache/","title":"Advanced usage of cache","text":"Python<pre><code>import asyncio\n\nimport pokelance\n\n\nasync def main():\n    client = pokelance.PokeLance()\n    client.logger.info(await client.ping())\n    client.logger.info(f\"Size: {len(client.berry.cache.berry_flavor)}\")\n    try:\n        client.logger.info(\"Loading berry flavors from cache...\")\n        await client.berry.cache.berry_flavor.load()\n    except FileNotFoundError:\n        client.logger.info(\"Loading berry flavors from API...\")\n        await client.berry.cache.berry_flavor.wait_until_ready()\n        await client.berry.cache.berry_flavor.load_all()\n        await client.berry.cache.berry_flavor.save()\n    client.logger.info(f\"Loaded {len(client.berry.cache.berry_flavor)} berry flavors.\")\n    await client.close()\n\n\nasyncio.run(main())\n</code></pre>"},{"location":"guide/advanced_cache/#explanation","title":"Explanation","text":"<p>Code first looks up the main project directory if the results are already stored if not it tries to load from the api. The <code>wait_until_ready()</code> method checks if the endpoints are cached to load all the data. Another feature of the endpoint cache is input validation in run time and auto completes.</p> <p>Note</p> <p>The data is stored in a <code>json</code> file and you can provide path where its to be stored and loaded from.</p>"},{"location":"guide/basic_usage/","title":"Basic Use and taking advantage of cache","text":"Python<pre><code>import asyncio\n\nfrom pokelance import PokeLance\n\nclient = PokeLance()\n\n\nasync def main():\n    print(await client.ping())\n    print(await client.berry.fetch_berry(\"cheri\"))\n    print(await client.berry.fetch_berry_flavor(\"spicy\"))\n    print(await client.berry.fetch_berry_firmness(\"very-soft\"))\n    print(client.berry.get_berry(\"cheri\"))\n    print(client.berry.get_berry_flavor(\"spicy\"))\n    print(client.berry.get_berry_firmness(\"very-soft\"))\n    return None\n\n\nasyncio.run(main())\n</code></pre>"},{"location":"guide/basic_usage/#with-async-context-manager","title":"With Async Context Manager","text":"Python<pre><code>import asyncio\n\nimport aiohttp\nfrom pokelance import PokeLance\n\n\nasync def main() -&gt; None:\n    # Use an async context manager to create a client instance\n    async with aiohttp.ClientSession() as session, PokeLance(session=session) as client:\n        print(await client.ping())  # Ping the pokeapi\n        print(await client.berry.fetch_berry(\"cheri\"))  # Fetch a berry from the pokeapi\n        print(await client.berry.fetch_berry_flavor(\"spicy\"))\n        print(await client.berry.fetch_berry_firmness(\"very-soft\"))\n        print(client.berry.get_berry(\"cheri\"))  # Get a cached berry it will return None if it doesn't exist\n        print(client.berry.get_berry_flavor(\"spicy\"))\n        print(client.berry.get_berry_firmness(\"very-soft\"))\n        # The client will be closed automatically when the async context manager exits\n    return None\n\nasyncio.run(main())\n</code></pre>"},{"location":"guide/discord_bot/","title":"Implementation of a Discord bot and PokeLance","text":"Python<pre><code>import os\nimport asyncio\n\nimport aiohttp\nimport discord\nfrom discord.ext import commands\nfrom dotenv import load_dotenv\nfrom pokelance import PokeLance\n\n\nclass Bot(commands.Bot):\n\n    def __init__(self, *, web_client: aiohttp.ClientSession, pokemon_db: PokeLance) -&gt; None:\n        super().__init__(command_prefix=\"!\", intents=discord.Intents.all(), case_insensitive=True)\n        self.web_client = web_client\n        self.pokemon_db = pokemon_db\n\n    async def on_ready(self) -&gt; None:\n        print(f\"Logged in as {self.user} ({self.user.id})\")\n        return None\n\n\nasync def main() -&gt; None:\n    load_dotenv()\n    async with aiohttp.ClientSession() as session, PokeLance(session=session) as pokemon_db:\n        async with Bot(web_client=session, pokemon_db=pokemon_db) as bot:\n            bot.run(os.getenv(\"TOKEN\"))\n\nasyncio.run(main())\n</code></pre>"},{"location":"guide/fastapi/","title":"Implementing PokeLance with FastAPI","text":"Python<pre><code>import asyncio\n\nimport uvicorn\nimport aiohttp\nfrom fastapi import FastAPI\nfrom pokelance import PokeLance\nfrom pokelance import models\n\n\nclass App(FastAPI):\n\n    def __init__(self, *, web_client: aiohttp.ClientSession, pokemon_db: PokeLance) -&gt; None:\n        super().__init__()\n        self.web_client = web_client\n        self.pokemon_db = pokemon_db\n        self.setup()\n\n    async def ping(self) -&gt; dict[str, float]:\n        return {\"ping\": await self.pokemon_db.ping()}\n\n    async def berry(self, name: str) -&gt; models.Berry:\n        return self.pokemon_db.berry.get_berry(name) or await self.pokemon_db.berry.fetch_berry(name)\n\n    async def berry_flavor(self, name: str) -&gt; models.BerryFlavor:\n        return self.pokemon_db.berry.get_berry_flavor(name) or await self.pokemon_db.berry.fetch_berry_flavor(name)\n\n    async def berry_firmness(self, name: str) -&gt; models.BerryFirmness:\n        return self.pokemon_db.berry.get_berry_firmness(name) or await self.pokemon_db.berry.fetch_berry_firmness(name)\n\n    def setup(self) -&gt; None:\n        self.add_route(self.ping, \"/ping\", methods=[\"GET\"], response_model=dict[str, float])\n        self.add_route(self.berry, \"/berry/{name}\", methods=[\"GET\"], response_model=models.Berry)\n        self.add_route(self.berry_flavor, \"/berry-flavor/{name}\", methods=[\"GET\"], response_model=models.BerryFlavor)\n        self.add_route(self.berry_firmness, \"/berry-firmness/{name}\", methods=[\"GET\"], response_model=models.BerryFirmness)\n        return None\n\n    def run(self) -&gt; None:\n        uvicorn.run(self, debug=True)\n\n\nasync def main() -&gt; None:\n    async with aiohttp.ClientSession() as session, PokeLance(session=session) as pokemon_db:\n        async with App(web_client=session, pokemon_db=pokemon_db) as app:\n            app.run()\n\nasyncio.run(main())\n</code></pre>"}]}